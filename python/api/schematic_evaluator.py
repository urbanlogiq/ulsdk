# Copyright (c), CommunityLogiq Software
# 
# THIS FILE IS AUTOGENERATED, DO NOT EDIT

from dataclasses import dataclass
import json
from pyarrow import RecordBatch, BufferOutputStream, RecordBatchStreamWriter, RecordBatchStreamReader
from typing import Optional, Any, List, Dict, Self
from urllib.parse import quote_plus
from uuid import UUID
from ..request_context import RequestContext
from ..types.id import ObjectId
from ..types.job import Job, RunSpec, Task

def create_job(
    ctx: RequestContext,
    job: RunSpec,
) -> ObjectId:
    """Create a new schematic evaluator job

    Arguments:
    ctx: RequestContext -- A request context object
    job: RunSpec -- The description of the job to create

    Returns:
    The ID of the newly created job
    """

    path = "/v1/api/ulv2/schematicevaluator/jobs"
    params = dict()
    headers = dict()
    body = job.to_bytes()
    res = ctx.post(path, body=body, mimetype="application/octet-stream", params=params, headers=headers)
    return ObjectId.from_bytes(res)

def get_job(
    ctx: RequestContext,
    id_: UUID,
    timeout: Optional[int],
) -> Job:
    """Fetch the details of the job with the given ID. By default this will block until the job is complete.

    Arguments:
    ctx: RequestContext -- A request context object
    id_: UUID -- The ID of the job to fetch
    timeout: Optional[int] -- Timeout in milliseconds to wait before returning a response

    Returns:
    The details of the job
    """

    path = "/v1/api/ulv2/schematicevaluator/jobs/:id"
    path.replace(":id", str(id_), 1)

    params = dict()
    if timeout is not None:
        params["timeout"] = str(timeout)

    headers = dict()
    res = ctx.get(path, params=params, headers=headers)
    return Job.from_bytes(res)

def get_task(
    ctx: RequestContext,
    id_: UUID,
) -> Task:
    """Fetch the details of the task with the given ID.

    Arguments:
    ctx: RequestContext -- A request context object
    id_: UUID -- The ID of the task to fetch

    Returns:
    The details of the task
    """

    path = "/v1/api/ulv2/schematicevaluator/tasks/:id"
    path.replace(":id", str(id_), 1)

    params = dict()
    headers = dict()
    res = ctx.get(path, params=params, headers=headers)
    return Task.from_bytes(res)
