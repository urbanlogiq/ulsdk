# Copyright (c), CommunityLogiq Software
# 
# THIS FILE IS AUTOGENERATED, DO NOT EDIT

from dataclasses import dataclass
import json
from pyarrow import RecordBatch, BufferOutputStream, RecordBatchStreamWriter, RecordBatchStreamReader
from typing import Optional, Any, List, Dict, Self
from urllib.parse import quote_plus
from uuid import UUID
from ..request_context import RequestContext
from ..types.notification import Inbox

def fetch(
    ctx: RequestContext,
    folder: str,
) -> Inbox:
    """Fetch the contents of the specified inbox folder

    Arguments:
    ctx: RequestContext -- A request context object
    folder: str -- The name of the folder to fetch

    Returns:
    The contents of the inbox folder
    """

    path = "/v1/api/ulv2/inbox/:folder"
    path.replace(":folder", str(folder), 1)

    params = dict()
    headers = dict()
    res = ctx.get(path, params=params, headers=headers)
    return Inbox.from_bytes(res)

def clear_all_status(
    ctx: RequestContext,
    folder: str,
) -> None:
    """Clear the status of all notifications in the specified folder

    Arguments:
    ctx: RequestContext -- A request context object
    folder: str -- The name of the folder to clear
    """

    path = "/v1/api/ulv2/inbox/:folder"
    path.replace(":folder", str(folder), 1)

    params = dict()
    headers = dict()
    ctx.delete(path, params=params, headers=headers)
    return

def set_status(
    ctx: RequestContext,
    folder: str,
    id_: UUID,
    status: int,
) -> None:
    """Set the status of a notification in the specified folder

    Arguments:
    ctx: RequestContext -- A request context object
    folder: str -- The name of the folder to set the status in
    id_: UUID -- The ID of the notification to set the status for
    status: int -- The status to set for the notification
    """

    path = "/v1/api/ulv2/inbox/:folder/:id/status/:status"
    path.replace(":folder", str(folder), 1)
    path.replace(":id", str(id_), 1)
    path.replace(":status", str(status), 1)

    params = dict()
    headers = dict()
    body = None
    ctx.post(path, body=body, mimetype="text/plain", params=params, headers=headers)
    return

def clear_status(
    ctx: RequestContext,
    folder: str,
    id_: UUID,
) -> None:
    """Clear the status of a notification in the specified folder

    Arguments:
    ctx: RequestContext -- A request context object
    folder: str -- The name of the folder to clear the status in
    id_: UUID -- The ID of the notification to clear the status for
    """

    path = "/v1/api/ulv2/inbox/:folder/:id"
    path.replace(":folder", str(folder), 1)
    path.replace(":id", str(id_), 1)

    params = dict()
    headers = dict()
    ctx.delete(path, params=params, headers=headers)
    return
