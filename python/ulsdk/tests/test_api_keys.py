# Copyright (c), CommunityLogiq Software
# 
# THIS FILE IS AUTOGENERATED, DO NOT EDIT

import os
from ..api_key_context import ApiKeyContext
from ..keys import Region, Key as SigningKey, Environment
from ..api.keys import *

def test_get_keys_1():
    ca_user = os.environ["CA_USER"] if "CA_USER" in os.environ else None
    ca_access_key = os.environ["CA_ACCESS_KEY"] if "CA_ACCESS_KEY" in os.environ else None
    ca_secret_key = os.environ["CA_SECRET_KEY"] if "CA_SECRET_KEY" in os.environ else None
    us_user = os.environ["US_USER"] if "US_USER" in os.environ else None
    us_access_key = os.environ["US_ACCESS_KEY"] if "US_ACCESS_KEY" in os.environ else None
    us_secret_key = os.environ["US_SECRET_KEY"] if "US_SECRET_KEY" in os.environ else None

    contexts = [
        (Region.CA, ca_user, ca_access_key, ca_secret_key),
        (Region.US, us_user, us_access_key, us_secret_key),
    ]

    for context in contexts:
        region, user, access_key, secret_key = context
        if user == None or access_key is None or secret_key is None:
            print(f"skipping tests for region {region} as credentials are missing")
            continue
        key = SigningKey(UUID(user), region, access_key, secret_key)
        ctx = ApiKeyContext(key, Environment.Prod)

        res = get_keys(
            ctx,
        )

def test_create_key():

    if False:
        create_key(
            ctx,
        )

def test_update_key():
    p0 = UUID("00000000-0000-0000-0000-000000000000")
    p1 = UpdateKey.make_default()

    if False:
        update_key(
            ctx,
            p0,
            p1,
        )

def test_get_key():
    p0 = UUID("00000000-0000-0000-0000-000000000000")

    if False:
        get_key(
            ctx,
            p0,
        )

def test_delete_key():
    p0 = UUID("00000000-0000-0000-0000-000000000000")

    if False:
        delete_key(
            ctx,
            p0,
        )
