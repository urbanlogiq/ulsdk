# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from .Attribute import Attribute
from .LngLat import LngLat
from typing import Optional
np = import_numpy()

class Table(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Table()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTable(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def TableBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x4F\x4C\x4C", size_prefixed=size_prefixed)

    # Table
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Table
    def Name(self) -> Optional[bytes]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Table
    def Schema(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Table
    def SchemaAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Table
    def SchemaLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Table
    def SchemaIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Table
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Table
    def Lnglat(self) -> Optional[LngLat]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = o + self._tab.Pos
            obj = LngLat()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Table
    def Attributes(self, j: int) -> Optional[Attribute]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = Attribute()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Table
    def AttributesLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Table
    def AttributesIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # Table
    def MinRes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.001

    # Table
    def CountThreshold(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def TableStart(builder: flatbuffers.Builder):
    builder.StartObject(8)

def Start(builder: flatbuffers.Builder):
    TableStart(builder)

def TableAddName(builder: flatbuffers.Builder, name: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder: flatbuffers.Builder, name: int):
    TableAddName(builder, name)

def TableAddSchema(builder: flatbuffers.Builder, schema: int):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(schema), 0)

def AddSchema(builder: flatbuffers.Builder, schema: int):
    TableAddSchema(builder, schema)

def TableStartSchemaVector(builder, numElems: int) -> int:
    return builder.StartVector(1, numElems, 1)

def StartSchemaVector(builder, numElems: int) -> int:
    return TableStartSchemaVector(builder, numElems)

def TableAddType(builder: flatbuffers.Builder, type: int):
    builder.PrependInt8Slot(2, type, 0)

def AddType(builder: flatbuffers.Builder, type: int):
    TableAddType(builder, type)

def TableAddLnglat(builder: flatbuffers.Builder, lnglat: Any):
    builder.PrependStructSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(lnglat), 0)

def AddLnglat(builder: flatbuffers.Builder, lnglat: Any):
    TableAddLnglat(builder, lnglat)

def TableAddAttributes(builder: flatbuffers.Builder, attributes: int):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(attributes), 0)

def AddAttributes(builder: flatbuffers.Builder, attributes: int):
    TableAddAttributes(builder, attributes)

def TableStartAttributesVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartAttributesVector(builder, numElems: int) -> int:
    return TableStartAttributesVector(builder, numElems)

def TableAddMinRes(builder: flatbuffers.Builder, minRes: float):
    builder.PrependFloat32Slot(6, minRes, 0.001)

def AddMinRes(builder: flatbuffers.Builder, minRes: float):
    TableAddMinRes(builder, minRes)

def TableAddCountThreshold(builder: flatbuffers.Builder, countThreshold: int):
    builder.PrependUint32Slot(7, countThreshold, 0)

def AddCountThreshold(builder: flatbuffers.Builder, countThreshold: int):
    TableAddCountThreshold(builder, countThreshold)

def TableEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return TableEnd(builder)
