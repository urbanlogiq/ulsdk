# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from .ContentId import ContentId
from .ObjectId import ObjectId
from .Schema import Schema
from typing import Optional
np = import_numpy()

# A Stream is an instance of a source. The main difference is the parameters
# field is not a ParameterDesc descriptor object but the actual, serialized
# parameter values.
#
# Code performing the operation on the source will be able to construct a
# stream object from this description and downstream code will be able to
# read from it.
class Stream(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Stream()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStream(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Stream
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Stream
    def Url(self) -> Optional[bytes]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Stream
    def Options(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Stream
    def OptionsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Stream
    def OptionsLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Stream
    def OptionsIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Stream
    def Parameters(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Stream
    def ParametersAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Stream
    def ParametersLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Stream
    def ParametersIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Stream
    def Schema(self) -> Optional[Schema]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Schema()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Stream
    def Metadata(self) -> Optional[ObjectId]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ObjectId()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Stream
    def MetadataRevision(self) -> Optional[ContentId]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ContentId()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Stream
    def Flags(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Stream
    def Substreams(self, j: int) -> Optional[ObjectId]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = ObjectId()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Stream
    def SubstreamsLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Stream
    def SubstreamsIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

def StreamStart(builder: flatbuffers.Builder):
    builder.StartObject(10)

def Start(builder: flatbuffers.Builder):
    StreamStart(builder)

def StreamAddUrl(builder: flatbuffers.Builder, url: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(url), 0)

def AddUrl(builder: flatbuffers.Builder, url: int):
    StreamAddUrl(builder, url)

def StreamAddOptions(builder: flatbuffers.Builder, options: int):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(options), 0)

def AddOptions(builder: flatbuffers.Builder, options: int):
    StreamAddOptions(builder, options)

def StreamStartOptionsVector(builder, numElems: int) -> int:
    return builder.StartVector(1, numElems, 1)

def StartOptionsVector(builder, numElems: int) -> int:
    return StreamStartOptionsVector(builder, numElems)

def StreamAddParameters(builder: flatbuffers.Builder, parameters: int):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(parameters), 0)

def AddParameters(builder: flatbuffers.Builder, parameters: int):
    StreamAddParameters(builder, parameters)

def StreamStartParametersVector(builder, numElems: int) -> int:
    return builder.StartVector(1, numElems, 1)

def StartParametersVector(builder, numElems: int) -> int:
    return StreamStartParametersVector(builder, numElems)

def StreamAddSchema(builder: flatbuffers.Builder, schema: int):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(schema), 0)

def AddSchema(builder: flatbuffers.Builder, schema: int):
    StreamAddSchema(builder, schema)

def StreamAddMetadata(builder: flatbuffers.Builder, metadata: int):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(metadata), 0)

def AddMetadata(builder: flatbuffers.Builder, metadata: int):
    StreamAddMetadata(builder, metadata)

def StreamAddMetadataRevision(builder: flatbuffers.Builder, metadataRevision: int):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(metadataRevision), 0)

def AddMetadataRevision(builder: flatbuffers.Builder, metadataRevision: int):
    StreamAddMetadataRevision(builder, metadataRevision)

def StreamAddFlags(builder: flatbuffers.Builder, flags: int):
    builder.PrependUint32Slot(6, flags, 0)

def AddFlags(builder: flatbuffers.Builder, flags: int):
    StreamAddFlags(builder, flags)

def StreamAddSubstreams(builder: flatbuffers.Builder, substreams: int):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(substreams), 0)

def AddSubstreams(builder: flatbuffers.Builder, substreams: int):
    StreamAddSubstreams(builder, substreams)

def StreamStartSubstreamsVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartSubstreamsVector(builder, numElems: int) -> int:
    return StreamStartSubstreamsVector(builder, numElems)

def StreamEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return StreamEnd(builder)
