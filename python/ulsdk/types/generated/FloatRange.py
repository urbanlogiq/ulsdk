# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from .NumericalFieldFormat import NumericalFieldFormat
from typing import Optional
np = import_numpy()

class FloatRange(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FloatRange()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFloatRange(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FloatRange
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FloatRange
    def Min(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # FloatRange
    def Max(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # FloatRange
    def FieldFormat(self) -> Optional[NumericalFieldFormat]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = NumericalFieldFormat()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FloatRange
    def AggregationProtocol(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def FloatRangeStart(builder: flatbuffers.Builder):
    builder.StartObject(4)

def Start(builder: flatbuffers.Builder):
    FloatRangeStart(builder)

def FloatRangeAddMin(builder: flatbuffers.Builder, min: float):
    builder.PrependFloat64Slot(0, min, 0.0)

def AddMin(builder: flatbuffers.Builder, min: float):
    FloatRangeAddMin(builder, min)

def FloatRangeAddMax(builder: flatbuffers.Builder, max: float):
    builder.PrependFloat64Slot(1, max, 0.0)

def AddMax(builder: flatbuffers.Builder, max: float):
    FloatRangeAddMax(builder, max)

def FloatRangeAddFieldFormat(builder: flatbuffers.Builder, fieldFormat: int):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(fieldFormat), 0)

def AddFieldFormat(builder: flatbuffers.Builder, fieldFormat: int):
    FloatRangeAddFieldFormat(builder, fieldFormat)

def FloatRangeAddAggregationProtocol(builder: flatbuffers.Builder, aggregationProtocol: int):
    builder.PrependUint32Slot(3, aggregationProtocol, 0)

def AddAggregationProtocol(builder: flatbuffers.Builder, aggregationProtocol: int):
    FloatRangeAddAggregationProtocol(builder, aggregationProtocol)

def FloatRangeEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return FloatRangeEnd(builder)
