# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from .ColumnGroupId import ColumnGroupId
from .StreamId import StreamId
from typing import Optional
np = import_numpy()

class ColumnGroup(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ColumnGroup()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsColumnGroup(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ColumnGroup
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ColumnGroup
    def Id(self) -> Optional[ColumnGroupId]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ColumnGroupId()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ColumnGroup
    def DisplayName(self) -> Optional[bytes]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ColumnGroup
    def Ty(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ColumnGroup
    def Columns(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ColumnGroup
    def ColumnsLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ColumnGroup
    def ColumnsIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # ColumnGroup
    def StreamId(self) -> Optional[StreamId]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = StreamId()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def ColumnGroupStart(builder: flatbuffers.Builder):
    builder.StartObject(5)

def Start(builder: flatbuffers.Builder):
    ColumnGroupStart(builder)

def ColumnGroupAddId(builder: flatbuffers.Builder, id: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder: flatbuffers.Builder, id: int):
    ColumnGroupAddId(builder, id)

def ColumnGroupAddDisplayName(builder: flatbuffers.Builder, displayName: int):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(displayName), 0)

def AddDisplayName(builder: flatbuffers.Builder, displayName: int):
    ColumnGroupAddDisplayName(builder, displayName)

def ColumnGroupAddTy(builder: flatbuffers.Builder, ty: int):
    builder.PrependUint32Slot(2, ty, 0)

def AddTy(builder: flatbuffers.Builder, ty: int):
    ColumnGroupAddTy(builder, ty)

def ColumnGroupAddColumns(builder: flatbuffers.Builder, columns: int):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(columns), 0)

def AddColumns(builder: flatbuffers.Builder, columns: int):
    ColumnGroupAddColumns(builder, columns)

def ColumnGroupStartColumnsVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartColumnsVector(builder, numElems: int) -> int:
    return ColumnGroupStartColumnsVector(builder, numElems)

def ColumnGroupAddStreamId(builder: flatbuffers.Builder, streamId: int):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(streamId), 0)

def AddStreamId(builder: flatbuffers.Builder, streamId: int):
    ColumnGroupAddStreamId(builder, streamId)

def ColumnGroupEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return ColumnGroupEnd(builder)
