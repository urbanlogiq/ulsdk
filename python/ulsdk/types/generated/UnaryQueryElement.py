# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from .Distinct import Distinct
from .Expr import Expr
from .Function import Function
from .Join import Join
from .TableOrderBy import TableOrderBy
from .TableSource import TableSource
from typing import Optional
np = import_numpy()

class UnaryQueryElement(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UnaryQueryElement()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUnaryQueryElement(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UnaryQueryElement
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UnaryQueryElement
    def Sources(self, j: int) -> Optional[TableSource]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = TableSource()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # UnaryQueryElement
    def SourcesLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UnaryQueryElement
    def SourcesIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # UnaryQueryElement
    def Joins(self, j: int) -> Optional[Join]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = Join()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # UnaryQueryElement
    def JoinsLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UnaryQueryElement
    def JoinsIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # UnaryQueryElement
    def Filter(self) -> Optional[Function]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Function()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # UnaryQueryElement
    def Fields(self, j: int) -> Optional[Expr]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = Expr()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # UnaryQueryElement
    def FieldsLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UnaryQueryElement
    def FieldsIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # UnaryQueryElement
    def OrderBy(self, j: int) -> Optional[TableOrderBy]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = TableOrderBy()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # UnaryQueryElement
    def OrderByLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UnaryQueryElement
    def OrderByIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # UnaryQueryElement
    def GroupBy(self, j: int) -> Optional[Expr]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = Expr()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # UnaryQueryElement
    def GroupByLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UnaryQueryElement
    def GroupByIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # UnaryQueryElement
    def Distinct(self) -> Optional[Distinct]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Distinct()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # UnaryQueryElement
    def Limit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def UnaryQueryElementStart(builder: flatbuffers.Builder):
    builder.StartObject(8)

def Start(builder: flatbuffers.Builder):
    UnaryQueryElementStart(builder)

def UnaryQueryElementAddSources(builder: flatbuffers.Builder, sources: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(sources), 0)

def AddSources(builder: flatbuffers.Builder, sources: int):
    UnaryQueryElementAddSources(builder, sources)

def UnaryQueryElementStartSourcesVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartSourcesVector(builder, numElems: int) -> int:
    return UnaryQueryElementStartSourcesVector(builder, numElems)

def UnaryQueryElementAddJoins(builder: flatbuffers.Builder, joins: int):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(joins), 0)

def AddJoins(builder: flatbuffers.Builder, joins: int):
    UnaryQueryElementAddJoins(builder, joins)

def UnaryQueryElementStartJoinsVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartJoinsVector(builder, numElems: int) -> int:
    return UnaryQueryElementStartJoinsVector(builder, numElems)

def UnaryQueryElementAddFilter(builder: flatbuffers.Builder, filter: int):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(filter), 0)

def AddFilter(builder: flatbuffers.Builder, filter: int):
    UnaryQueryElementAddFilter(builder, filter)

def UnaryQueryElementAddFields(builder: flatbuffers.Builder, fields: int):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(fields), 0)

def AddFields(builder: flatbuffers.Builder, fields: int):
    UnaryQueryElementAddFields(builder, fields)

def UnaryQueryElementStartFieldsVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartFieldsVector(builder, numElems: int) -> int:
    return UnaryQueryElementStartFieldsVector(builder, numElems)

def UnaryQueryElementAddOrderBy(builder: flatbuffers.Builder, orderBy: int):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(orderBy), 0)

def AddOrderBy(builder: flatbuffers.Builder, orderBy: int):
    UnaryQueryElementAddOrderBy(builder, orderBy)

def UnaryQueryElementStartOrderByVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartOrderByVector(builder, numElems: int) -> int:
    return UnaryQueryElementStartOrderByVector(builder, numElems)

def UnaryQueryElementAddGroupBy(builder: flatbuffers.Builder, groupBy: int):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(groupBy), 0)

def AddGroupBy(builder: flatbuffers.Builder, groupBy: int):
    UnaryQueryElementAddGroupBy(builder, groupBy)

def UnaryQueryElementStartGroupByVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartGroupByVector(builder, numElems: int) -> int:
    return UnaryQueryElementStartGroupByVector(builder, numElems)

def UnaryQueryElementAddDistinct(builder: flatbuffers.Builder, distinct: int):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(distinct), 0)

def AddDistinct(builder: flatbuffers.Builder, distinct: int):
    UnaryQueryElementAddDistinct(builder, distinct)

def UnaryQueryElementAddLimit(builder: flatbuffers.Builder, limit: int):
    builder.PrependUint32Slot(7, limit, 0)

def AddLimit(builder: flatbuffers.Builder, limit: int):
    UnaryQueryElementAddLimit(builder, limit)

def UnaryQueryElementEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return UnaryQueryElementEnd(builder)
