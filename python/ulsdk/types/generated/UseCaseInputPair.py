# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from flatbuffers.table import Table
from typing import Optional
np = import_numpy()

class UseCaseInputPair(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UseCaseInputPair()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUseCaseInputPair(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UseCaseInputPair
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UseCaseInputPair
    def Name(self) -> Optional[bytes]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UseCaseInputPair
    def InputType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # UseCaseInputPair
    def Input(self) -> Optional[flatbuffers.table.Table]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def UseCaseInputPairStart(builder: flatbuffers.Builder):
    builder.StartObject(3)

def Start(builder: flatbuffers.Builder):
    UseCaseInputPairStart(builder)

def UseCaseInputPairAddName(builder: flatbuffers.Builder, name: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder: flatbuffers.Builder, name: int):
    UseCaseInputPairAddName(builder, name)

def UseCaseInputPairAddInputType(builder: flatbuffers.Builder, inputType: int):
    builder.PrependUint8Slot(1, inputType, 0)

def AddInputType(builder: flatbuffers.Builder, inputType: int):
    UseCaseInputPairAddInputType(builder, inputType)

def UseCaseInputPairAddInput(builder: flatbuffers.Builder, input: int):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(input), 0)

def AddInput(builder: flatbuffers.Builder, input: int):
    UseCaseInputPairAddInput(builder, input)

def UseCaseInputPairEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return UseCaseInputPairEnd(builder)
