# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from .ColumnGroupId import ColumnGroupId
from typing import Optional
np = import_numpy()

class RelationshipRangeFilter(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RelationshipRangeFilter()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRelationshipRangeFilter(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # RelationshipRangeFilter
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RelationshipRangeFilter
    def ColumnGroupId(self) -> Optional[ColumnGroupId]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ColumnGroupId()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RelationshipRangeFilter
    def AggregateOp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # RelationshipRangeFilter
    def Columns(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RelationshipRangeFilter
    def ColumnsLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RelationshipRangeFilter
    def ColumnsIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # RelationshipRangeFilter
    def Min(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # RelationshipRangeFilter
    def Max(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # RelationshipRangeFilter
    def IncludeNulls(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def RelationshipRangeFilterStart(builder: flatbuffers.Builder):
    builder.StartObject(6)

def Start(builder: flatbuffers.Builder):
    RelationshipRangeFilterStart(builder)

def RelationshipRangeFilterAddColumnGroupId(builder: flatbuffers.Builder, columnGroupId: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(columnGroupId), 0)

def AddColumnGroupId(builder: flatbuffers.Builder, columnGroupId: int):
    RelationshipRangeFilterAddColumnGroupId(builder, columnGroupId)

def RelationshipRangeFilterAddAggregateOp(builder: flatbuffers.Builder, aggregateOp: int):
    builder.PrependUint32Slot(1, aggregateOp, 0)

def AddAggregateOp(builder: flatbuffers.Builder, aggregateOp: int):
    RelationshipRangeFilterAddAggregateOp(builder, aggregateOp)

def RelationshipRangeFilterAddColumns(builder: flatbuffers.Builder, columns: int):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(columns), 0)

def AddColumns(builder: flatbuffers.Builder, columns: int):
    RelationshipRangeFilterAddColumns(builder, columns)

def RelationshipRangeFilterStartColumnsVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartColumnsVector(builder, numElems: int) -> int:
    return RelationshipRangeFilterStartColumnsVector(builder, numElems)

def RelationshipRangeFilterAddMin(builder: flatbuffers.Builder, min: float):
    builder.PrependFloat32Slot(3, min, 0.0)

def AddMin(builder: flatbuffers.Builder, min: float):
    RelationshipRangeFilterAddMin(builder, min)

def RelationshipRangeFilterAddMax(builder: flatbuffers.Builder, max: float):
    builder.PrependFloat32Slot(4, max, 0.0)

def AddMax(builder: flatbuffers.Builder, max: float):
    RelationshipRangeFilterAddMax(builder, max)

def RelationshipRangeFilterAddIncludeNulls(builder: flatbuffers.Builder, includeNulls: bool):
    builder.PrependBoolSlot(5, includeNulls, 0)

def AddIncludeNulls(builder: flatbuffers.Builder, includeNulls: bool):
    RelationshipRangeFilterAddIncludeNulls(builder, includeNulls)

def RelationshipRangeFilterEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return RelationshipRangeFilterEnd(builder)
