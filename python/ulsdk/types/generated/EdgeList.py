# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from .GraphEdge import GraphEdge
from typing import Optional
np = import_numpy()

class EdgeList(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EdgeList()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEdgeList(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EdgeList
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EdgeList
    def Edges(self, j: int) -> Optional[GraphEdge]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = GraphEdge()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # EdgeList
    def EdgesLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EdgeList
    def EdgesIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def EdgeListStart(builder: flatbuffers.Builder):
    builder.StartObject(1)

def Start(builder: flatbuffers.Builder):
    EdgeListStart(builder)

def EdgeListAddEdges(builder: flatbuffers.Builder, edges: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(edges), 0)

def AddEdges(builder: flatbuffers.Builder, edges: int):
    EdgeListAddEdges(builder, edges)

def EdgeListStartEdgesVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartEdgesVector(builder, numElems: int) -> int:
    return EdgeListStartEdgesVector(builder, numElems)

def EdgeListEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return EdgeListEnd(builder)
