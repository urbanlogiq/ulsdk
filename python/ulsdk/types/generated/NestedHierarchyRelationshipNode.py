# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from typing import Optional
np = import_numpy()

class NestedHierarchyRelationshipNode(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NestedHierarchyRelationshipNode()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsNestedHierarchyRelationshipNode(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # NestedHierarchyRelationshipNode
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # NestedHierarchyRelationshipNode
    def Label(self) -> Optional[bytes]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # NestedHierarchyRelationshipNode
    def ChildNodes(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # NestedHierarchyRelationshipNode
    def ChildNodesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # NestedHierarchyRelationshipNode
    def ChildNodesLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NestedHierarchyRelationshipNode
    def ChildNodesIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # NestedHierarchyRelationshipNode
    def ChildColumns(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # NestedHierarchyRelationshipNode
    def ChildColumnsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # NestedHierarchyRelationshipNode
    def ChildColumnsLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NestedHierarchyRelationshipNode
    def ChildColumnsIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def NestedHierarchyRelationshipNodeStart(builder: flatbuffers.Builder):
    builder.StartObject(3)

def Start(builder: flatbuffers.Builder):
    NestedHierarchyRelationshipNodeStart(builder)

def NestedHierarchyRelationshipNodeAddLabel(builder: flatbuffers.Builder, label: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(label), 0)

def AddLabel(builder: flatbuffers.Builder, label: int):
    NestedHierarchyRelationshipNodeAddLabel(builder, label)

def NestedHierarchyRelationshipNodeAddChildNodes(builder: flatbuffers.Builder, childNodes: int):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(childNodes), 0)

def AddChildNodes(builder: flatbuffers.Builder, childNodes: int):
    NestedHierarchyRelationshipNodeAddChildNodes(builder, childNodes)

def NestedHierarchyRelationshipNodeStartChildNodesVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartChildNodesVector(builder, numElems: int) -> int:
    return NestedHierarchyRelationshipNodeStartChildNodesVector(builder, numElems)

def NestedHierarchyRelationshipNodeAddChildColumns(builder: flatbuffers.Builder, childColumns: int):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(childColumns), 0)

def AddChildColumns(builder: flatbuffers.Builder, childColumns: int):
    NestedHierarchyRelationshipNodeAddChildColumns(builder, childColumns)

def NestedHierarchyRelationshipNodeStartChildColumnsVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartChildColumnsVector(builder, numElems: int) -> int:
    return NestedHierarchyRelationshipNodeStartChildColumnsVector(builder, numElems)

def NestedHierarchyRelationshipNodeEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return NestedHierarchyRelationshipNodeEnd(builder)
