# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from .Event import Event
from .TimeSpacePoint import TimeSpacePoint
from typing import Optional
np = import_numpy()

class Trip(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Trip()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTrip(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Trip
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Trip
    def WejoId(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Trip
    def WejoIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Trip
    def WejoIdLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Trip
    def WejoIdIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Trip
    def Start(self) -> Optional[TimeSpacePoint]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = TimeSpacePoint()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Trip
    def End(self) -> Optional[TimeSpacePoint]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = TimeSpacePoint()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Trip
    def Events(self, j: int) -> Optional[Event]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = Event()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Trip
    def EventsLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Trip
    def EventsIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def TripStart(builder: flatbuffers.Builder):
    builder.StartObject(4)

def Start(builder: flatbuffers.Builder):
    TripStart(builder)

def TripAddWejoId(builder: flatbuffers.Builder, wejoId: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(wejoId), 0)

def AddWejoId(builder: flatbuffers.Builder, wejoId: int):
    TripAddWejoId(builder, wejoId)

def TripStartWejoIdVector(builder, numElems: int) -> int:
    return builder.StartVector(1, numElems, 1)

def StartWejoIdVector(builder, numElems: int) -> int:
    return TripStartWejoIdVector(builder, numElems)

def TripAddStart(builder: flatbuffers.Builder, start: int):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(start), 0)

def AddStart(builder: flatbuffers.Builder, start: int):
    TripAddStart(builder, start)

def TripAddEnd(builder: flatbuffers.Builder, end: int):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(end), 0)

def AddEnd(builder: flatbuffers.Builder, end: int):
    TripAddEnd(builder, end)

def TripAddEvents(builder: flatbuffers.Builder, events: int):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(events), 0)

def AddEvents(builder: flatbuffers.Builder, events: int):
    TripAddEvents(builder, events)

def TripStartEventsVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartEventsVector(builder, numElems: int) -> int:
    return TripStartEventsVector(builder, numElems)

def TripEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return TripEnd(builder)
