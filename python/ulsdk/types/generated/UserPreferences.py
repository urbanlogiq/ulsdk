# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from .ObjectId import ObjectId
from .Point import Point
from typing import Optional
np = import_numpy()

class UserPreferences(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserPreferences()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserPreferences(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserPreferences
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserPreferences
    def Units(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserPreferences
    def HomepageUsecaseId(self) -> Optional[ObjectId]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ObjectId()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # UserPreferences
    def Timezone(self) -> Optional[bytes]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserPreferences
    def Center(self) -> Optional[Point]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Point()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # UserPreferences
    def Zoom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # UserPreferences
    def DefaultAreaReportTemplate(self) -> Optional[ObjectId]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ObjectId()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def UserPreferencesStart(builder: flatbuffers.Builder):
    builder.StartObject(6)

def Start(builder: flatbuffers.Builder):
    UserPreferencesStart(builder)

def UserPreferencesAddUnits(builder: flatbuffers.Builder, units: int):
    builder.PrependUint32Slot(0, units, 0)

def AddUnits(builder: flatbuffers.Builder, units: int):
    UserPreferencesAddUnits(builder, units)

def UserPreferencesAddHomepageUsecaseId(builder: flatbuffers.Builder, homepageUsecaseId: int):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(homepageUsecaseId), 0)

def AddHomepageUsecaseId(builder: flatbuffers.Builder, homepageUsecaseId: int):
    UserPreferencesAddHomepageUsecaseId(builder, homepageUsecaseId)

def UserPreferencesAddTimezone(builder: flatbuffers.Builder, timezone: int):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(timezone), 0)

def AddTimezone(builder: flatbuffers.Builder, timezone: int):
    UserPreferencesAddTimezone(builder, timezone)

def UserPreferencesAddCenter(builder: flatbuffers.Builder, center: int):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(center), 0)

def AddCenter(builder: flatbuffers.Builder, center: int):
    UserPreferencesAddCenter(builder, center)

def UserPreferencesAddZoom(builder: flatbuffers.Builder, zoom: float):
    builder.PrependFloat32Slot(4, zoom, 0.0)

def AddZoom(builder: flatbuffers.Builder, zoom: float):
    UserPreferencesAddZoom(builder, zoom)

def UserPreferencesAddDefaultAreaReportTemplate(builder: flatbuffers.Builder, defaultAreaReportTemplate: int):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(defaultAreaReportTemplate), 0)

def AddDefaultAreaReportTemplate(builder: flatbuffers.Builder, defaultAreaReportTemplate: int):
    UserPreferencesAddDefaultAreaReportTemplate(builder, defaultAreaReportTemplate)

def UserPreferencesEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return UserPreferencesEnd(builder)
