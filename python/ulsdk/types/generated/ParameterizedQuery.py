# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from .ParameterInstance import ParameterInstance
from .QueryElement import QueryElement
from typing import Optional
np = import_numpy()

class ParameterizedQuery(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ParameterizedQuery()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsParameterizedQuery(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ParameterizedQuery
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ParameterizedQuery
    def Query(self) -> Optional[QueryElement]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = QueryElement()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ParameterizedQuery
    def Parameters(self, j: int) -> Optional[ParameterInstance]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = ParameterInstance()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ParameterizedQuery
    def ParametersLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ParameterizedQuery
    def ParametersIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # ParameterizedQuery
    def Limit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def ParameterizedQueryStart(builder: flatbuffers.Builder):
    builder.StartObject(3)

def Start(builder: flatbuffers.Builder):
    ParameterizedQueryStart(builder)

def ParameterizedQueryAddQuery(builder: flatbuffers.Builder, query: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(query), 0)

def AddQuery(builder: flatbuffers.Builder, query: int):
    ParameterizedQueryAddQuery(builder, query)

def ParameterizedQueryAddParameters(builder: flatbuffers.Builder, parameters: int):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(parameters), 0)

def AddParameters(builder: flatbuffers.Builder, parameters: int):
    ParameterizedQueryAddParameters(builder, parameters)

def ParameterizedQueryStartParametersVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartParametersVector(builder, numElems: int) -> int:
    return ParameterizedQueryStartParametersVector(builder, numElems)

def ParameterizedQueryAddLimit(builder: flatbuffers.Builder, limit: int):
    builder.PrependUint32Slot(2, limit, 0)

def AddLimit(builder: flatbuffers.Builder, limit: int):
    ParameterizedQueryAddLimit(builder, limit)

def ParameterizedQueryEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return ParameterizedQueryEnd(builder)
