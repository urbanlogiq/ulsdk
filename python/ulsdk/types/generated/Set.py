# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from .GenericId import GenericId
from .ValueInstance import ValueInstance
from typing import Optional
np = import_numpy()

# The Set operation is used to set the value of a cell in a table.
class Set(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Set()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSet(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Set
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The value of the ul_node_id column, which uniquely identifies the row.
    # Set
    def Row(self) -> Optional[GenericId]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = GenericId()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Name of the column to set.
    # Set
    def Col(self) -> Optional[bytes]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The value to set.
    # Set
    def Value(self) -> Optional[ValueInstance]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValueInstance()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def SetStart(builder: flatbuffers.Builder):
    builder.StartObject(3)

def Start(builder: flatbuffers.Builder):
    SetStart(builder)

def SetAddRow(builder: flatbuffers.Builder, row: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(row), 0)

def AddRow(builder: flatbuffers.Builder, row: int):
    SetAddRow(builder, row)

def SetAddCol(builder: flatbuffers.Builder, col: int):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(col), 0)

def AddCol(builder: flatbuffers.Builder, col: int):
    SetAddCol(builder, col)

def SetAddValue(builder: flatbuffers.Builder, value: int):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def AddValue(builder: flatbuffers.Builder, value: int):
    SetAddValue(builder, value)

def SetEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return SetEnd(builder)
