# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from .Chunk import Chunk
from .GenericId import GenericId
from flatbuffers.table import Table
from typing import Optional
np = import_numpy()

class File(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = File()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFile(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # File
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # File
    def Mime(self) -> Optional[bytes]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # File
    def Size(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # File
    def Blob(self) -> Optional[GenericId]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = GenericId()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # File
    def Virus(self) -> Optional[bytes]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # File
    def DigestType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # File
    def Digest(self) -> Optional[flatbuffers.table.Table]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # File
    def Account(self) -> Optional[bytes]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # File
    def Container(self) -> Optional[bytes]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # File
    def Chunks(self, j: int) -> Optional[Chunk]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = Chunk()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # File
    def ChunksLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # File
    def ChunksIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

def FileStart(builder: flatbuffers.Builder):
    builder.StartObject(9)

def Start(builder: flatbuffers.Builder):
    FileStart(builder)

def FileAddMime(builder: flatbuffers.Builder, mime: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(mime), 0)

def AddMime(builder: flatbuffers.Builder, mime: int):
    FileAddMime(builder, mime)

def FileAddSize(builder: flatbuffers.Builder, size: int):
    builder.PrependUint64Slot(1, size, 0)

def AddSize(builder: flatbuffers.Builder, size: int):
    FileAddSize(builder, size)

def FileAddBlob(builder: flatbuffers.Builder, blob: int):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(blob), 0)

def AddBlob(builder: flatbuffers.Builder, blob: int):
    FileAddBlob(builder, blob)

def FileAddVirus(builder: flatbuffers.Builder, virus: int):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(virus), 0)

def AddVirus(builder: flatbuffers.Builder, virus: int):
    FileAddVirus(builder, virus)

def FileAddDigestType(builder: flatbuffers.Builder, digestType: int):
    builder.PrependUint8Slot(4, digestType, 0)

def AddDigestType(builder: flatbuffers.Builder, digestType: int):
    FileAddDigestType(builder, digestType)

def FileAddDigest(builder: flatbuffers.Builder, digest: int):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(digest), 0)

def AddDigest(builder: flatbuffers.Builder, digest: int):
    FileAddDigest(builder, digest)

def FileAddAccount(builder: flatbuffers.Builder, account: int):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(account), 0)

def AddAccount(builder: flatbuffers.Builder, account: int):
    FileAddAccount(builder, account)

def FileAddContainer(builder: flatbuffers.Builder, container: int):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(container), 0)

def AddContainer(builder: flatbuffers.Builder, container: int):
    FileAddContainer(builder, container)

def FileAddChunks(builder: flatbuffers.Builder, chunks: int):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(chunks), 0)

def AddChunks(builder: flatbuffers.Builder, chunks: int):
    FileAddChunks(builder, chunks)

def FileStartChunksVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartChunksVector(builder, numElems: int) -> int:
    return FileStartChunksVector(builder, numElems)

def FileEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return FileEnd(builder)
