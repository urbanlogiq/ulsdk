# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from .DataCatalogObject import DataCatalogObject
from .ObjectId import ObjectId
from typing import Optional
from typing import Union
np = import_numpy()

class ObjectIdPair(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ObjectIdPair()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsObjectIdPair(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ObjectIdPair
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ObjectIdPair
    def Id(self) -> Optional[ObjectId]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ObjectId()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ObjectIdPair
    def Object(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # ObjectIdPair
    def ObjectAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # ObjectIdPair
    def ObjectNestedRoot(self) -> Union[DataCatalogObject, int]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return DataCatalogObject.GetRootAs(self._tab.Bytes, self._tab.Vector(o))
        return 0

    # ObjectIdPair
    def ObjectLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ObjectIdPair
    def ObjectIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def ObjectIdPairStart(builder: flatbuffers.Builder):
    builder.StartObject(2)

def Start(builder: flatbuffers.Builder):
    ObjectIdPairStart(builder)

def ObjectIdPairAddId(builder: flatbuffers.Builder, id: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder: flatbuffers.Builder, id: int):
    ObjectIdPairAddId(builder, id)

def ObjectIdPairAddObject(builder: flatbuffers.Builder, object: int):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(object), 0)

def AddObject(builder: flatbuffers.Builder, object: int):
    ObjectIdPairAddObject(builder, object)

def ObjectIdPairStartObjectVector(builder, numElems: int) -> int:
    return builder.StartVector(1, numElems, 1)

def StartObjectVector(builder, numElems: int) -> int:
    return ObjectIdPairStartObjectVector(builder, numElems)

def ObjectIdPairMakeObjectVectorFromBytes(builder, bytes):
    builder.StartVector(1, len(bytes), 1)
    builder.head = builder.head - len(bytes)
    builder.Bytes[builder.head : builder.head + len(bytes)] = bytes
    return builder.EndVector()
def MakeObjectVectorFromBytes(builder, bytes):
    return ObjectIdPairMakeObjectVectorFromBytes(builder, bytes)
def ObjectIdPairEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return ObjectIdPairEnd(builder)
