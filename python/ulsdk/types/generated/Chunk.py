# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from .GenericId import GenericId
from flatbuffers.table import Table
from typing import Optional
np = import_numpy()

class Chunk(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Chunk()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsChunk(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Chunk
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Chunk
    def Blob(self) -> Optional[GenericId]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = GenericId()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Chunk
    def DigestType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Chunk
    def Digest(self) -> Optional[flatbuffers.table.Table]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # Chunk
    def Size(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def ChunkStart(builder: flatbuffers.Builder):
    builder.StartObject(4)

def Start(builder: flatbuffers.Builder):
    ChunkStart(builder)

def ChunkAddBlob(builder: flatbuffers.Builder, blob: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(blob), 0)

def AddBlob(builder: flatbuffers.Builder, blob: int):
    ChunkAddBlob(builder, blob)

def ChunkAddDigestType(builder: flatbuffers.Builder, digestType: int):
    builder.PrependUint8Slot(1, digestType, 0)

def AddDigestType(builder: flatbuffers.Builder, digestType: int):
    ChunkAddDigestType(builder, digestType)

def ChunkAddDigest(builder: flatbuffers.Builder, digest: int):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(digest), 0)

def AddDigest(builder: flatbuffers.Builder, digest: int):
    ChunkAddDigest(builder, digest)

def ChunkAddSize(builder: flatbuffers.Builder, size: int):
    builder.PrependUint64Slot(3, size, 0)

def AddSize(builder: flatbuffers.Builder, size: int):
    ChunkAddSize(builder, size)

def ChunkEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return ChunkEnd(builder)
