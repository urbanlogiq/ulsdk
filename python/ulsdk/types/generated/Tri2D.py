# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
np = import_numpy()

class Tri2D(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls) -> int:
        return 24

    # Tri2D
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Tri2D
    def P0(self, obj):
        obj.Init(self._tab.Bytes, self._tab.Pos + 0)
        return obj

    # Tri2D
    def P1(self, obj):
        obj.Init(self._tab.Bytes, self._tab.Pos + 8)
        return obj

    # Tri2D
    def P2(self, obj):
        obj.Init(self._tab.Bytes, self._tab.Pos + 16)
        return obj


def CreateTri2D(builder, p0_x, p0_y, p1_x, p1_y, p2_x, p2_y):
    builder.Prep(4, 24)
    builder.Prep(4, 8)
    builder.PrependFloat32(p2_y)
    builder.PrependFloat32(p2_x)
    builder.Prep(4, 8)
    builder.PrependFloat32(p1_y)
    builder.PrependFloat32(p1_x)
    builder.Prep(4, 8)
    builder.PrependFloat32(p0_y)
    builder.PrependFloat32(p0_x)
    return builder.Offset()
