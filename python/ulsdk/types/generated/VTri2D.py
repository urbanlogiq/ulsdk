# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from .Tri2D import Tri2D
from typing import Optional
np = import_numpy()

class VTri2D(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VTri2D()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVTri2D(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # VTri2D
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # VTri2D
    def V(self) -> Optional[Tri2D]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            obj = Tri2D()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def VTri2DStart(builder: flatbuffers.Builder):
    builder.StartObject(1)

def Start(builder: flatbuffers.Builder):
    VTri2DStart(builder)

def VTri2DAddV(builder: flatbuffers.Builder, v: Any):
    builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(v), 0)

def AddV(builder: flatbuffers.Builder, v: Any):
    VTri2DAddV(builder, v)

def VTri2DEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return VTri2DEnd(builder)
