# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from .Attr import Attr
from .B2cId import B2cId
from .ChangeOpEntry import ChangeOpEntry
from .ContentId import ContentId
from typing import Optional
np = import_numpy()

class ChangeSet(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ChangeSet()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsChangeSet(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ChangeSet
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ChangeSet
    def Revision(self) -> Optional[ContentId]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ContentId()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ChangeSet
    def Who(self) -> Optional[B2cId]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = B2cId()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ChangeSet
    def When(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # ChangeSet
    def Ops(self, j: int) -> Optional[ChangeOpEntry]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = ChangeOpEntry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ChangeSet
    def OpsLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ChangeSet
    def OpsIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # ChangeSet
    def Attributes(self, j: int) -> Optional[Attr]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = Attr()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ChangeSet
    def AttributesLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ChangeSet
    def AttributesIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def ChangeSetStart(builder: flatbuffers.Builder):
    builder.StartObject(5)

def Start(builder: flatbuffers.Builder):
    ChangeSetStart(builder)

def ChangeSetAddRevision(builder: flatbuffers.Builder, revision: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(revision), 0)

def AddRevision(builder: flatbuffers.Builder, revision: int):
    ChangeSetAddRevision(builder, revision)

def ChangeSetAddWho(builder: flatbuffers.Builder, who: int):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(who), 0)

def AddWho(builder: flatbuffers.Builder, who: int):
    ChangeSetAddWho(builder, who)

def ChangeSetAddWhen(builder: flatbuffers.Builder, when: int):
    builder.PrependUint64Slot(2, when, 0)

def AddWhen(builder: flatbuffers.Builder, when: int):
    ChangeSetAddWhen(builder, when)

def ChangeSetAddOps(builder: flatbuffers.Builder, ops: int):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(ops), 0)

def AddOps(builder: flatbuffers.Builder, ops: int):
    ChangeSetAddOps(builder, ops)

def ChangeSetStartOpsVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartOpsVector(builder, numElems: int) -> int:
    return ChangeSetStartOpsVector(builder, numElems)

def ChangeSetAddAttributes(builder: flatbuffers.Builder, attributes: int):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(attributes), 0)

def AddAttributes(builder: flatbuffers.Builder, attributes: int):
    ChangeSetAddAttributes(builder, attributes)

def ChangeSetStartAttributesVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartAttributesVector(builder, numElems: int) -> int:
    return ChangeSetStartAttributesVector(builder, numElems)

def ChangeSetEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return ChangeSetEnd(builder)
