# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from .ContentId import ContentId
from .NamedParameter import NamedParameter
from .ObjectId import ObjectId
from .Schema import Schema
from typing import Optional
np = import_numpy()

class Source(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Source()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSource(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Source
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Source
    def Url(self) -> Optional[bytes]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source
    def Name(self) -> Optional[bytes]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source
    def Options(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Source
    def OptionsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Source
    def OptionsLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Source
    def OptionsIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Source
    def Schemas(self, j: int) -> Optional[Schema]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = Schema()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Source
    def SchemasLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Source
    def SchemasIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # Source
    def Metadata(self) -> Optional[ObjectId]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ObjectId()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Source
    def MetadataRevision(self) -> Optional[ContentId]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ContentId()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Source
    def NamedParameters(self, j: int) -> Optional[NamedParameter]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = NamedParameter()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Source
    def NamedParametersLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Source
    def NamedParametersIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

def SourceStart(builder: flatbuffers.Builder):
    builder.StartObject(8)

def Start(builder: flatbuffers.Builder):
    SourceStart(builder)

def SourceAddUrl(builder: flatbuffers.Builder, url: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(url), 0)

def AddUrl(builder: flatbuffers.Builder, url: int):
    SourceAddUrl(builder, url)

def SourceAddName(builder: flatbuffers.Builder, name: int):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder: flatbuffers.Builder, name: int):
    SourceAddName(builder, name)

def SourceAddOptions(builder: flatbuffers.Builder, options: int):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(options), 0)

def AddOptions(builder: flatbuffers.Builder, options: int):
    SourceAddOptions(builder, options)

def SourceStartOptionsVector(builder, numElems: int) -> int:
    return builder.StartVector(1, numElems, 1)

def StartOptionsVector(builder, numElems: int) -> int:
    return SourceStartOptionsVector(builder, numElems)

def SourceAddSchemas(builder: flatbuffers.Builder, schemas: int):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(schemas), 0)

def AddSchemas(builder: flatbuffers.Builder, schemas: int):
    SourceAddSchemas(builder, schemas)

def SourceStartSchemasVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartSchemasVector(builder, numElems: int) -> int:
    return SourceStartSchemasVector(builder, numElems)

def SourceAddMetadata(builder: flatbuffers.Builder, metadata: int):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(metadata), 0)

def AddMetadata(builder: flatbuffers.Builder, metadata: int):
    SourceAddMetadata(builder, metadata)

def SourceAddMetadataRevision(builder: flatbuffers.Builder, metadataRevision: int):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(metadataRevision), 0)

def AddMetadataRevision(builder: flatbuffers.Builder, metadataRevision: int):
    SourceAddMetadataRevision(builder, metadataRevision)

def SourceAddNamedParameters(builder: flatbuffers.Builder, namedParameters: int):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(namedParameters), 0)

def AddNamedParameters(builder: flatbuffers.Builder, namedParameters: int):
    SourceAddNamedParameters(builder, namedParameters)

def SourceStartNamedParametersVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartNamedParametersVector(builder, numElems: int) -> int:
    return SourceStartNamedParametersVector(builder, numElems)

def SourceEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return SourceEnd(builder)
