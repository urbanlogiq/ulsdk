# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from .Function import Function
from .SetExpr import SetExpr
from flatbuffers.table import Table
from typing import Optional
np = import_numpy()

class UpdateQueryElement(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UpdateQueryElement()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUpdateQueryElement(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UpdateQueryElement
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UpdateQueryElement
    def SourceType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # UpdateQueryElement
    def Source(self) -> Optional[flatbuffers.table.Table]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # UpdateQueryElement
    def Sets(self, j: int) -> Optional[SetExpr]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = SetExpr()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # UpdateQueryElement
    def SetsLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UpdateQueryElement
    def SetsIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # UpdateQueryElement
    def Filter(self) -> Optional[Function]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Function()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def UpdateQueryElementStart(builder: flatbuffers.Builder):
    builder.StartObject(4)

def Start(builder: flatbuffers.Builder):
    UpdateQueryElementStart(builder)

def UpdateQueryElementAddSourceType(builder: flatbuffers.Builder, sourceType: int):
    builder.PrependUint8Slot(0, sourceType, 0)

def AddSourceType(builder: flatbuffers.Builder, sourceType: int):
    UpdateQueryElementAddSourceType(builder, sourceType)

def UpdateQueryElementAddSource(builder: flatbuffers.Builder, source: int):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder: flatbuffers.Builder, source: int):
    UpdateQueryElementAddSource(builder, source)

def UpdateQueryElementAddSets(builder: flatbuffers.Builder, sets: int):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(sets), 0)

def AddSets(builder: flatbuffers.Builder, sets: int):
    UpdateQueryElementAddSets(builder, sets)

def UpdateQueryElementStartSetsVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartSetsVector(builder, numElems: int) -> int:
    return UpdateQueryElementStartSetsVector(builder, numElems)

def UpdateQueryElementAddFilter(builder: flatbuffers.Builder, filter: int):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(filter), 0)

def AddFilter(builder: flatbuffers.Builder, filter: int):
    UpdateQueryElementAddFilter(builder, filter)

def UpdateQueryElementEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return UpdateQueryElementEnd(builder)
