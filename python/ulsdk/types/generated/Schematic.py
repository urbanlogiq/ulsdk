# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from .AttributePair import AttributePair
from .Edge import Edge
from .Node import Node
from typing import Optional
np = import_numpy()

class Schematic(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Schematic()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSchematic(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Schematic
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Schematic
    def Nodes(self, j: int) -> Optional[Node]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = Node()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Schematic
    def NodesLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Schematic
    def NodesIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Schematic
    def Edges(self, j: int) -> Optional[Edge]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = Edge()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Schematic
    def EdgesLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Schematic
    def EdgesIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Schematic
    def Attributes(self, j: int) -> Optional[AttributePair]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = AttributePair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Schematic
    def AttributesLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Schematic
    def AttributesIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Schematic
    def Name(self) -> Optional[bytes]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def SchematicStart(builder: flatbuffers.Builder):
    builder.StartObject(4)

def Start(builder: flatbuffers.Builder):
    SchematicStart(builder)

def SchematicAddNodes(builder: flatbuffers.Builder, nodes: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(nodes), 0)

def AddNodes(builder: flatbuffers.Builder, nodes: int):
    SchematicAddNodes(builder, nodes)

def SchematicStartNodesVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartNodesVector(builder, numElems: int) -> int:
    return SchematicStartNodesVector(builder, numElems)

def SchematicAddEdges(builder: flatbuffers.Builder, edges: int):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(edges), 0)

def AddEdges(builder: flatbuffers.Builder, edges: int):
    SchematicAddEdges(builder, edges)

def SchematicStartEdgesVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartEdgesVector(builder, numElems: int) -> int:
    return SchematicStartEdgesVector(builder, numElems)

def SchematicAddAttributes(builder: flatbuffers.Builder, attributes: int):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(attributes), 0)

def AddAttributes(builder: flatbuffers.Builder, attributes: int):
    SchematicAddAttributes(builder, attributes)

def SchematicStartAttributesVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartAttributesVector(builder, numElems: int) -> int:
    return SchematicStartAttributesVector(builder, numElems)

def SchematicAddName(builder: flatbuffers.Builder, name: int):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder: flatbuffers.Builder, name: int):
    SchematicAddName(builder, name)

def SchematicEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return SchematicEnd(builder)
