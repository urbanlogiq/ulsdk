# Copyright (c), CommunityLogiq Software
# 
# THIS FILE IS AUTOGENERATED, DO NOT EDIT

from dataclasses import dataclass
from enum import Enum
from flatbuffers.table import Table
from flatbuffers.builder import Builder
from flatbuffers.util import RemoveSizePrefix
from typing import Union, List, Optional, Self, Tuple
from .generated.B2cId import B2cId as FbsB2cId
from .generated.ColumnGroupId import ColumnGroupId as FbsColumnGroupId
from .generated.ContentId import ContentId as FbsContentId
from .generated.DataStateId import DataStateId as FbsDataStateId
from .generated.GenericId import GenericId as FbsGenericId
from .generated.GraphNodeId import GraphNodeId as FbsGraphNodeId
from .generated.ObjectId import ObjectId as FbsObjectId
from .generated.StreamId import StreamId as FbsStreamId

class ObjectNamespace(Enum):
    Global = 0
    User = 1
    Generated = 2
    Acl = 3
    Evaluator = 4
    Drive = 5
    Notifications = 6
    Unknown = 65535


@dataclass
class B2cId:
    b: "List[int]"

    @classmethod
    def from_fbs(cls, o: FbsB2cId) -> Self:
        b = list()
        if not o.BIsNone():
            for i in range(o.BLength()):
                b.append(o.B(i))
        return cls(b)

    @classmethod
    def from_bytes(cls, data: bytes) -> Self:
        deprefixed = RemoveSizePrefix(data, 0)
        o = FbsB2cId.GetRootAs(deprefixed[0], deprefixed[1])
        return cls.from_fbs(o)

    def serialize_to(self, builder: Builder) -> int:
        from .generated.B2cId import (
            Start,
            AddB,
            StartBVector,
            End,
        )
        StartBVector(builder, len(self.b))
        for i in reversed(range(len(self.b))):
            builder.PrependUint8(self.b[i])
        b_offset = builder.EndVector()
        
        Start(builder)
        AddB(builder, b_offset)
        return End(builder)

    def to_bytes(self) -> bytes:
        builder = Builder(0)
        offset = self.serialize_to(builder)
        builder.FinishSizePrefixed(offset)
        return builder.Output()

    @classmethod
    def make_default(cls) -> Self:
        b = []
        return cls(b)

    def __eq__(self, other) -> bool:
        eq = True
        if len(self.b) != len(other.b):
            return False
        for i in range(len(self.b)):
            eq = eq and self.b[i] == other.b[i]

        return eq

@dataclass
class ColumnGroupId:
    b: "List[int]"

    @classmethod
    def from_fbs(cls, o: FbsColumnGroupId) -> Self:
        b = list()
        if not o.BIsNone():
            for i in range(o.BLength()):
                b.append(o.B(i))
        return cls(b)

    @classmethod
    def from_bytes(cls, data: bytes) -> Self:
        deprefixed = RemoveSizePrefix(data, 0)
        o = FbsColumnGroupId.GetRootAs(deprefixed[0], deprefixed[1])
        return cls.from_fbs(o)

    def serialize_to(self, builder: Builder) -> int:
        from .generated.ColumnGroupId import (
            Start,
            AddB,
            StartBVector,
            End,
        )
        StartBVector(builder, len(self.b))
        for i in reversed(range(len(self.b))):
            builder.PrependUint8(self.b[i])
        b_offset = builder.EndVector()
        
        Start(builder)
        AddB(builder, b_offset)
        return End(builder)

    def to_bytes(self) -> bytes:
        builder = Builder(0)
        offset = self.serialize_to(builder)
        builder.FinishSizePrefixed(offset)
        return builder.Output()

    @classmethod
    def make_default(cls) -> Self:
        b = []
        return cls(b)

    def __eq__(self, other) -> bool:
        eq = True
        if len(self.b) != len(other.b):
            return False
        for i in range(len(self.b)):
            eq = eq and self.b[i] == other.b[i]

        return eq

@dataclass
class ContentId:
    b: "List[int]"

    @classmethod
    def from_fbs(cls, o: FbsContentId) -> Self:
        b = list()
        if not o.BIsNone():
            for i in range(o.BLength()):
                b.append(o.B(i))
        return cls(b)

    @classmethod
    def from_bytes(cls, data: bytes) -> Self:
        deprefixed = RemoveSizePrefix(data, 0)
        o = FbsContentId.GetRootAs(deprefixed[0], deprefixed[1])
        return cls.from_fbs(o)

    def serialize_to(self, builder: Builder) -> int:
        from .generated.ContentId import (
            Start,
            AddB,
            StartBVector,
            End,
        )
        StartBVector(builder, len(self.b))
        for i in reversed(range(len(self.b))):
            builder.PrependUint8(self.b[i])
        b_offset = builder.EndVector()
        
        Start(builder)
        AddB(builder, b_offset)
        return End(builder)

    def to_bytes(self) -> bytes:
        builder = Builder(0)
        offset = self.serialize_to(builder)
        builder.FinishSizePrefixed(offset)
        return builder.Output()

    @classmethod
    def make_default(cls) -> Self:
        b = []
        return cls(b)

    def __eq__(self, other) -> bool:
        eq = True
        if len(self.b) != len(other.b):
            return False
        for i in range(len(self.b)):
            eq = eq and self.b[i] == other.b[i]

        return eq

@dataclass
class DataStateId:
    b: "List[int]"

    @classmethod
    def from_fbs(cls, o: FbsDataStateId) -> Self:
        b = list()
        if not o.BIsNone():
            for i in range(o.BLength()):
                b.append(o.B(i))
        return cls(b)

    @classmethod
    def from_bytes(cls, data: bytes) -> Self:
        deprefixed = RemoveSizePrefix(data, 0)
        o = FbsDataStateId.GetRootAs(deprefixed[0], deprefixed[1])
        return cls.from_fbs(o)

    def serialize_to(self, builder: Builder) -> int:
        from .generated.DataStateId import (
            Start,
            AddB,
            StartBVector,
            End,
        )
        StartBVector(builder, len(self.b))
        for i in reversed(range(len(self.b))):
            builder.PrependUint8(self.b[i])
        b_offset = builder.EndVector()
        
        Start(builder)
        AddB(builder, b_offset)
        return End(builder)

    def to_bytes(self) -> bytes:
        builder = Builder(0)
        offset = self.serialize_to(builder)
        builder.FinishSizePrefixed(offset)
        return builder.Output()

    @classmethod
    def make_default(cls) -> Self:
        b = []
        return cls(b)

    def __eq__(self, other) -> bool:
        eq = True
        if len(self.b) != len(other.b):
            return False
        for i in range(len(self.b)):
            eq = eq and self.b[i] == other.b[i]

        return eq

@dataclass
class GenericId:
    b: "List[int]"

    @classmethod
    def from_fbs(cls, o: FbsGenericId) -> Self:
        b = list()
        if not o.BIsNone():
            for i in range(o.BLength()):
                b.append(o.B(i))
        return cls(b)

    @classmethod
    def from_bytes(cls, data: bytes) -> Self:
        deprefixed = RemoveSizePrefix(data, 0)
        o = FbsGenericId.GetRootAs(deprefixed[0], deprefixed[1])
        return cls.from_fbs(o)

    def serialize_to(self, builder: Builder) -> int:
        from .generated.GenericId import (
            Start,
            AddB,
            StartBVector,
            End,
        )
        StartBVector(builder, len(self.b))
        for i in reversed(range(len(self.b))):
            builder.PrependUint8(self.b[i])
        b_offset = builder.EndVector()
        
        Start(builder)
        AddB(builder, b_offset)
        return End(builder)

    def to_bytes(self) -> bytes:
        builder = Builder(0)
        offset = self.serialize_to(builder)
        builder.FinishSizePrefixed(offset)
        return builder.Output()

    @classmethod
    def make_default(cls) -> Self:
        b = []
        return cls(b)

    def __eq__(self, other) -> bool:
        eq = True
        if len(self.b) != len(other.b):
            return False
        for i in range(len(self.b)):
            eq = eq and self.b[i] == other.b[i]

        return eq

@dataclass
class GraphNodeId:
    b: "List[int]"

    @classmethod
    def from_fbs(cls, o: FbsGraphNodeId) -> Self:
        b = list()
        if not o.BIsNone():
            for i in range(o.BLength()):
                b.append(o.B(i))
        return cls(b)

    @classmethod
    def from_bytes(cls, data: bytes) -> Self:
        deprefixed = RemoveSizePrefix(data, 0)
        o = FbsGraphNodeId.GetRootAs(deprefixed[0], deprefixed[1])
        return cls.from_fbs(o)

    def serialize_to(self, builder: Builder) -> int:
        from .generated.GraphNodeId import (
            Start,
            AddB,
            StartBVector,
            End,
        )
        StartBVector(builder, len(self.b))
        for i in reversed(range(len(self.b))):
            builder.PrependUint8(self.b[i])
        b_offset = builder.EndVector()
        
        Start(builder)
        AddB(builder, b_offset)
        return End(builder)

    def to_bytes(self) -> bytes:
        builder = Builder(0)
        offset = self.serialize_to(builder)
        builder.FinishSizePrefixed(offset)
        return builder.Output()

    @classmethod
    def make_default(cls) -> Self:
        b = []
        return cls(b)

    def __eq__(self, other) -> bool:
        eq = True
        if len(self.b) != len(other.b):
            return False
        for i in range(len(self.b)):
            eq = eq and self.b[i] == other.b[i]

        return eq

@dataclass
class ObjectId:
    b: "List[int]"

    @classmethod
    def from_fbs(cls, o: FbsObjectId) -> Self:
        b = list()
        if not o.BIsNone():
            for i in range(o.BLength()):
                b.append(o.B(i))
        return cls(b)

    @classmethod
    def from_bytes(cls, data: bytes) -> Self:
        deprefixed = RemoveSizePrefix(data, 0)
        o = FbsObjectId.GetRootAs(deprefixed[0], deprefixed[1])
        return cls.from_fbs(o)

    def serialize_to(self, builder: Builder) -> int:
        from .generated.ObjectId import (
            Start,
            AddB,
            StartBVector,
            End,
        )
        StartBVector(builder, len(self.b))
        for i in reversed(range(len(self.b))):
            builder.PrependUint8(self.b[i])
        b_offset = builder.EndVector()
        
        Start(builder)
        AddB(builder, b_offset)
        return End(builder)

    def to_bytes(self) -> bytes:
        builder = Builder(0)
        offset = self.serialize_to(builder)
        builder.FinishSizePrefixed(offset)
        return builder.Output()

    @classmethod
    def make_default(cls) -> Self:
        b = []
        return cls(b)

    def __eq__(self, other) -> bool:
        eq = True
        if len(self.b) != len(other.b):
            return False
        for i in range(len(self.b)):
            eq = eq and self.b[i] == other.b[i]

        return eq

@dataclass
class StreamId:
    b: "List[int]"

    @classmethod
    def from_fbs(cls, o: FbsStreamId) -> Self:
        b = list()
        if not o.BIsNone():
            for i in range(o.BLength()):
                b.append(o.B(i))
        return cls(b)

    @classmethod
    def from_bytes(cls, data: bytes) -> Self:
        deprefixed = RemoveSizePrefix(data, 0)
        o = FbsStreamId.GetRootAs(deprefixed[0], deprefixed[1])
        return cls.from_fbs(o)

    def serialize_to(self, builder: Builder) -> int:
        from .generated.StreamId import (
            Start,
            AddB,
            StartBVector,
            End,
        )
        StartBVector(builder, len(self.b))
        for i in reversed(range(len(self.b))):
            builder.PrependUint8(self.b[i])
        b_offset = builder.EndVector()
        
        Start(builder)
        AddB(builder, b_offset)
        return End(builder)

    def to_bytes(self) -> bytes:
        builder = Builder(0)
        offset = self.serialize_to(builder)
        builder.FinishSizePrefixed(offset)
        return builder.Output()

    @classmethod
    def make_default(cls) -> Self:
        b = []
        return cls(b)

    def __eq__(self, other) -> bool:
        eq = True
        if len(self.b) != len(other.b):
            return False
        for i in range(len(self.b)):
            eq = eq and self.b[i] == other.b[i]

        return eq
