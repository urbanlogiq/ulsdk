# Copyright (c), CommunityLogiq Software
# 
# THIS FILE IS AUTOGENERATED, DO NOT EDIT

from dataclasses import dataclass
import json
from pyarrow import RecordBatch, BufferOutputStream, RecordBatchStreamWriter, RecordBatchStreamReader
from typing import Optional, Any, List, Dict, Self
from urllib.parse import quote_plus
from uuid import UUID
from ..request_context import RequestContext
from ..types.notification import AccessRequest, ShareDetails
from ..types.object import ObjectSummaryList

def new_acl(
    ctx: RequestContext,
) -> ObjectSummaryList:
    """Create a new access control list. This ACL will be created with the current user as the owner.

    Arguments:
    ctx: RequestContext -- A request context object

    Returns:
    An object summary list containing a single entry with the new ACL.
    """

    path = "/v1/api/ulv2/datacatalog/acl/"
    params = dict()
    headers = dict()
    body = None
    res = ctx.post(path, body=body, mimetype="text/plain", params=params, headers=headers)
    return ObjectSummaryList.from_bytes(res)

def new_from(
    ctx: RequestContext,
    extends: Optional[UUID],
) -> ObjectSummaryList:
    """Create a new access control list that inherits from an existing ACL

    Arguments:
    ctx: RequestContext -- A request context object
    extends: Optional[UUID] -- The ID of the access control list to inherit from

    Returns:
    An object summary list containing a single entry with the new ACL.
    """

    path = "/v1/api/ulv2/datacatalog/acl/"
    params = dict()
    if extends is not None:
        params["extends"] = str(extends)

    headers = dict()
    body = None
    res = ctx.post(path, body=body, mimetype="text/plain", params=params, headers=headers)
    return ObjectSummaryList.from_bytes(res)

def request(
    ctx: RequestContext,
    request: AccessRequest,
) -> None:
    """Request access to an object

    Arguments:
    ctx: RequestContext -- A request context object
    request: AccessRequest -- The access request object containing details about the permissions desired
    """

    path = "/v1/api/ulv2/datacatalog/acl/request"
    params = dict()
    headers = dict()
    body = request.to_bytes()
    ctx.post(path, body=body, mimetype="application/octet-stream", params=params, headers=headers)
    return

def share(
    ctx: RequestContext,
    id_: UUID,
    to: UUID,
    permission_bits: int,
) -> None:
    """Share an object to a specific access control list principal with specified permissions.

    Arguments:
    ctx: RequestContext -- A request context object
    id_: UUID -- The ID of the object that will be shared.
    to: UUID -- The ID of the access control list that the object will be shared with.
    permission_bits: int -- The permission bitset (see the PermissionTy enum for more information).
    """

    path = "/v1/api/ulv2/datacatalog/acl/share/:id/:to/:permission"
    path.replace(":id", str(id_), 1)
    path.replace(":to", str(to), 1)
    path.replace(":permission", str(permission_bits), 1)

    params = dict()
    headers = dict()
    body = None
    ctx.post(path, body=body, mimetype="text/plain", params=params, headers=headers)
    return

def share_with_details(
    ctx: RequestContext,
    id_: UUID,
    to: UUID,
    permission_bits: int,
    share_details: ShareDetails,
) -> None:
    """Share an object to a specific access control list principal with specified permissions.

    Arguments:
    ctx: RequestContext -- A request context object
    id_: UUID -- The ID of the object that will be shared.
    to: UUID -- The ID of the access control list that the object will be shared with.
    permission_bits: int -- The permission bitset (see the PermissionTy enum for more information).
    share_details: ShareDetails -- A ShareDetails object containing extra information for the sharing operation, including whether or not to notify the target of the operation, and to provide a message.
    """

    path = "/v1/api/ulv2/datacatalog/acl/share/:id/:to/:permission"
    path.replace(":id", str(id_), 1)
    path.replace(":to", str(to), 1)
    path.replace(":permission", str(permission_bits), 1)

    params = dict()
    headers = dict()
    body = share_details.to_bytes()
    ctx.post(path, body=body, mimetype="application/octet-stream", params=params, headers=headers)
    return

def share_all(
    ctx: RequestContext,
    id_: UUID,
    to: UUID,
) -> None:
    """Share an object to a specific access control list principal with all permissions.

    Arguments:
    ctx: RequestContext -- A request context object
    id_: UUID -- The ID of the object that will be shared.
    to: UUID -- The ID of the access control list that the object will be shared with.
    """

    path = "/v1/api/ulv2/datacatalog/acl/share/:id/:to"
    path.replace(":id", str(id_), 1)
    path.replace(":to", str(to), 1)

    params = dict()
    headers = dict()
    body = None
    ctx.post(path, body=body, mimetype="text/plain", params=params, headers=headers)
    return

def share_all_with_details(
    ctx: RequestContext,
    id_: UUID,
    to: UUID,
    share_details: ShareDetails,
) -> None:
    """Share an object to a specific access control list principal with all permissions.

    Arguments:
    ctx: RequestContext -- A request context object
    id_: UUID -- The ID of the object that will be shared.
    to: UUID -- The ID of the access control list that the object will be shared with.
    share_details: ShareDetails -- A ShareDetails object containing extra information for the sharing operation, including whether or not to notify the target of the operation, and to provide a message.
    """

    path = "/v1/api/ulv2/datacatalog/acl/share/:id/:to"
    path.replace(":id", str(id_), 1)
    path.replace(":to", str(to), 1)

    params = dict()
    headers = dict()
    body = share_details.to_bytes()
    ctx.post(path, body=body, mimetype="application/octet-stream", params=params, headers=headers)
    return

def grant(
    ctx: RequestContext,
    id_: UUID,
    to: UUID,
    permission_bits: int,
) -> None:
    """Grant an object to a specific access control list principal with specified permissions. Unlike the share operation, grant operations will fail with a 403 if the user performing the operation does not have the appropriate access.

    Arguments:
    ctx: RequestContext -- A request context object
    id_: UUID -- The ID of the object to which access will be granted.
    to: UUID -- The ID of the access control list that the object will be granted to.
    permission_bits: int -- The permission bitset (see the PermissionTy enum for more information).
    """

    path = "/v1/api/ulv2/datacatalog/acl/grant/:id/:to/:permission"
    path.replace(":id", str(id_), 1)
    path.replace(":to", str(to), 1)
    path.replace(":permission", str(permission_bits), 1)

    params = dict()
    headers = dict()
    body = None
    ctx.post(path, body=body, mimetype="text/plain", params=params, headers=headers)
    return

def grant_with_details(
    ctx: RequestContext,
    id_: UUID,
    to: UUID,
    permission_bits: int,
    grant_details: ShareDetails,
) -> None:
    """Grant an object to a specific access control list principal with specified permissions. Unlike the share operation, grant operations will fail with a 403 if the user performing the operation does not have the appropriate access.

    Arguments:
    ctx: RequestContext -- A request context object
    id_: UUID -- The ID of the object to which access will be granted.
    to: UUID -- The ID of the access control list that the object will be granted to.
    permission_bits: int -- The permission bitset (see the PermissionTy enum for more information).
    grant_details: ShareDetails -- A ShareDetails object containing extra information for the sharing operation, including whether or not to notify the target of the operation, and to provide a message.
    """

    path = "/v1/api/ulv2/datacatalog/acl/grant/:id/:to/:permission"
    path.replace(":id", str(id_), 1)
    path.replace(":to", str(to), 1)
    path.replace(":permission", str(permission_bits), 1)

    params = dict()
    headers = dict()
    body = grant_details.to_bytes()
    ctx.post(path, body=body, mimetype="application/octet-stream", params=params, headers=headers)
    return

def grant_all(
    ctx: RequestContext,
    id_: UUID,
    to: UUID,
) -> None:
    """Grant an object to a specific access control list principal with all permissions. Unlike the share operation, grant operations will fail with a 403 if the user performing the operation does not have the appropriate access.

    Arguments:
    ctx: RequestContext -- A request context object
    id_: UUID -- The ID of the object to which access will be granted.
    to: UUID -- The ID of the access control list that the object will be granted to.
    """

    path = "/v1/api/ulv2/datacatalog/acl/grant/:id/:to"
    path.replace(":id", str(id_), 1)
    path.replace(":to", str(to), 1)

    params = dict()
    headers = dict()
    body = None
    ctx.post(path, body=body, mimetype="text/plain", params=params, headers=headers)
    return

def grant_all_with_details(
    ctx: RequestContext,
    id_: UUID,
    to: UUID,
    grant_details: ShareDetails,
) -> None:
    """Grant an object to a specific access control list principal with all permissions. Unlike the share operation, grant operations will fail with a 403 if the user performing the operation does not have the appropriate access.

    Arguments:
    ctx: RequestContext -- A request context object
    id_: UUID -- The ID of the object to which access will be granted.
    to: UUID -- The ID of the access control list that the object will be granted to.
    grant_details: ShareDetails -- A ShareDetails object containing extra information for the sharing operation, including whether or not to notify the target of the operation, and to provide a message.
    """

    path = "/v1/api/ulv2/datacatalog/acl/grant/:id/:to"
    path.replace(":id", str(id_), 1)
    path.replace(":to", str(to), 1)

    params = dict()
    headers = dict()
    body = grant_details.to_bytes()
    ctx.post(path, body=body, mimetype="application/octet-stream", params=params, headers=headers)
    return

def revoke(
    ctx: RequestContext,
    id_: UUID,
    from_: UUID,
) -> None:
    """Revoke all access from a specified ACL to an object.

    Arguments:
    ctx: RequestContext -- A request context object
    id_: UUID -- The ID of the object from which access will be revoked.
    from_: UUID -- The ID of the access control list that access to the object will be revoked from.
    """

    path = "/v1/api/ulv2/datacatalog/acl/revoke/:id/:from"
    path.replace(":id", str(id_), 1)
    path.replace(":from", str(from_), 1)

    params = dict()
    headers = dict()
    body = None
    ctx.post(path, body=body, mimetype="text/plain", params=params, headers=headers)
    return

def get_permissions(
    ctx: RequestContext,
    id_: UUID,
) -> None:
    """Get the permissions the caller has on the object with the given ID.

    Arguments:
    ctx: RequestContext -- A request context object
    id_: UUID -- The ID of the object which will be queried for permissions.
    """

    path = "/v1/api/ulv2/datacatalog/acl/perms/:id"
    path.replace(":id", str(id_), 1)

    params = dict()
    headers = dict()
    ctx.get(path, params=params, headers=headers)
    return

def set(
    ctx: RequestContext,
    id_: UUID,
    acl_id: UUID,
) -> None:
    """Forcibly set an object's ACL to another ACL object. Note that the target ACL needs to contain the exact same permissions as the current ACL otherwise this method will return 400 Bad Request. This is a safeguard to ensure the user cannot lock themselves out of an object.

    Arguments:
    ctx: RequestContext -- A request context object
    id_: UUID -- The ID of the object which will have its ACL set.
    acl_id: UUID -- The ID of the ACL object which will be used as the object ACL.
    """

    path = "/v1/api/ulv2/datacatalog/acl/set/:id/:acl_id"
    path.replace(":id", str(id_), 1)
    path.replace(":acl_id", str(acl_id), 1)

    params = dict()
    headers = dict()
    body = None
    ctx.post(path, body=body, mimetype="text/plain", params=params, headers=headers)
    return
