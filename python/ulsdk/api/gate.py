# Copyright (c), CommunityLogiq Software
# 
# THIS FILE IS AUTOGENERATED, DO NOT EDIT

from dataclasses import dataclass
import json
from pyarrow import RecordBatch, BufferOutputStream, RecordBatchStreamWriter, RecordBatchStreamReader
from typing import Optional, Any, List, Dict, Self
from urllib.parse import quote_plus
from uuid import UUID
from ..request_context import RequestContext

@dataclass
class AdUser:
    display_name: "str"
    id_: "str"
    user_principal_name: "str"
    other_mails: "List[str]"
    department: "Optional[str]"
    created_date_time: "str"

    def to_dict(self) -> Dict[str, Any]:
        o = dict()
        o["display_name"] = self.display_name
        o["id"] = self.id_
        o["user_principal_name"] = self.user_principal_name
        other_mails_list = []
        for item in self.other_mails:
            other_mails_var = item
            other_mails_list.append(other_mails_var)
        o["other_mails"] = other_mails_list
        o["department"] = None
        if self.department is not None:
            o["department"] = self.department
        o["created_date_time"] = self.created_date_time
        return o

    @classmethod
    def from_dict(cls, o: Dict[str, Any]) -> Self:
        display_name = None
        id_ = None
        user_principal_name = None
        other_mails = None
        department = None
        created_date_time = None
    
        for key in o:
            if key == "displayName":
                display_name_var = o[key]
                assert type(display_name_var) is str
                display_name = display_name_var
            elif key == "id":
                id__var = o[key]
                assert type(id__var) is str
                id_ = id__var
            elif key == "userPrincipalName":
                user_principal_name_var = o[key]
                assert type(user_principal_name_var) is str
                user_principal_name = user_principal_name_var
            elif key == "otherMails":
                other_mails_var = o[key]
                assert type(other_mails_var) is list
                other_mails = []
                for item in other_mails_var:
                    other_mails_item_var = item
                    assert type(other_mails_item_var) is str
                    other_mails_item = other_mails_item_var
                    other_mails.append(other_mails_item)
            elif key == "department":
                if o[key] is not None:
                    department_var = o[key]
                    assert type(department_var) is str
                    department = department_var
                else:
                    department = None
            elif key == "createdDateTime":
                created_date_time_var = o[key]
                assert type(created_date_time_var) is str
                created_date_time = created_date_time_var
    
        assert display_name is not None
        assert id_ is not None
        assert user_principal_name is not None
        assert other_mails is not None
        assert created_date_time is not None
    
        return cls(display_name, id_, user_principal_name, other_mails, department, created_date_time)

    @classmethod
    def make_default(cls) -> Self:
        displayName = ""
        id = ""
        userPrincipalName = ""
        otherMails = []
        department = None
        createdDateTime = ""
    
        return cls(displayName, id, userPrincipalName, otherMails, department, createdDateTime)

@dataclass
class AdGroup:
    id_: "str"
    display_name: "str"
    description: "Optional[str]"

    def to_dict(self) -> Dict[str, Any]:
        o = dict()
        o["id"] = self.id_
        o["display_name"] = self.display_name
        o["description"] = None
        if self.description is not None:
            o["description"] = self.description
        return o

    @classmethod
    def from_dict(cls, o: Dict[str, Any]) -> Self:
        id_ = None
        display_name = None
        description = None
    
        for key in o:
            if key == "id":
                id__var = o[key]
                assert type(id__var) is str
                id_ = id__var
            elif key == "displayName":
                display_name_var = o[key]
                assert type(display_name_var) is str
                display_name = display_name_var
            elif key == "description":
                if o[key] is not None:
                    description_var = o[key]
                    assert type(description_var) is str
                    description = description_var
                else:
                    description = None
    
        assert id_ is not None
        assert display_name is not None
    
        return cls(id_, display_name, description)

    @classmethod
    def make_default(cls) -> Self:
        id = ""
        displayName = ""
        description = None
    
        return cls(id, displayName, description)

@dataclass
class Bootstrap:
    user: "AdUser"
    groups: "List[AdGroup]"
    v_2groups: "List[AdGroup]"
    client_secrets: "Dict[str, Any]"

    def to_dict(self) -> Dict[str, Any]:
        o = dict()
        o["user"] = self.user.to_dict()
        groups_list = []
        for item in self.groups:
            groups_var = item.to_dict()
            groups_list.append(groups_var)
        o["groups"] = groups_list
        v_2groups_list = []
        for item in self.v_2groups:
            v_2groups_var = item.to_dict()
            v_2groups_list.append(v_2groups_var)
        o["v_2groups"] = v_2groups_list
        o["client_secrets"] = self.client_secrets
        return o

    @classmethod
    def from_dict(cls, o: Dict[str, Any]) -> Self:
        user = None
        groups = None
        v_2groups = None
        client_secrets = None
    
        for key in o:
            if key == "user":
                user_var = o[key]
                assert type(user_var) is dict
                user = AdUser.from_dict(user_var)
            elif key == "groups":
                groups_var = o[key]
                assert type(groups_var) is list
                groups = []
                for item in groups_var:
                    groups_item_var = item
                    assert type(groups_item_var) is dict
                    groups_item = AdGroup.from_dict(groups_item_var)
                    groups.append(groups_item)
            elif key == "v2groups":
                v_2groups_var = o[key]
                assert type(v_2groups_var) is list
                v_2groups = []
                for item in v_2groups_var:
                    v_2groups_item_var = item
                    assert type(v_2groups_item_var) is dict
                    v_2groups_item = AdGroup.from_dict(v_2groups_item_var)
                    v_2groups.append(v_2groups_item)
            elif key == "clientSecrets":
                client_secrets_var = o[key]
                assert type(client_secrets_var) is dict
                client_secrets = client_secrets_var
    
        assert user is not None
        assert groups is not None
        assert v_2groups is not None
        assert client_secrets is not None
    
        return cls(user, groups, v_2groups, client_secrets)

    @classmethod
    def make_default(cls) -> Self:
        user = AdUser.make_default()
        groups = []
        v2groups = []
        clientSecrets = dict()
    
        return cls(user, groups, v2groups, clientSecrets)

def bootstrap(
    ctx: RequestContext,
) -> Bootstrap:
    """Retrieves the current user's details, groups they belong to, and secrets that are only available when authenticated.

    Arguments:
    ctx: RequestContext -- A request context object

    Returns:
    The current user details needed to start the UrbanLogiq web application.
    """

    path = "/v1/bootstrap/"
    params = dict()
    headers = dict()
    res = ctx.get(path, params=params, headers=headers)
    res_dict = json.loads(res)
    return Bootstrap.from_dict(res_dict)
