# Copyright (c), CommunityLogiq Software
# 
# THIS FILE IS AUTOGENERATED, DO NOT EDIT

from dataclasses import dataclass
import json
from pyarrow import RecordBatch, BufferOutputStream, RecordBatchStreamWriter, RecordBatchStreamReader
from typing import Optional, Any, List, Dict, Self
from urllib.parse import quote_plus
from uuid import UUID
from ..request_context import RequestContext
from ..request_context import File
from ..types.fs import DirectoryList, MoveRequest
from ..types.id import ObjectId
from ..types.object import ObjectSummary

def ls(
    ctx: RequestContext,
    root: str,
    tail: str,
) -> DirectoryList:
    """Retrieves a directory listing from a unix-style path rooted at `root`. `root` may be one of:
    - `me` for the current user's drive
    - `union` for the union of the current user's drive and all shared drives
    - the UUID of any drive directory
    Paths may include wildcards like `*`.
                    

    Arguments:
    ctx: RequestContext -- A request context object
    root: str -- The root directory to list files for, or one of "me" or "union".
    tail: str -- The unix-style path specifier to use for the file listing.

    Returns:
    The directory listing
    """

    path = "/v1/api/ulv2/drive/:root/*tail"
    path.replace(":root", str(root), 1)
    path.replace("*tail", quote_plus(tail), 1)

    params = dict()
    headers = dict()
    res = ctx.get(path, params=params, headers=headers)
    return DirectoryList.from_bytes(res)

def create_entry(
    ctx: RequestContext,
    root: str,
    tail: str,
    ty: str,
    mime: str,
    chunks: int,
) -> ObjectSummary:
    """Creates a new file or directory at a specified path rooted at `root`.

    Arguments:
    ctx: RequestContext -- A request context object
    root: str -- The directory into which the new entry will be created
    tail: str -- The name of the new entry
    ty: str -- The type of entry to create: `file` or `directory`.
    mime: str -- The mime type of the entry to create, if this is a new file entry.
    chunks: int -- Number of chunks to expect, if this is a new file entry.

    Returns:
    A summary of the object created
    """

    path = "/v1/api/ulv2/drive/:root/*tail"
    path.replace(":root", str(root), 1)
    path.replace("*tail", quote_plus(tail), 1)

    params = dict()
    params["ty"] = ty
    params["mime"] = mime
    params["chunks"] = str(chunks)

    headers = dict()
    body = None
    res = ctx.post(path, body=body, mimetype="text/plain", params=params, headers=headers)
    return ObjectSummary.from_bytes(res)

def get_roots(
    ctx: RequestContext,
) -> DirectoryList:
    """Retrieves a list of the top-level drive root directories that the current user has access to.

    Arguments:
    ctx: RequestContext -- A request context object

    Returns:
    A listing of all the directory roots.
    """

    path = "/v1/api/ulv2/drive"
    params = dict()
    headers = dict()
    res = ctx.get(path, params=params, headers=headers)
    return DirectoryList.from_bytes(res)

def post_file(
    ctx: RequestContext,
    root: str,
    force: bool,
    files: List[File],
) -> DirectoryList:
    """Creates a new file in the specified directory with the specified content. Please use the `put_file_chunk` endpoint to upload files larger than 1GB.

    Arguments:
    ctx: RequestContext -- A request context object
    root: str -- The directory into which the file will be uploaded
    force: bool -- Whether to overwrite the file if it already exists.
    files: List[File] -- The files to upload as part of a multipart upload

    Returns:
    An updated list of directory entries
    """

    path = "/v1/api/ulv2/drive/:root"
    path.replace(":root", str(root), 1)

    params = dict()
    params["force"] = "true" if force else "false"

    headers = dict()
    res = ctx.upload(path, files)
    return DirectoryList.from_bytes(res)

def unlink(
    ctx: RequestContext,
    entry: str,
) -> DirectoryList:
    """Removes the specified drive entry from its parent directory.

    Arguments:
    ctx: RequestContext -- A request context object
    entry: str -- The ID of the entry to remove

    Returns:
    An updated list of directory entries
    """

    path = "/v1/api/ulv2/drive/:entry"
    path.replace(":entry", str(entry), 1)

    params = dict()
    headers = dict()
    res = ctx.delete(path, params=params, headers=headers)
    return DirectoryList.from_bytes(res)

def move(
    ctx: RequestContext,
    move_request: MoveRequest,
) -> None:
    """Moves a file or directory to a new location.

    Arguments:
    ctx: RequestContext -- A request context object
    move_request: MoveRequest -- Details of the move operation.
    """

    path = "/v1/api/ulv2/drive/move"
    params = dict()
    headers = dict()
    body = move_request.to_bytes()
    ctx.post(path, body=body, mimetype="application/octet-stream", params=params, headers=headers)
    return

def copy(
    ctx: RequestContext,
    copy_request: MoveRequest,
) -> None:
    """Copies a file or directory to a new location within the drive.

    Arguments:
    ctx: RequestContext -- A request context object
    copy_request: MoveRequest -- Details of the copy operation.
    """

    path = "/v1/api/ulv2/drive/copy"
    params = dict()
    headers = dict()
    body = copy_request.to_bytes()
    ctx.post(path, body=body, mimetype="application/octet-stream", params=params, headers=headers)
    return

def get_file(
    ctx: RequestContext,
    id_: str,
) -> bytes:
    """Retrieves a file by id.

    Arguments:
    ctx: RequestContext -- A request context object
    id_: str -- The ID of the file to retrieve

    Returns:
    The contents of the file referenced by the specified ID
    """

    path = "/v1/api/ulv2/drive/file/:id"
    path.replace(":id", str(id_), 1)

    params = dict()
    headers = dict()
    res = ctx.get(path, params=params, headers=headers)
    return res

def put_file_chunk(
    ctx: RequestContext,
    file_id: str,
    idx: int,
    hash: str,
    chunk: bytes,
) -> None:
    """Uploads a chunk of a file by file id and chunk index.

    Arguments:
    ctx: RequestContext -- A request context object
    file_id: str -- The ID of the file to which to set a file chunk
    idx: int -- The index of the file chunk to set
    hash: str -- The hash of the chunk to upload.
    chunk: bytes -- Binary file chunk data
    """

    path = "/v1/api/ulv2/drive/file/:file_id/:idx"
    path.replace(":file_id", str(file_id), 1)
    path.replace(":idx", str(idx), 1)

    params = dict()
    params["hash"] = hash

    headers = dict()
    body = chunk
    ctx.put(path, body=body, mimetype="application/octet-stream", params=params, headers=headers)
    return

def get_root_id(
    ctx: RequestContext,
    b2cid: str,
) -> ObjectId:
    """Retrieves the id of the drive root directory for the specified principal (user or group).

    Arguments:
    ctx: RequestContext -- A request context object
    b2cid: str -- The principal (user or group) ID to retrieve the drive root directory for.

    Returns:
    Drive directory root ID
    """

    path = "/v1/api/ulv2/drive/root/:b2cid"
    path.replace(":b2cid", str(b2cid), 1)

    params = dict()
    headers = dict()
    res = ctx.get(path, params=params, headers=headers)
    return ObjectId.from_bytes(res)
