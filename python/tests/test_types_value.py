# Copyright (c), CommunityLogiq Software
# 
# THIS FILE IS AUTOGENERATED, DO NOT EDIT

from ..types.value import *

def test_v_array():
    _t0 = VArray.make_default()
    _b = _t0.to_bytes()
    _t1 = VArray.from_bytes(_b)
    assert _t0 == _t1
def test_v_bool():
    _t0 = VBool.make_default()
    _b = _t0.to_bytes()
    _t1 = VBool.from_bytes(_b)
    assert _t0 == _t1
def test_v_bytes():
    _t0 = VBytes.make_default()
    _b = _t0.to_bytes()
    _t1 = VBytes.from_bytes(_b)
    assert _t0 == _t1
def test_v_char():
    _t0 = VChar.make_default()
    _b = _t0.to_bytes()
    _t1 = VChar.from_bytes(_b)
    assert _t0 == _t1
def test_vf32():
    _t0 = VF32.make_default()
    _b = _t0.to_bytes()
    _t1 = VF32.from_bytes(_b)
    assert _t0 == _t1
def test_vf64():
    _t0 = VF64.make_default()
    _b = _t0.to_bytes()
    _t1 = VF64.from_bytes(_b)
    assert _t0 == _t1
def test_v_fixed_size_bytes():
    _t0 = VFixedSizeBytes.make_default()
    _b = _t0.to_bytes()
    _t1 = VFixedSizeBytes.from_bytes(_b)
    assert _t0 == _t1
def test_vi16():
    _t0 = VI16.make_default()
    _b = _t0.to_bytes()
    _t1 = VI16.from_bytes(_b)
    assert _t0 == _t1
def test_vi32():
    _t0 = VI32.make_default()
    _b = _t0.to_bytes()
    _t1 = VI32.from_bytes(_b)
    assert _t0 == _t1
def test_vi64():
    _t0 = VI64.make_default()
    _b = _t0.to_bytes()
    _t1 = VI64.from_bytes(_b)
    assert _t0 == _t1
def test_vi8():
    _t0 = VI8.make_default()
    _b = _t0.to_bytes()
    _t1 = VI8.from_bytes(_b)
    assert _t0 == _t1
def test_v_isize():
    _t0 = VIsize.make_default()
    _b = _t0.to_bytes()
    _t1 = VIsize.from_bytes(_b)
    assert _t0 == _t1
def test_v_null():
    _t0 = VNull.make_default()
    _b = _t0.to_bytes()
    _t1 = VNull.from_bytes(_b)
    assert _t0 == _t1
def test_v_str():
    _t0 = VStr.make_default()
    _b = _t0.to_bytes()
    _t1 = VStr.from_bytes(_b)
    assert _t0 == _t1
def test_v_timestamp_ms():
    _t0 = VTimestampMs.make_default()
    _b = _t0.to_bytes()
    _t1 = VTimestampMs.from_bytes(_b)
    assert _t0 == _t1
def test_v_timestamp_ms_utc():
    _t0 = VTimestampMsUtc.make_default()
    _b = _t0.to_bytes()
    _t1 = VTimestampMsUtc.from_bytes(_b)
    assert _t0 == _t1
def test_v_timestamp_ns():
    _t0 = VTimestampNs.make_default()
    _b = _t0.to_bytes()
    _t1 = VTimestampNs.from_bytes(_b)
    assert _t0 == _t1
def test_v_timestamp_ns_utc():
    _t0 = VTimestampNsUtc.make_default()
    _b = _t0.to_bytes()
    _t1 = VTimestampNsUtc.from_bytes(_b)
    assert _t0 == _t1
def test_v_tri_2d():
    _t0 = VTri2D.make_default()
    _b = _t0.to_bytes()
    _t1 = VTri2D.from_bytes(_b)
    assert _t0 == _t1
def test_vu16():
    _t0 = VU16.make_default()
    _b = _t0.to_bytes()
    _t1 = VU16.from_bytes(_b)
    assert _t0 == _t1
def test_vu32():
    _t0 = VU32.make_default()
    _b = _t0.to_bytes()
    _t1 = VU32.from_bytes(_b)
    assert _t0 == _t1
def test_vu64():
    _t0 = VU64.make_default()
    _b = _t0.to_bytes()
    _t1 = VU64.from_bytes(_b)
    assert _t0 == _t1
def test_vu8():
    _t0 = VU8.make_default()
    _b = _t0.to_bytes()
    _t1 = VU8.from_bytes(_b)
    assert _t0 == _t1
def test_v_unit():
    _t0 = VUnit.make_default()
    _b = _t0.to_bytes()
    _t1 = VUnit.from_bytes(_b)
    assert _t0 == _t1
def test_v_usize():
    _t0 = VUsize.make_default()
    _b = _t0.to_bytes()
    _t1 = VUsize.from_bytes(_b)
    assert _t0 == _t1
def test_value_instance():
    _t0 = ValueInstance.make_default()
    _b = _t0.to_bytes()
    _t1 = ValueInstance.from_bytes(_b)
    assert _t0 == _t1