# Copyright (c), CommunityLogiq Software
# 
# THIS FILE IS AUTOGENERATED, DO NOT EDIT

import os
from ..api_key_context import ApiKeyContext
from ..keys import Region, Key as SigningKey, Environment
from ..api.directory import *

def test_get_principal():
    p0 = UUID("00000000-0000-0000-0000-000000000000")

    if False:
        get_principal(
            ctx,
            p0,
        )

def test_get_principals():
    p0 = ""

    if False:
        get_principals(
            ctx,
            p0,
        )

def test_query_principals():
    p0 = ""

    if False:
        query_principals(
            ctx,
            p0,
        )

def test_get_users():

    if False:
        get_users(
            ctx,
        )

def test_get_users_display_names():

    if False:
        get_users_display_names(
            ctx,
        )

def test_get_current_user():
    p0 = None

    if False:
        get_current_user(
            ctx,
            p0,
        )

def test_create_user():

    if False:
        create_user(
            ctx,
        )

def test_update_current_user():
    p0 = UpdateCurrentUser.make_default()

    if False:
        update_current_user(
            ctx,
            p0,
        )

def test_get_user():
    p0 = UUID("00000000-0000-0000-0000-000000000000")
    p1 = None

    if False:
        get_user(
            ctx,
            p0,
            p1,
        )

def test_update_user():
    p0 = UUID("00000000-0000-0000-0000-000000000000")
    p1 = UpdateUser.make_default()

    if False:
        update_user(
            ctx,
            p0,
            p1,
        )

def test_delete_user():
    p0 = UUID("00000000-0000-0000-0000-000000000000")

    if False:
        delete_user(
            ctx,
            p0,
        )

def test_get_groups():

    if False:
        get_groups(
            ctx,
        )

def test_create_group():
    p0 = CreateGroup.make_default()

    if False:
        create_group(
            ctx,
            p0,
        )

def test_get_group_members():
    p0 = UUID("00000000-0000-0000-0000-000000000000")

    if False:
        get_group_members(
            ctx,
            p0,
        )

def test_delete_group():
    p0 = UUID("00000000-0000-0000-0000-000000000000")

    if False:
        delete_group(
            ctx,
            p0,
        )

def test_add_group_member():
    p0 = UUID("00000000-0000-0000-0000-000000000000")
    p1 = UUID("00000000-0000-0000-0000-000000000000")

    if False:
        add_group_member(
            ctx,
            p0,
            p1,
        )

def test_remove_group_member():
    p0 = UUID("00000000-0000-0000-0000-000000000000")
    p1 = UUID("00000000-0000-0000-0000-000000000000")

    if False:
        remove_group_member(
            ctx,
            p0,
            p1,
        )
