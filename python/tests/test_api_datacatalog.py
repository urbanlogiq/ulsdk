# Copyright (c), CommunityLogiq Software
# 
# THIS FILE IS AUTOGENERATED, DO NOT EDIT

import os
from ..api_key_context import ApiKeyContext
from ..keys import Region, Key as SigningKey, Environment
from ..api.datacatalog import *

def test_get_object_at_revision():
    p0 = UUID("00000000-0000-0000-0000-000000000000")
    p1 = UUID("00000000-0000-0000-0000-000000000000")

    if False:
        get_object_at_revision(
            ctx,
            p0,
            p1,
        )

def test_get_acl():
    p0 = UUID("00000000-0000-0000-0000-000000000000")

    if False:
        get_acl(
            ctx,
            p0,
        )

def test_get_head_revision():
    p0 = UUID("00000000-0000-0000-0000-000000000000")

    if False:
        get_head_revision(
            ctx,
            p0,
        )

def test_get_object():
    p0 = UUID("00000000-0000-0000-0000-000000000000")

    if False:
        get_object(
            ctx,
            p0,
        )

def test_update_object():
    p0 = UUID("00000000-0000-0000-0000-000000000000")
    p1 = DataCatalogObject.make_default()

    if False:
        update_object(
            ctx,
            p0,
            p1,
        )

def test_update_attribute():
    p0 = UUID("00000000-0000-0000-0000-000000000000")
    p1 = False
    p2 = dict()

    if False:
        update_attribute(
            ctx,
            p0,
            p1,
            p2,
        )

def test_delete_attribute():
    p0 = UUID("00000000-0000-0000-0000-000000000000")
    p1 = ""

    if False:
        delete_attribute(
            ctx,
            p0,
            p1,
        )

def test_get_object_summaries():
    p0 = ObjectIdList.make_default()

    if False:
        get_object_summaries(
            ctx,
            p0,
        )

def test_bulk_fetch_objects():
    p0 = ObjectIdList.make_default()

    if False:
        bulk_fetch_objects(
            ctx,
            p0,
        )

def test_create_object():

    if False:
        create_object(
            ctx,
        )

def test_query_aggregate_numeric():
    p0 = ""
    p1 = Query.make_default()

    if False:
        query_aggregate_numeric(
            ctx,
            p0,
            p1,
        )

def test_query_aggregate_string():
    p0 = ""
    p1 = Query.make_default()

    if False:
        query_aggregate_string(
            ctx,
            p0,
            p1,
        )

def test_query_aggregate_histo():
    p0 = 0
    p1 = ""
    p2 = Query.make_default()

    if False:
        query_aggregate_histo(
            ctx,
            p0,
            p1,
            p2,
        )

def test_query_aggregate_relative_histo():
    p0 = 0
    p1 = ""
    p2 = ""
    p3 = Query.make_default()

    if False:
        query_aggregate_relative_histo(
            ctx,
            p0,
            p1,
            p2,
            p3,
        )

def test_stream_get_arrow():
    p0 = UUID("00000000-0000-0000-0000-000000000000")

    if False:
        stream_get_arrow(
            ctx,
            p0,
        )

def test_stream_get_parquet():
    p0 = UUID("00000000-0000-0000-0000-000000000000")

    if False:
        stream_get_parquet(
            ctx,
            p0,
        )

def test_stream_get_csv():
    p0 = UUID("00000000-0000-0000-0000-000000000000")

    if False:
        stream_get_csv(
            ctx,
            p0,
        )

def test_stream_get_xlsx():
    p0 = UUID("00000000-0000-0000-0000-000000000000")

    if False:
        stream_get_xlsx(
            ctx,
            p0,
        )

def test_stream_get_json():
    p0 = UUID("00000000-0000-0000-0000-000000000000")

    if False:
        stream_get_json(
            ctx,
            p0,
        )

def test_stream_get_text():
    p0 = UUID("00000000-0000-0000-0000-000000000000")

    if False:
        stream_get_text(
            ctx,
            p0,
        )

def test_stream_get_html():
    p0 = UUID("00000000-0000-0000-0000-000000000000")

    if False:
        stream_get_html(
            ctx,
            p0,
        )

def test_stream_put_arrow():
    p0 = UUID("00000000-0000-0000-0000-000000000000")
    p1 = None
    p2 = []

    if False:
        stream_put_arrow(
            ctx,
            p0,
            p1,
            p2,
        )

def test_stream_put_diffstream():
    p0 = UUID("00000000-0000-0000-0000-000000000000")
    p1 = None
    p2 = DiffStream.make_default()

    if False:
        stream_put_diffstream(
            ctx,
            p0,
            p1,
            p2,
        )

def test_stream_put_json():
    p0 = UUID("00000000-0000-0000-0000-000000000000")
    p1 = None
    p2 = []

    if False:
        stream_put_json(
            ctx,
            p0,
            p1,
            p2,
        )

def test_generate_metadata():
    p0 = UUID("00000000-0000-0000-0000-000000000000")

    if False:
        generate_metadata(
            ctx,
            p0,
        )

def test_update_metadata():
    p0 = UUID("00000000-0000-0000-0000-000000000000")
    p1 = None

    if False:
        update_metadata(
            ctx,
            p0,
            p1,
        )

def test_stream_compact():
    p0 = UUID("00000000-0000-0000-0000-000000000000")
    p1 = None

    if False:
        stream_compact(
            ctx,
            p0,
            p1,
        )

def test_table_row_history():
    p0 = UUID("00000000-0000-0000-0000-000000000000")
    p1 = UUID("00000000-0000-0000-0000-000000000000")

    if False:
        table_row_history(
            ctx,
            p0,
            p1,
        )

def test_table_history():
    p0 = UUID("00000000-0000-0000-0000-000000000000")

    if False:
        table_history(
            ctx,
            p0,
        )

def test_get_table_attachments_directory():
    p0 = UUID("00000000-0000-0000-0000-000000000000")
    p1 = UUID("00000000-0000-0000-0000-000000000000")

    if False:
        get_table_attachments_directory(
            ctx,
            p0,
            p1,
        )

def test_get_or_create_table_attachments_directory():
    p0 = UUID("00000000-0000-0000-0000-000000000000")
    p1 = UUID("00000000-0000-0000-0000-000000000000")

    if False:
        get_or_create_table_attachments_directory(
            ctx,
            p0,
            p1,
        )

def test_create_table():
    p0 = UUID("00000000-0000-0000-0000-000000000000")
    p1 = NewTable.make_default()

    if False:
        create_table(
            ctx,
            p0,
            p1,
        )

def test_query_arrow():
    p0 = Query.make_default()

    if False:
        query_arrow(
            ctx,
            p0,
        )

def test_query_parquet():
    p0 = Query.make_default()

    if False:
        query_parquet(
            ctx,
            p0,
        )

def test_query_csv():
    p0 = Query.make_default()

    if False:
        query_csv(
            ctx,
            p0,
        )

def test_query_xlsx():
    p0 = Query.make_default()

    if False:
        query_xlsx(
            ctx,
            p0,
        )

def test_query_json():
    p0 = Query.make_default()

    if False:
        query_json(
            ctx,
            p0,
        )

def test_query_text():
    p0 = Query.make_default()

    if False:
        query_text(
            ctx,
            p0,
        )

def test_query_html():
    p0 = Query.make_default()

    if False:
        query_html(
            ctx,
            p0,
        )
