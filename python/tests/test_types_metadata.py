# Copyright (c), CommunityLogiq Software
# 
# THIS FILE IS AUTOGENERATED, DO NOT EDIT

from ..types.metadata import *

def test_category_relationship_data():
    _t0 = CategoryRelationshipData.make_default()
    _b = _t0.to_bytes()
    _t1 = CategoryRelationshipData.from_bytes(_b)
    assert _t0 == _t1
def test_contact_info():
    _t0 = ContactInfo.make_default()
    _b = _t0.to_bytes()
    _t1 = ContactInfo.from_bytes(_b)
    assert _t0 == _t1
def test_datacatalog_geometry():
    _t0 = DatacatalogGeometry.make_default()
    _b = _t0.to_bytes()
    _t1 = DatacatalogGeometry.from_bytes(_b)
    assert _t0 == _t1
def test_dataset_source():
    _t0 = DatasetSource.make_default()
    _b = _t0.to_bytes()
    _t1 = DatasetSource.from_bytes(_b)
    assert _t0 == _t1
def test_dates():
    _t0 = Dates.make_default()
    _b = _t0.to_bytes()
    _t1 = Dates.from_bytes(_b)
    assert _t0 == _t1
def test_datetime_range():
    _t0 = DatetimeRange.make_default()
    _b = _t0.to_bytes()
    _t1 = DatetimeRange.from_bytes(_b)
    assert _t0 == _t1
def test_document():
    _t0 = Document.make_default()
    _b = _t0.to_bytes()
    _t1 = Document.from_bytes(_b)
    assert _t0 == _t1
def test_documents():
    _t0 = Documents.make_default()
    _b = _t0.to_bytes()
    _t1 = Documents.from_bytes(_b)
    assert _t0 == _t1
def test_float_aggregate():
    _t0 = FloatAggregate.make_default()
    _b = _t0.to_bytes()
    _t1 = FloatAggregate.from_bytes(_b)
    assert _t0 == _t1
def test_float_range():
    _t0 = FloatRange.make_default()
    _b = _t0.to_bytes()
    _t1 = FloatRange.from_bytes(_b)
    assert _t0 == _t1
def test_geometry_data():
    _t0 = GeometryData.make_default()
    _b = _t0.to_bytes()
    _t1 = GeometryData.from_bytes(_b)
    assert _t0 == _t1
def test_hierarchical_relationship():
    _t0 = HierarchicalRelationship.make_default()
    _b = _t0.to_bytes()
    _t1 = HierarchicalRelationship.from_bytes(_b)
    assert _t0 == _t1
def test_hierarchy_relationship_data():
    _t0 = HierarchyRelationshipData.make_default()
    _b = _t0.to_bytes()
    _t1 = HierarchyRelationshipData.from_bytes(_b)
    assert _t0 == _t1
def test_int_aggregate():
    _t0 = IntAggregate.make_default()
    _b = _t0.to_bytes()
    _t1 = IntAggregate.from_bytes(_b)
    assert _t0 == _t1
def test_int_range():
    _t0 = IntRange.make_default()
    _b = _t0.to_bytes()
    _t1 = IntRange.from_bytes(_b)
    assert _t0 == _t1
def test_integer_display_string():
    _t0 = IntegerDisplayString.make_default()
    _b = _t0.to_bytes()
    _t1 = IntegerDisplayString.from_bytes(_b)
    assert _t0 == _t1
def test_metadata():
    _t0 = Metadata.make_default()
    _b = _t0.to_bytes()
    _t1 = Metadata.from_bytes(_b)
    assert _t0 == _t1
def test_nested_category_relationship_data():
    _t0 = NestedCategoryRelationshipData.make_default()
    _b = _t0.to_bytes()
    _t1 = NestedCategoryRelationshipData.from_bytes(_b)
    assert _t0 == _t1
def test_nested_category_relationship_node():
    _t0 = NestedCategoryRelationshipNode.make_default()
    _b = _t0.to_bytes()
    _t1 = NestedCategoryRelationshipNode.from_bytes(_b)
    assert _t0 == _t1
def test_nested_hierarchy_relationship_data():
    _t0 = NestedHierarchyRelationshipData.make_default()
    _b = _t0.to_bytes()
    _t1 = NestedHierarchyRelationshipData.from_bytes(_b)
    assert _t0 == _t1
def test_nested_hierarchy_relationship_node():
    _t0 = NestedHierarchyRelationshipNode.make_default()
    _b = _t0.to_bytes()
    _t1 = NestedHierarchyRelationshipNode.from_bytes(_b)
    assert _t0 == _t1
def test_nested_string_categories():
    _t0 = NestedStringCategories.make_default()
    _b = _t0.to_bytes()
    _t1 = NestedStringCategories.from_bytes(_b)
    assert _t0 == _t1
def test_nested_string_category_node():
    _t0 = NestedStringCategoryNode.make_default()
    _b = _t0.to_bytes()
    _t1 = NestedStringCategoryNode.from_bytes(_b)
    assert _t0 == _t1
def test_no_geometry():
    _t0 = NoGeometry.make_default()
    _b = _t0.to_bytes()
    _t1 = NoGeometry.from_bytes(_b)
    assert _t0 == _t1
def test_numerical_field_format():
    _t0 = NumericalFieldFormat.make_default()
    _b = _t0.to_bytes()
    _t1 = NumericalFieldFormat.from_bytes(_b)
    assert _t0 == _t1
def test_raw_geom():
    _t0 = RawGeom.make_default()
    _b = _t0.to_bytes()
    _t1 = RawGeom.from_bytes(_b)
    assert _t0 == _t1
def test_string_aggregate():
    _t0 = StringAggregate.make_default()
    _b = _t0.to_bytes()
    _t1 = StringAggregate.from_bytes(_b)
    assert _t0 == _t1
def test_string_categories():
    _t0 = StringCategories.make_default()
    _b = _t0.to_bytes()
    _t1 = StringCategories.from_bytes(_b)
    assert _t0 == _t1
def test_time_interval():
    _t0 = TimeInterval.make_default()
    _b = _t0.to_bytes()
    _t1 = TimeInterval.from_bytes(_b)
    assert _t0 == _t1
def test_u_int_aggregate():
    _t0 = UIntAggregate.make_default()
    _b = _t0.to_bytes()
    _t1 = UIntAggregate.from_bytes(_b)
    assert _t0 == _t1
def test_ul_field():
    _t0 = UlField.make_default()
    _b = _t0.to_bytes()
    _t1 = UlField.from_bytes(_b)
    assert _t0 == _t1
def test_ul_field_relationship():
    _t0 = UlFieldRelationship.make_default()
    _b = _t0.to_bytes()
    _t1 = UlFieldRelationship.from_bytes(_b)
    assert _t0 == _t1
def test_world_graph_geometry():
    _t0 = WorldGraphGeometry.make_default()
    _b = _t0.to_bytes()
    _t1 = WorldGraphGeometry.from_bytes(_b)
    assert _t0 == _t1