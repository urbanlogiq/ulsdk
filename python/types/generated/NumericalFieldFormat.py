# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
np = import_numpy()

class NumericalFieldFormat(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NumericalFieldFormat()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsNumericalFieldFormat(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # NumericalFieldFormat
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # NumericalFieldFormat
    def ValueType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NumericalFieldFormat
    def DecimalPlaces(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NumericalFieldFormat
    def Scale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # NumericalFieldFormat
    def Offset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def NumericalFieldFormatStart(builder: flatbuffers.Builder):
    builder.StartObject(4)

def Start(builder: flatbuffers.Builder):
    NumericalFieldFormatStart(builder)

def NumericalFieldFormatAddValueType(builder: flatbuffers.Builder, valueType: int):
    builder.PrependUint32Slot(0, valueType, 0)

def AddValueType(builder: flatbuffers.Builder, valueType: int):
    NumericalFieldFormatAddValueType(builder, valueType)

def NumericalFieldFormatAddDecimalPlaces(builder: flatbuffers.Builder, decimalPlaces: int):
    builder.PrependUint32Slot(1, decimalPlaces, 0)

def AddDecimalPlaces(builder: flatbuffers.Builder, decimalPlaces: int):
    NumericalFieldFormatAddDecimalPlaces(builder, decimalPlaces)

def NumericalFieldFormatAddScale(builder: flatbuffers.Builder, scale: float):
    builder.PrependFloat64Slot(2, scale, 0.0)

def AddScale(builder: flatbuffers.Builder, scale: float):
    NumericalFieldFormatAddScale(builder, scale)

def NumericalFieldFormatAddOffset(builder: flatbuffers.Builder, offset: float):
    builder.PrependFloat64Slot(3, offset, 0.0)

def AddOffset(builder: flatbuffers.Builder, offset: float):
    NumericalFieldFormatAddOffset(builder, offset)

def NumericalFieldFormatEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return NumericalFieldFormatEnd(builder)
