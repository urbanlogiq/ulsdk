# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from typing import Optional
np = import_numpy()

class Join(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Join()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsJoin(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Join
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Join
    def SrcIdx(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Join
    def DestIdx(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Join
    def SrcCol(self) -> Optional[bytes]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Join
    def DestCol(self) -> Optional[bytes]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Join
    def Ty(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def JoinStart(builder: flatbuffers.Builder):
    builder.StartObject(5)

def Start(builder: flatbuffers.Builder):
    JoinStart(builder)

def JoinAddSrcIdx(builder: flatbuffers.Builder, srcIdx: int):
    builder.PrependUint32Slot(0, srcIdx, 0)

def AddSrcIdx(builder: flatbuffers.Builder, srcIdx: int):
    JoinAddSrcIdx(builder, srcIdx)

def JoinAddDestIdx(builder: flatbuffers.Builder, destIdx: int):
    builder.PrependUint32Slot(1, destIdx, 0)

def AddDestIdx(builder: flatbuffers.Builder, destIdx: int):
    JoinAddDestIdx(builder, destIdx)

def JoinAddSrcCol(builder: flatbuffers.Builder, srcCol: int):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(srcCol), 0)

def AddSrcCol(builder: flatbuffers.Builder, srcCol: int):
    JoinAddSrcCol(builder, srcCol)

def JoinAddDestCol(builder: flatbuffers.Builder, destCol: int):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(destCol), 0)

def AddDestCol(builder: flatbuffers.Builder, destCol: int):
    JoinAddDestCol(builder, destCol)

def JoinAddTy(builder: flatbuffers.Builder, ty: int):
    builder.PrependInt8Slot(4, ty, 0)

def AddTy(builder: flatbuffers.Builder, ty: int):
    JoinAddTy(builder, ty)

def JoinEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return JoinEnd(builder)
