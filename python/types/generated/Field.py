# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from .DictionaryEncoding import DictionaryEncoding
from .KeyValue import KeyValue
from flatbuffers.table import Table
from typing import Optional
np = import_numpy()

# ----------------------------------------------------------------------
# A field represents a named column in a record / row batch or child of a
# nested type.
class Field(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Field()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsField(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Field
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Name is not required, in i.e. a List
    # Field
    def Name(self) -> Optional[bytes]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Whether or not this field can contain nulls. Should be true in general.
    # Field
    def Nullable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Field
    def TypeType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # This is the type of the decoded value if the field is dictionary encoded.
    # Field
    def Type(self) -> Optional[flatbuffers.table.Table]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # Present only if the field is dictionary encoded.
    # Field
    def Dictionary(self) -> Optional[DictionaryEncoding]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = DictionaryEncoding()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # children apply only to nested data types like Struct, List and Union. For
    # primitive types children will have length 0.
    # Field
    def Children(self, j: int) -> Optional['Field']:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = Field()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Field
    def ChildrenLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Field
    def ChildrenIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # User-defined metadata
    # Field
    def CustomMetadata(self, j: int) -> Optional[KeyValue]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = KeyValue()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Field
    def CustomMetadataLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Field
    def CustomMetadataIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

def FieldStart(builder: flatbuffers.Builder):
    builder.StartObject(7)

def Start(builder: flatbuffers.Builder):
    FieldStart(builder)

def FieldAddName(builder: flatbuffers.Builder, name: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder: flatbuffers.Builder, name: int):
    FieldAddName(builder, name)

def FieldAddNullable(builder: flatbuffers.Builder, nullable: bool):
    builder.PrependBoolSlot(1, nullable, 0)

def AddNullable(builder: flatbuffers.Builder, nullable: bool):
    FieldAddNullable(builder, nullable)

def FieldAddTypeType(builder: flatbuffers.Builder, typeType: int):
    builder.PrependUint8Slot(2, typeType, 0)

def AddTypeType(builder: flatbuffers.Builder, typeType: int):
    FieldAddTypeType(builder, typeType)

def FieldAddType(builder: flatbuffers.Builder, type: int):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder: flatbuffers.Builder, type: int):
    FieldAddType(builder, type)

def FieldAddDictionary(builder: flatbuffers.Builder, dictionary: int):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(dictionary), 0)

def AddDictionary(builder: flatbuffers.Builder, dictionary: int):
    FieldAddDictionary(builder, dictionary)

def FieldAddChildren(builder: flatbuffers.Builder, children: int):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(children), 0)

def AddChildren(builder: flatbuffers.Builder, children: int):
    FieldAddChildren(builder, children)

def FieldStartChildrenVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartChildrenVector(builder, numElems: int) -> int:
    return FieldStartChildrenVector(builder, numElems)

def FieldAddCustomMetadata(builder: flatbuffers.Builder, customMetadata: int):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(customMetadata), 0)

def AddCustomMetadata(builder: flatbuffers.Builder, customMetadata: int):
    FieldAddCustomMetadata(builder, customMetadata)

def FieldStartCustomMetadataVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartCustomMetadataVector(builder, numElems: int) -> int:
    return FieldStartCustomMetadataVector(builder, numElems)

def FieldEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return FieldEnd(builder)
