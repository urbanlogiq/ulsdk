# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from .AttributePair import AttributePair
from .B2cId import B2cId
from .ContentId import ContentId
from typing import Optional
np = import_numpy()

class DataCatalogObject(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DataCatalogObject()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDataCatalogObject(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DataCatalogObject
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DataCatalogObject
    def Ty(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # This field is either an embedded flatbuffer containing the actual object
    # content (ie: worklog, schematic, ...) if the Encrypted flag is unset, or
    # an EncryptedObject where the obj field of the EncryptedObject table is
    # the embedded flatbuffer of the object if it is set.
    # DataCatalogObject
    def Obj(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # DataCatalogObject
    def ObjAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # DataCatalogObject
    def ObjLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataCatalogObject
    def ObjIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Parent nodes of this commit. To handle the cases of multiple parents (ie:
    # in cases of parallel mutation), this field allows multiple IDs to be specified.
    # DataCatalogObject
    def Parents(self, j: int) -> Optional[ContentId]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = ContentId()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DataCatalogObject
    def ParentsLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataCatalogObject
    def ParentsIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # User ID of the person committing the change.
    # DataCatalogObject
    def User(self) -> Optional[B2cId]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = B2cId()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Optional change log comment
    # DataCatalogObject
    def Comment(self) -> Optional[bytes]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UTC timestamp (in ms) when this change was made.
    # DataCatalogObject
    def Time(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # DataCatalogObject
    def Tags(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # DataCatalogObject
    def TagsLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataCatalogObject
    def TagsIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # DataCatalogObject
    def Flags(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # DataCatalogObject
    def Attributes(self, j: int) -> Optional[AttributePair]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = AttributePair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DataCatalogObject
    def AttributesLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataCatalogObject
    def AttributesIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # DataCatalogObject
    def Version(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Default protection mode (see PermissionTy in the permissions module).
    # Purpose is to determine what happens when an object is navigated to
    # (ie: a directory in the drive). Defaults to 0 (ie: no access)
    # DataCatalogObject
    def DefaultMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # DataCatalogObject
    def Signature(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # DataCatalogObject
    def SignatureAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # DataCatalogObject
    def SignatureLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataCatalogObject
    def SignatureIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

def DataCatalogObjectStart(builder: flatbuffers.Builder):
    builder.StartObject(12)

def Start(builder: flatbuffers.Builder):
    DataCatalogObjectStart(builder)

def DataCatalogObjectAddTy(builder: flatbuffers.Builder, ty: int):
    builder.PrependInt16Slot(0, ty, 0)

def AddTy(builder: flatbuffers.Builder, ty: int):
    DataCatalogObjectAddTy(builder, ty)

def DataCatalogObjectAddObj(builder: flatbuffers.Builder, obj: int):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(obj), 0)

def AddObj(builder: flatbuffers.Builder, obj: int):
    DataCatalogObjectAddObj(builder, obj)

def DataCatalogObjectStartObjVector(builder, numElems: int) -> int:
    return builder.StartVector(1, numElems, 1)

def StartObjVector(builder, numElems: int) -> int:
    return DataCatalogObjectStartObjVector(builder, numElems)

def DataCatalogObjectAddParents(builder: flatbuffers.Builder, parents: int):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(parents), 0)

def AddParents(builder: flatbuffers.Builder, parents: int):
    DataCatalogObjectAddParents(builder, parents)

def DataCatalogObjectStartParentsVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartParentsVector(builder, numElems: int) -> int:
    return DataCatalogObjectStartParentsVector(builder, numElems)

def DataCatalogObjectAddUser(builder: flatbuffers.Builder, user: int):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(user), 0)

def AddUser(builder: flatbuffers.Builder, user: int):
    DataCatalogObjectAddUser(builder, user)

def DataCatalogObjectAddComment(builder: flatbuffers.Builder, comment: int):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(comment), 0)

def AddComment(builder: flatbuffers.Builder, comment: int):
    DataCatalogObjectAddComment(builder, comment)

def DataCatalogObjectAddTime(builder: flatbuffers.Builder, time: int):
    builder.PrependUint64Slot(5, time, 0)

def AddTime(builder: flatbuffers.Builder, time: int):
    DataCatalogObjectAddTime(builder, time)

def DataCatalogObjectAddTags(builder: flatbuffers.Builder, tags: int):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)

def AddTags(builder: flatbuffers.Builder, tags: int):
    DataCatalogObjectAddTags(builder, tags)

def DataCatalogObjectStartTagsVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartTagsVector(builder, numElems: int) -> int:
    return DataCatalogObjectStartTagsVector(builder, numElems)

def DataCatalogObjectAddFlags(builder: flatbuffers.Builder, flags: int):
    builder.PrependUint32Slot(7, flags, 0)

def AddFlags(builder: flatbuffers.Builder, flags: int):
    DataCatalogObjectAddFlags(builder, flags)

def DataCatalogObjectAddAttributes(builder: flatbuffers.Builder, attributes: int):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(attributes), 0)

def AddAttributes(builder: flatbuffers.Builder, attributes: int):
    DataCatalogObjectAddAttributes(builder, attributes)

def DataCatalogObjectStartAttributesVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartAttributesVector(builder, numElems: int) -> int:
    return DataCatalogObjectStartAttributesVector(builder, numElems)

def DataCatalogObjectAddVersion(builder: flatbuffers.Builder, version: int):
    builder.PrependUint32Slot(9, version, 0)

def AddVersion(builder: flatbuffers.Builder, version: int):
    DataCatalogObjectAddVersion(builder, version)

def DataCatalogObjectAddDefaultMode(builder: flatbuffers.Builder, defaultMode: int):
    builder.PrependUint32Slot(10, defaultMode, 0)

def AddDefaultMode(builder: flatbuffers.Builder, defaultMode: int):
    DataCatalogObjectAddDefaultMode(builder, defaultMode)

def DataCatalogObjectAddSignature(builder: flatbuffers.Builder, signature: int):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(signature), 0)

def AddSignature(builder: flatbuffers.Builder, signature: int):
    DataCatalogObjectAddSignature(builder, signature)

def DataCatalogObjectStartSignatureVector(builder, numElems: int) -> int:
    return builder.StartVector(1, numElems, 1)

def StartSignatureVector(builder, numElems: int) -> int:
    return DataCatalogObjectStartSignatureVector(builder, numElems)

def DataCatalogObjectEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return DataCatalogObjectEnd(builder)
