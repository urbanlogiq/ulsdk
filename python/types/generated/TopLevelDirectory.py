# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from .B2cId import B2cId
from typing import Optional
np = import_numpy()

class TopLevelDirectory(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TopLevelDirectory()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTopLevelDirectory(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TopLevelDirectory
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TopLevelDirectory
    def B2cEntity(self) -> Optional[B2cId]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = B2cId()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def TopLevelDirectoryStart(builder: flatbuffers.Builder):
    builder.StartObject(1)

def Start(builder: flatbuffers.Builder):
    TopLevelDirectoryStart(builder)

def TopLevelDirectoryAddB2cEntity(builder: flatbuffers.Builder, b2cEntity: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(b2cEntity), 0)

def AddB2cEntity(builder: flatbuffers.Builder, b2cEntity: int):
    TopLevelDirectoryAddB2cEntity(builder, b2cEntity)

def TopLevelDirectoryEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return TopLevelDirectoryEnd(builder)
