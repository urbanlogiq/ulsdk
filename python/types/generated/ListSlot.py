# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from .Attr import Attr
from .B2cId import B2cId
from .ObjectId import ObjectId
from flatbuffers.table import Table
from typing import Optional
np = import_numpy()

class ListSlot(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ListSlot()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsListSlot(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ListSlot
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ListSlot
    def Id(self) -> Optional[ObjectId]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ObjectId()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ListSlot
    def EntryType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # ListSlot
    def Entry(self) -> Optional[flatbuffers.table.Table]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # ListSlot
    def Name(self) -> Optional[bytes]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ListSlot
    def UserPermissions(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ListSlot
    def Time(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # ListSlot
    def Size(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # ListSlot
    def Attributes(self, j: int) -> Optional[Attr]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = Attr()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ListSlot
    def AttributesLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ListSlot
    def AttributesIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # ListSlot
    def LastModifiedBy(self) -> Optional[B2cId]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = B2cId()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def ListSlotStart(builder: flatbuffers.Builder):
    builder.StartObject(9)

def Start(builder: flatbuffers.Builder):
    ListSlotStart(builder)

def ListSlotAddId(builder: flatbuffers.Builder, id: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder: flatbuffers.Builder, id: int):
    ListSlotAddId(builder, id)

def ListSlotAddEntryType(builder: flatbuffers.Builder, entryType: int):
    builder.PrependUint8Slot(1, entryType, 0)

def AddEntryType(builder: flatbuffers.Builder, entryType: int):
    ListSlotAddEntryType(builder, entryType)

def ListSlotAddEntry(builder: flatbuffers.Builder, entry: int):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(entry), 0)

def AddEntry(builder: flatbuffers.Builder, entry: int):
    ListSlotAddEntry(builder, entry)

def ListSlotAddName(builder: flatbuffers.Builder, name: int):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder: flatbuffers.Builder, name: int):
    ListSlotAddName(builder, name)

def ListSlotAddUserPermissions(builder: flatbuffers.Builder, userPermissions: int):
    builder.PrependUint32Slot(4, userPermissions, 0)

def AddUserPermissions(builder: flatbuffers.Builder, userPermissions: int):
    ListSlotAddUserPermissions(builder, userPermissions)

def ListSlotAddTime(builder: flatbuffers.Builder, time: int):
    builder.PrependUint64Slot(5, time, 0)

def AddTime(builder: flatbuffers.Builder, time: int):
    ListSlotAddTime(builder, time)

def ListSlotAddSize(builder: flatbuffers.Builder, size: int):
    builder.PrependUint64Slot(6, size, 0)

def AddSize(builder: flatbuffers.Builder, size: int):
    ListSlotAddSize(builder, size)

def ListSlotAddAttributes(builder: flatbuffers.Builder, attributes: int):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(attributes), 0)

def AddAttributes(builder: flatbuffers.Builder, attributes: int):
    ListSlotAddAttributes(builder, attributes)

def ListSlotStartAttributesVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartAttributesVector(builder, numElems: int) -> int:
    return ListSlotStartAttributesVector(builder, numElems)

def ListSlotAddLastModifiedBy(builder: flatbuffers.Builder, lastModifiedBy: int):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(lastModifiedBy), 0)

def AddLastModifiedBy(builder: flatbuffers.Builder, lastModifiedBy: int):
    ListSlotAddLastModifiedBy(builder, lastModifiedBy)

def ListSlotEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return ListSlotEnd(builder)
