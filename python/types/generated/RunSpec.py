# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from .ObjectId import ObjectId
from .ParamIndices import ParamIndices
from .TaskParameter import TaskParameter
from typing import Optional
np = import_numpy()

# A RunSpec is the data required in order to kickstart a schematic job.
# It includes the ID of the schematic to run along with the parameters.
# The param_indices list must be *exactly* as long as the nodes list in
# the Schematic. Each entry in the param_indices list is itself a list
# that points to all the parameters in the params array. This lets
# us reuse the task parameters across nodes (ie: if we want a shared
# start_date / end_date to be used in a number of calculations)
class RunSpec(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RunSpec()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRunSpec(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # RunSpec
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RunSpec
    def Persist(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # RunSpec
    def Schematic(self) -> Optional[ObjectId]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ObjectId()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RunSpec
    def ParamIndices(self, j: int) -> Optional[ParamIndices]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = ParamIndices()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RunSpec
    def ParamIndicesLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RunSpec
    def ParamIndicesIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # RunSpec
    def Params(self, j: int) -> Optional[TaskParameter]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = TaskParameter()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RunSpec
    def ParamsLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RunSpec
    def ParamsIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # RunSpec
    def Priority(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # RunSpec
    def Notify(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return True

def RunSpecStart(builder: flatbuffers.Builder):
    builder.StartObject(6)

def Start(builder: flatbuffers.Builder):
    RunSpecStart(builder)

def RunSpecAddPersist(builder: flatbuffers.Builder, persist: bool):
    builder.PrependBoolSlot(0, persist, 0)

def AddPersist(builder: flatbuffers.Builder, persist: bool):
    RunSpecAddPersist(builder, persist)

def RunSpecAddSchematic(builder: flatbuffers.Builder, schematic: int):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(schematic), 0)

def AddSchematic(builder: flatbuffers.Builder, schematic: int):
    RunSpecAddSchematic(builder, schematic)

def RunSpecAddParamIndices(builder: flatbuffers.Builder, paramIndices: int):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(paramIndices), 0)

def AddParamIndices(builder: flatbuffers.Builder, paramIndices: int):
    RunSpecAddParamIndices(builder, paramIndices)

def RunSpecStartParamIndicesVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartParamIndicesVector(builder, numElems: int) -> int:
    return RunSpecStartParamIndicesVector(builder, numElems)

def RunSpecAddParams(builder: flatbuffers.Builder, params: int):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(params), 0)

def AddParams(builder: flatbuffers.Builder, params: int):
    RunSpecAddParams(builder, params)

def RunSpecStartParamsVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartParamsVector(builder, numElems: int) -> int:
    return RunSpecStartParamsVector(builder, numElems)

def RunSpecAddPriority(builder: flatbuffers.Builder, priority: int):
    builder.PrependInt32Slot(4, priority, 0)

def AddPriority(builder: flatbuffers.Builder, priority: int):
    RunSpecAddPriority(builder, priority)

def RunSpecAddNotify(builder: flatbuffers.Builder, notify: bool):
    builder.PrependBoolSlot(5, notify, 1)

def AddNotify(builder: flatbuffers.Builder, notify: bool):
    RunSpecAddNotify(builder, notify)

def RunSpecEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return RunSpecEnd(builder)
