# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from .ObjectId import ObjectId
from .Role import Role
from typing import Optional
np = import_numpy()

class AccessControlList(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AccessControlList()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAccessControlList(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AccessControlList
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AccessControlList
    def Roles(self, j: int) -> Optional[Role]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = Role()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AccessControlList
    def RolesLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AccessControlList
    def RolesIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # The "extends" allows us to chain together ACLs without needing to copy
    # the whole thing. For example, if want to grant Alice access to a file,
    # we would create a new ACL for that file that has Alice in the permissions
    # list but extends the parent directory's ACL to retain all the existing
    # permissions. This can also be used to selectively revoke access (by
    # adding an ACL entry with empty permissions) to an object.
    # AccessControlList
    def Extends(self) -> Optional[ObjectId]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ObjectId()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def AccessControlListStart(builder: flatbuffers.Builder):
    builder.StartObject(2)

def Start(builder: flatbuffers.Builder):
    AccessControlListStart(builder)

def AccessControlListAddRoles(builder: flatbuffers.Builder, roles: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(roles), 0)

def AddRoles(builder: flatbuffers.Builder, roles: int):
    AccessControlListAddRoles(builder, roles)

def AccessControlListStartRolesVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartRolesVector(builder, numElems: int) -> int:
    return AccessControlListStartRolesVector(builder, numElems)

def AccessControlListAddExtends(builder: flatbuffers.Builder, extends: int):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(extends), 0)

def AddExtends(builder: flatbuffers.Builder, extends: int):
    AccessControlListAddExtends(builder, extends)

def AccessControlListEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return AccessControlListEnd(builder)
