# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from .UIntBucket import UIntBucket
from typing import Optional
np = import_numpy()

class IntAggregate(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = IntAggregate()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsIntAggregate(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # IntAggregate
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # IntAggregate
    def Min(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # IntAggregate
    def Max(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # IntAggregate
    def Mean(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # IntAggregate
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # IntAggregate
    def Sum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # IntAggregate
    def Variance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # IntAggregate
    def Histo(self, j: int) -> Optional[UIntBucket]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 16
            obj = UIntBucket()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # IntAggregate
    def HistoLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IntAggregate
    def HistoIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

def IntAggregateStart(builder: flatbuffers.Builder):
    builder.StartObject(7)

def Start(builder: flatbuffers.Builder):
    IntAggregateStart(builder)

def IntAggregateAddMin(builder: flatbuffers.Builder, min: int):
    builder.PrependInt64Slot(0, min, 0)

def AddMin(builder: flatbuffers.Builder, min: int):
    IntAggregateAddMin(builder, min)

def IntAggregateAddMax(builder: flatbuffers.Builder, max: int):
    builder.PrependInt64Slot(1, max, 0)

def AddMax(builder: flatbuffers.Builder, max: int):
    IntAggregateAddMax(builder, max)

def IntAggregateAddMean(builder: flatbuffers.Builder, mean: int):
    builder.PrependInt64Slot(2, mean, 0)

def AddMean(builder: flatbuffers.Builder, mean: int):
    IntAggregateAddMean(builder, mean)

def IntAggregateAddCount(builder: flatbuffers.Builder, count: int):
    builder.PrependUint64Slot(3, count, 0)

def AddCount(builder: flatbuffers.Builder, count: int):
    IntAggregateAddCount(builder, count)

def IntAggregateAddSum(builder: flatbuffers.Builder, sum: int):
    builder.PrependInt64Slot(4, sum, 0)

def AddSum(builder: flatbuffers.Builder, sum: int):
    IntAggregateAddSum(builder, sum)

def IntAggregateAddVariance(builder: flatbuffers.Builder, variance: int):
    builder.PrependInt64Slot(5, variance, 0)

def AddVariance(builder: flatbuffers.Builder, variance: int):
    IntAggregateAddVariance(builder, variance)

def IntAggregateAddHisto(builder: flatbuffers.Builder, histo: int):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(histo), 0)

def AddHisto(builder: flatbuffers.Builder, histo: int):
    IntAggregateAddHisto(builder, histo)

def IntAggregateStartHistoVector(builder, numElems: int) -> int:
    return builder.StartVector(16, numElems, 8)

def StartHistoVector(builder, numElems: int) -> int:
    return IntAggregateStartHistoVector(builder, numElems)

def IntAggregateEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return IntAggregateEnd(builder)
