# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from typing import Optional
np = import_numpy()

class NestedStringCategoryNode(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NestedStringCategoryNode()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsNestedStringCategoryNode(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # NestedStringCategoryNode
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # NestedStringCategoryNode
    def Value(self) -> Optional[bytes]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # NestedStringCategoryNode
    def ChildValues(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # NestedStringCategoryNode
    def ChildValuesLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NestedStringCategoryNode
    def ChildValuesIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def NestedStringCategoryNodeStart(builder: flatbuffers.Builder):
    builder.StartObject(2)

def Start(builder: flatbuffers.Builder):
    NestedStringCategoryNodeStart(builder)

def NestedStringCategoryNodeAddValue(builder: flatbuffers.Builder, value: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def AddValue(builder: flatbuffers.Builder, value: int):
    NestedStringCategoryNodeAddValue(builder, value)

def NestedStringCategoryNodeAddChildValues(builder: flatbuffers.Builder, childValues: int):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(childValues), 0)

def AddChildValues(builder: flatbuffers.Builder, childValues: int):
    NestedStringCategoryNodeAddChildValues(builder, childValues)

def NestedStringCategoryNodeStartChildValuesVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartChildValuesVector(builder, numElems: int) -> int:
    return NestedStringCategoryNodeStartChildValuesVector(builder, numElems)

def NestedStringCategoryNodeEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return NestedStringCategoryNodeEnd(builder)
