# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from .Expr import Expr
from typing import Optional
np = import_numpy()

# SetExprs represent the expressions used as part of an UPDATE-type operation
class SetExpr(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SetExpr()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSetExpr(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SetExpr
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Because we cannot refer to multiple tables at once in a single UPDATE
    # operation we only need to name the column, we can just a string here
    # instead of a Column table.
    # SetExpr
    def Col(self) -> Optional[bytes]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # This is the expression that is evaluted to produce the value that is
    # assigned to the column named in the `col` field.
    # SetExpr
    def Expr(self) -> Optional[Expr]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Expr()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def SetExprStart(builder: flatbuffers.Builder):
    builder.StartObject(2)

def Start(builder: flatbuffers.Builder):
    SetExprStart(builder)

def SetExprAddCol(builder: flatbuffers.Builder, col: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(col), 0)

def AddCol(builder: flatbuffers.Builder, col: int):
    SetExprAddCol(builder, col)

def SetExprAddExpr(builder: flatbuffers.Builder, expr: int):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(expr), 0)

def AddExpr(builder: flatbuffers.Builder, expr: int):
    SetExprAddExpr(builder, expr)

def SetExprEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return SetExprEnd(builder)
