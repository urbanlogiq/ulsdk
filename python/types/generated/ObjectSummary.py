# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from .ContentId import ContentId
from .ObjectId import ObjectId
from typing import Optional
np = import_numpy()

class ObjectSummary(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ObjectSummary()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsObjectSummary(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ObjectSummary
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ObjectSummary
    def Id(self) -> Optional[ObjectId]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ObjectId()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ObjectSummary
    def HeadRevision(self) -> Optional[ContentId]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ContentId()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ObjectSummary
    def Ty(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # ObjectSummary
    def Time(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # ObjectSummary
    def Acl(self) -> Optional[ObjectId]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ObjectId()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ObjectSummary
    def DriveSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def ObjectSummaryStart(builder: flatbuffers.Builder):
    builder.StartObject(6)

def Start(builder: flatbuffers.Builder):
    ObjectSummaryStart(builder)

def ObjectSummaryAddId(builder: flatbuffers.Builder, id: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder: flatbuffers.Builder, id: int):
    ObjectSummaryAddId(builder, id)

def ObjectSummaryAddHeadRevision(builder: flatbuffers.Builder, headRevision: int):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(headRevision), 0)

def AddHeadRevision(builder: flatbuffers.Builder, headRevision: int):
    ObjectSummaryAddHeadRevision(builder, headRevision)

def ObjectSummaryAddTy(builder: flatbuffers.Builder, ty: int):
    builder.PrependInt16Slot(2, ty, 0)

def AddTy(builder: flatbuffers.Builder, ty: int):
    ObjectSummaryAddTy(builder, ty)

def ObjectSummaryAddTime(builder: flatbuffers.Builder, time: int):
    builder.PrependUint64Slot(3, time, 0)

def AddTime(builder: flatbuffers.Builder, time: int):
    ObjectSummaryAddTime(builder, time)

def ObjectSummaryAddAcl(builder: flatbuffers.Builder, acl: int):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(acl), 0)

def AddAcl(builder: flatbuffers.Builder, acl: int):
    ObjectSummaryAddAcl(builder, acl)

def ObjectSummaryAddDriveSize(builder: flatbuffers.Builder, driveSize: int):
    builder.PrependUint64Slot(5, driveSize, 0)

def AddDriveSize(builder: flatbuffers.Builder, driveSize: int):
    ObjectSummaryAddDriveSize(builder, driveSize)

def ObjectSummaryEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return ObjectSummaryEnd(builder)
