# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from .DataStateId import DataStateId
from .JoinStackEntry import JoinStackEntry
from typing import Optional
np = import_numpy()

class StackableDataStateJoin(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StackableDataStateJoin()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStackableDataStateJoin(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # StackableDataStateJoin
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StackableDataStateJoin
    def JoinStack(self, j: int) -> Optional[JoinStackEntry]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = JoinStackEntry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StackableDataStateJoin
    def JoinStackLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StackableDataStateJoin
    def JoinStackIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # StackableDataStateJoin
    def Target(self) -> Optional[DataStateId]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = DataStateId()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StackableDataStateJoin
    def Op(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # StackableDataStateJoin
    def Buffer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # StackableDataStateJoin
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def StackableDataStateJoinStart(builder: flatbuffers.Builder):
    builder.StartObject(5)

def Start(builder: flatbuffers.Builder):
    StackableDataStateJoinStart(builder)

def StackableDataStateJoinAddJoinStack(builder: flatbuffers.Builder, joinStack: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(joinStack), 0)

def AddJoinStack(builder: flatbuffers.Builder, joinStack: int):
    StackableDataStateJoinAddJoinStack(builder, joinStack)

def StackableDataStateJoinStartJoinStackVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartJoinStackVector(builder, numElems: int) -> int:
    return StackableDataStateJoinStartJoinStackVector(builder, numElems)

def StackableDataStateJoinAddTarget(builder: flatbuffers.Builder, target: int):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(target), 0)

def AddTarget(builder: flatbuffers.Builder, target: int):
    StackableDataStateJoinAddTarget(builder, target)

def StackableDataStateJoinAddOp(builder: flatbuffers.Builder, op: int):
    builder.PrependUint32Slot(2, op, 0)

def AddOp(builder: flatbuffers.Builder, op: int):
    StackableDataStateJoinAddOp(builder, op)

def StackableDataStateJoinAddBuffer(builder: flatbuffers.Builder, buffer: float):
    builder.PrependFloat32Slot(3, buffer, 0.0)

def AddBuffer(builder: flatbuffers.Builder, buffer: float):
    StackableDataStateJoinAddBuffer(builder, buffer)

def StackableDataStateJoinAddType(builder: flatbuffers.Builder, type: int):
    builder.PrependInt8Slot(4, type, 0)

def AddType(builder: flatbuffers.Builder, type: int):
    StackableDataStateJoinAddType(builder, type)

def StackableDataStateJoinEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return StackableDataStateJoinEnd(builder)
