# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from .GeomOp import GeomOp
from .NodeIdPair import NodeIdPair
from .ObjectId import ObjectId
from .Projection import Projection
from typing import Optional
np = import_numpy()

class NodeQuery(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NodeQuery()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsNodeQuery(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # NodeQuery
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # NodeQuery
    def StreamIds(self, j: int) -> Optional[ObjectId]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = ObjectId()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NodeQuery
    def StreamIdsLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NodeQuery
    def StreamIdsIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # NodeQuery
    def EntityTys(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # NodeQuery
    def EntityTysAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # NodeQuery
    def EntityTysLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NodeQuery
    def EntityTysIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # If descriptions are provided here, then results will be ordered by their string similarity to the
    # descriptions here. This ordering is secondary to the any top-level order_by that might be provided.
    # NodeQuery
    def Descriptions(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # NodeQuery
    def DescriptionsLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NodeQuery
    def DescriptionsIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # NodeQuery
    def NodeIds(self, j: int) -> Optional[NodeIdPair]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = NodeIdPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NodeQuery
    def NodeIdsLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NodeQuery
    def NodeIdsIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # NodeQuery
    def Projections(self, j: int) -> Optional[Projection]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = Projection()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NodeQuery
    def ProjectionsLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NodeQuery
    def ProjectionsIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # NodeQuery
    def GeomOp(self) -> Optional[GeomOp]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = GeomOp()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def NodeQueryStart(builder: flatbuffers.Builder):
    builder.StartObject(6)

def Start(builder: flatbuffers.Builder):
    NodeQueryStart(builder)

def NodeQueryAddStreamIds(builder: flatbuffers.Builder, streamIds: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(streamIds), 0)

def AddStreamIds(builder: flatbuffers.Builder, streamIds: int):
    NodeQueryAddStreamIds(builder, streamIds)

def NodeQueryStartStreamIdsVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartStreamIdsVector(builder, numElems: int) -> int:
    return NodeQueryStartStreamIdsVector(builder, numElems)

def NodeQueryAddEntityTys(builder: flatbuffers.Builder, entityTys: int):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(entityTys), 0)

def AddEntityTys(builder: flatbuffers.Builder, entityTys: int):
    NodeQueryAddEntityTys(builder, entityTys)

def NodeQueryStartEntityTysVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartEntityTysVector(builder, numElems: int) -> int:
    return NodeQueryStartEntityTysVector(builder, numElems)

def NodeQueryAddDescriptions(builder: flatbuffers.Builder, descriptions: int):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(descriptions), 0)

def AddDescriptions(builder: flatbuffers.Builder, descriptions: int):
    NodeQueryAddDescriptions(builder, descriptions)

def NodeQueryStartDescriptionsVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartDescriptionsVector(builder, numElems: int) -> int:
    return NodeQueryStartDescriptionsVector(builder, numElems)

def NodeQueryAddNodeIds(builder: flatbuffers.Builder, nodeIds: int):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(nodeIds), 0)

def AddNodeIds(builder: flatbuffers.Builder, nodeIds: int):
    NodeQueryAddNodeIds(builder, nodeIds)

def NodeQueryStartNodeIdsVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartNodeIdsVector(builder, numElems: int) -> int:
    return NodeQueryStartNodeIdsVector(builder, numElems)

def NodeQueryAddProjections(builder: flatbuffers.Builder, projections: int):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(projections), 0)

def AddProjections(builder: flatbuffers.Builder, projections: int):
    NodeQueryAddProjections(builder, projections)

def NodeQueryStartProjectionsVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartProjectionsVector(builder, numElems: int) -> int:
    return NodeQueryStartProjectionsVector(builder, numElems)

def NodeQueryAddGeomOp(builder: flatbuffers.Builder, geomOp: int):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(geomOp), 0)

def AddGeomOp(builder: flatbuffers.Builder, geomOp: int):
    NodeQueryAddGeomOp(builder, geomOp)

def NodeQueryEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return NodeQueryEnd(builder)
