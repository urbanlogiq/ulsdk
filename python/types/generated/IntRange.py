# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from .IntegerDisplayString import IntegerDisplayString
from .NumericalFieldFormat import NumericalFieldFormat
from typing import Optional
np = import_numpy()

class IntRange(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = IntRange()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsIntRange(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # IntRange
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # IntRange
    def Min(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # IntRange
    def Max(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # IntRange
    def FieldFormat(self) -> Optional[NumericalFieldFormat]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = NumericalFieldFormat()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # IntRange
    def AggregationProtocol(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # IntRange
    def DisplayStrings(self, j: int) -> Optional[IntegerDisplayString]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = IntegerDisplayString()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # IntRange
    def DisplayStringsLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IntRange
    def DisplayStringsIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # IntRange
    def EnumName(self) -> Optional[bytes]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def IntRangeStart(builder: flatbuffers.Builder):
    builder.StartObject(6)

def Start(builder: flatbuffers.Builder):
    IntRangeStart(builder)

def IntRangeAddMin(builder: flatbuffers.Builder, min: int):
    builder.PrependInt64Slot(0, min, 0)

def AddMin(builder: flatbuffers.Builder, min: int):
    IntRangeAddMin(builder, min)

def IntRangeAddMax(builder: flatbuffers.Builder, max: int):
    builder.PrependInt64Slot(1, max, 0)

def AddMax(builder: flatbuffers.Builder, max: int):
    IntRangeAddMax(builder, max)

def IntRangeAddFieldFormat(builder: flatbuffers.Builder, fieldFormat: int):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(fieldFormat), 0)

def AddFieldFormat(builder: flatbuffers.Builder, fieldFormat: int):
    IntRangeAddFieldFormat(builder, fieldFormat)

def IntRangeAddAggregationProtocol(builder: flatbuffers.Builder, aggregationProtocol: int):
    builder.PrependUint32Slot(3, aggregationProtocol, 0)

def AddAggregationProtocol(builder: flatbuffers.Builder, aggregationProtocol: int):
    IntRangeAddAggregationProtocol(builder, aggregationProtocol)

def IntRangeAddDisplayStrings(builder: flatbuffers.Builder, displayStrings: int):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(displayStrings), 0)

def AddDisplayStrings(builder: flatbuffers.Builder, displayStrings: int):
    IntRangeAddDisplayStrings(builder, displayStrings)

def IntRangeStartDisplayStringsVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartDisplayStringsVector(builder, numElems: int) -> int:
    return IntRangeStartDisplayStringsVector(builder, numElems)

def IntRangeAddEnumName(builder: flatbuffers.Builder, enumName: int):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(enumName), 0)

def AddEnumName(builder: flatbuffers.Builder, enumName: int):
    IntRangeAddEnumName(builder, enumName)

def IntRangeEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return IntRangeEnd(builder)
