# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from .TimeInterval import TimeInterval
from typing import Optional
np = import_numpy()

class DatetimeRange(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DatetimeRange()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDatetimeRange(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DatetimeRange
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DatetimeRange
    def Min(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # DatetimeRange
    def Max(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # DatetimeRange
    def Intervals(self, j: int) -> Optional[TimeInterval]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = TimeInterval()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DatetimeRange
    def IntervalsLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DatetimeRange
    def IntervalsIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def DatetimeRangeStart(builder: flatbuffers.Builder):
    builder.StartObject(3)

def Start(builder: flatbuffers.Builder):
    DatetimeRangeStart(builder)

def DatetimeRangeAddMin(builder: flatbuffers.Builder, min: int):
    builder.PrependInt64Slot(0, min, 0)

def AddMin(builder: flatbuffers.Builder, min: int):
    DatetimeRangeAddMin(builder, min)

def DatetimeRangeAddMax(builder: flatbuffers.Builder, max: int):
    builder.PrependInt64Slot(1, max, 0)

def AddMax(builder: flatbuffers.Builder, max: int):
    DatetimeRangeAddMax(builder, max)

def DatetimeRangeAddIntervals(builder: flatbuffers.Builder, intervals: int):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(intervals), 0)

def AddIntervals(builder: flatbuffers.Builder, intervals: int):
    DatetimeRangeAddIntervals(builder, intervals)

def DatetimeRangeStartIntervalsVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartIntervalsVector(builder, numElems: int) -> int:
    return DatetimeRangeStartIntervalsVector(builder, numElems)

def DatetimeRangeEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return DatetimeRangeEnd(builder)
