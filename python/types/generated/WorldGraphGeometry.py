# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from .ObjectId import ObjectId
from typing import Optional
np = import_numpy()

# For most streams with GeometrySourceType==WorldGraphGeometry, edge_path will
# be empty and start_stream_id will be unset.
#
# If edge_path is empty and start_stream_id is unset we just query for nodes
# whose stream predicate matches this stream's streamId in order to fetch the stream's geometry.
#
# If edge_path is non-empty and start_stream_id is set: Start at nodes with
# streamId=start_stream_id and follow the edge_path. Retrieve geometry from
# the last node on that path.
#
# If edge_path is non-empty and start_stream_id is unset: Start at nodes with
# streamId=id of this stream and follow the edge_path to retrieve the geeometry.
#
# If edge_path is empty and start_stream_id is set: Just query for nodes with
# streamId == start_stream_id.
class WorldGraphGeometry(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = WorldGraphGeometry()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsWorldGraphGeometry(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # WorldGraphGeometry
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Edges to follow to reach the nodes with geometry.
    # WorldGraphGeometry
    def EdgePath(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # WorldGraphGeometry
    def EdgePathAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # WorldGraphGeometry
    def EdgePathLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WorldGraphGeometry
    def EdgePathIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Stream id of the starting node in the query path for the geometry
    # WorldGraphGeometry
    def StartStreamId(self) -> Optional[ObjectId]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ObjectId()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def WorldGraphGeometryStart(builder: flatbuffers.Builder):
    builder.StartObject(2)

def Start(builder: flatbuffers.Builder):
    WorldGraphGeometryStart(builder)

def WorldGraphGeometryAddEdgePath(builder: flatbuffers.Builder, edgePath: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(edgePath), 0)

def AddEdgePath(builder: flatbuffers.Builder, edgePath: int):
    WorldGraphGeometryAddEdgePath(builder, edgePath)

def WorldGraphGeometryStartEdgePathVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartEdgePathVector(builder, numElems: int) -> int:
    return WorldGraphGeometryStartEdgePathVector(builder, numElems)

def WorldGraphGeometryAddStartStreamId(builder: flatbuffers.Builder, startStreamId: int):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(startStreamId), 0)

def AddStartStreamId(builder: flatbuffers.Builder, startStreamId: int):
    WorldGraphGeometryAddStartStreamId(builder, startStreamId)

def WorldGraphGeometryEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return WorldGraphGeometryEnd(builder)
