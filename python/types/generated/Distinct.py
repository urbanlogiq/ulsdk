# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from .Expr import Expr
from typing import Optional
np = import_numpy()

# The Distinct function defined in fun.fbs is for use in cases like:
# SELECT COUNT(DISTINCT c0), SUM(c1) FROM t GROUP BY c2;
# The `distinct` field here on the query element is to be used to remove duplicate rows, like:
# SELECT DISTINCT * FROM t;
# or
# SELECT DISTINCT ON (c0, c1) FROM t;
class Distinct(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Distinct()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDistinct(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Distinct
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # If `on` is unset or has length 0, then the distinct is:
    # SELECT DISTINCT * FROM t;
    # If `on` has length > 0, then distinct is:
    # SELECT DISTINCT ON (c0, c1) FROM t;
    # Distinct
    def On(self, j: int) -> Optional[Expr]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = Expr()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Distinct
    def OnLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Distinct
    def OnIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def DistinctStart(builder: flatbuffers.Builder):
    builder.StartObject(1)

def Start(builder: flatbuffers.Builder):
    DistinctStart(builder)

def DistinctAddOn(builder: flatbuffers.Builder, on: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(on), 0)

def AddOn(builder: flatbuffers.Builder, on: int):
    DistinctAddOn(builder, on)

def DistinctStartOnVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartOnVector(builder, numElems: int) -> int:
    return DistinctStartOnVector(builder, numElems)

def DistinctEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return DistinctEnd(builder)
