# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from .GenericId import GenericId
from typing import Optional
np = import_numpy()

# The RestoreRow operation restore a deleted row in the table
# "Restore" is implemented by setting the value of the `ul_keep` system column to true.
# This means that formerly "removed" rows are no longer treated as "removed" and will then be returned by queries.
class RestoreRow(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RestoreRow()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRestoreRow(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # RestoreRow
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The value of the ul_node_id column, which uniquely identifies the row.
    # RestoreRow
    def Row(self) -> Optional[GenericId]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = GenericId()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def RestoreRowStart(builder: flatbuffers.Builder):
    builder.StartObject(1)

def Start(builder: flatbuffers.Builder):
    RestoreRowStart(builder)

def RestoreRowAddRow(builder: flatbuffers.Builder, row: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(row), 0)

def AddRow(builder: flatbuffers.Builder, row: int):
    RestoreRowAddRow(builder, row)

def RestoreRowEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return RestoreRowEnd(builder)
