# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from .OrderBy import OrderBy
from .QueryPathElement import QueryPathElement
from typing import Optional
np = import_numpy()

# The GraphQuery encapsulates the entire world graph query.
class GraphQuery(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GraphQuery()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGraphQuery(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # GraphQuery
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GraphQuery
    def Path(self, j: int) -> Optional[QueryPathElement]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = QueryPathElement()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # GraphQuery
    def PathLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GraphQuery
    def PathIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # GraphQuery
    def Limit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GraphQuery
    def OrderBy(self, j: int) -> Optional[OrderBy]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = OrderBy()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # GraphQuery
    def OrderByLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GraphQuery
    def OrderByIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def GraphQueryStart(builder: flatbuffers.Builder):
    builder.StartObject(3)

def Start(builder: flatbuffers.Builder):
    GraphQueryStart(builder)

def GraphQueryAddPath(builder: flatbuffers.Builder, path: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(path), 0)

def AddPath(builder: flatbuffers.Builder, path: int):
    GraphQueryAddPath(builder, path)

def GraphQueryStartPathVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartPathVector(builder, numElems: int) -> int:
    return GraphQueryStartPathVector(builder, numElems)

def GraphQueryAddLimit(builder: flatbuffers.Builder, limit: int):
    builder.PrependUint32Slot(1, limit, 0)

def AddLimit(builder: flatbuffers.Builder, limit: int):
    GraphQueryAddLimit(builder, limit)

def GraphQueryAddOrderBy(builder: flatbuffers.Builder, orderBy: int):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(orderBy), 0)

def AddOrderBy(builder: flatbuffers.Builder, orderBy: int):
    GraphQueryAddOrderBy(builder, orderBy)

def GraphQueryStartOrderByVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartOrderByVector(builder, numElems: int) -> int:
    return GraphQueryStartOrderByVector(builder, numElems)

def GraphQueryEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return GraphQueryEnd(builder)
