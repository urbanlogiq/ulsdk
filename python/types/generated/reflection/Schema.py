# automatically generated by the FlatBuffers compiler, do not modify

# namespace: reflection

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from .Enum import Enum
from .Object import Object
from .SchemaFile import SchemaFile
from .Service import Service
from typing import Optional
np = import_numpy()

class Schema(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Schema()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSchema(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SchemaBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x42\x46\x42\x53", size_prefixed=size_prefixed)

    # Schema
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Schema
    def Objects(self, j: int) -> Optional[Object]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = Object()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Schema
    def ObjectsLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Schema
    def ObjectsIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Schema
    def Enums(self, j: int) -> Optional[Enum]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = Enum()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Schema
    def EnumsLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Schema
    def EnumsIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Schema
    def FileIdent(self) -> Optional[bytes]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Schema
    def FileExt(self) -> Optional[bytes]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Schema
    def RootTable(self) -> Optional[Object]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Object()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Schema
    def Services(self, j: int) -> Optional[Service]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = Service()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Schema
    def ServicesLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Schema
    def ServicesIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # Schema
    def AdvancedFeatures(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # All the files used in this compilation. Files are relative to where
    # flatc was invoked.
    # Schema
    def FbsFiles(self, j: int) -> Optional[SchemaFile]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = SchemaFile()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Schema
    def FbsFilesLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Schema
    def FbsFilesIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

def SchemaStart(builder: flatbuffers.Builder):
    builder.StartObject(8)

def Start(builder: flatbuffers.Builder):
    SchemaStart(builder)

def SchemaAddObjects(builder: flatbuffers.Builder, objects: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(objects), 0)

def AddObjects(builder: flatbuffers.Builder, objects: int):
    SchemaAddObjects(builder, objects)

def SchemaStartObjectsVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartObjectsVector(builder, numElems: int) -> int:
    return SchemaStartObjectsVector(builder, numElems)

def SchemaAddEnums(builder: flatbuffers.Builder, enums: int):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(enums), 0)

def AddEnums(builder: flatbuffers.Builder, enums: int):
    SchemaAddEnums(builder, enums)

def SchemaStartEnumsVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartEnumsVector(builder, numElems: int) -> int:
    return SchemaStartEnumsVector(builder, numElems)

def SchemaAddFileIdent(builder: flatbuffers.Builder, fileIdent: int):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(fileIdent), 0)

def AddFileIdent(builder: flatbuffers.Builder, fileIdent: int):
    SchemaAddFileIdent(builder, fileIdent)

def SchemaAddFileExt(builder: flatbuffers.Builder, fileExt: int):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(fileExt), 0)

def AddFileExt(builder: flatbuffers.Builder, fileExt: int):
    SchemaAddFileExt(builder, fileExt)

def SchemaAddRootTable(builder: flatbuffers.Builder, rootTable: int):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(rootTable), 0)

def AddRootTable(builder: flatbuffers.Builder, rootTable: int):
    SchemaAddRootTable(builder, rootTable)

def SchemaAddServices(builder: flatbuffers.Builder, services: int):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(services), 0)

def AddServices(builder: flatbuffers.Builder, services: int):
    SchemaAddServices(builder, services)

def SchemaStartServicesVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartServicesVector(builder, numElems: int) -> int:
    return SchemaStartServicesVector(builder, numElems)

def SchemaAddAdvancedFeatures(builder: flatbuffers.Builder, advancedFeatures: int):
    builder.PrependUint64Slot(6, advancedFeatures, 0)

def AddAdvancedFeatures(builder: flatbuffers.Builder, advancedFeatures: int):
    SchemaAddAdvancedFeatures(builder, advancedFeatures)

def SchemaAddFbsFiles(builder: flatbuffers.Builder, fbsFiles: int):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(fbsFiles), 0)

def AddFbsFiles(builder: flatbuffers.Builder, fbsFiles: int):
    SchemaAddFbsFiles(builder, fbsFiles)

def SchemaStartFbsFilesVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartFbsFilesVector(builder, numElems: int) -> int:
    return SchemaStartFbsFilesVector(builder, numElems)

def SchemaEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return SchemaEnd(builder)
