# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from typing import Optional
np = import_numpy()

class DatasetSource(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DatasetSource()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDatasetSource(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DatasetSource
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The entity that created the data (Manifold, Government of Canada, Wejo, City
    # DatasetSource
    def Source(self) -> Optional[bytes]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # A URL to where the data set can be fetched. Ideally a direct download but
    # DatasetSource
    def Url(self) -> Optional[bytes]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Date information about the data source, such as the year it was generated.
    # This is a free-form text field that isn't interpreted in any means by the
    # system.
    # DatasetSource
    def Date(self) -> Optional[bytes]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def DatasetSourceStart(builder: flatbuffers.Builder):
    builder.StartObject(3)

def Start(builder: flatbuffers.Builder):
    DatasetSourceStart(builder)

def DatasetSourceAddSource(builder: flatbuffers.Builder, source: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder: flatbuffers.Builder, source: int):
    DatasetSourceAddSource(builder, source)

def DatasetSourceAddUrl(builder: flatbuffers.Builder, url: int):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(url), 0)

def AddUrl(builder: flatbuffers.Builder, url: int):
    DatasetSourceAddUrl(builder, url)

def DatasetSourceAddDate(builder: flatbuffers.Builder, date: int):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(date), 0)

def AddDate(builder: flatbuffers.Builder, date: int):
    DatasetSourceAddDate(builder, date)

def DatasetSourceEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return DatasetSourceEnd(builder)
