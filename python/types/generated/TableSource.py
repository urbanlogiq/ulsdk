# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from .Expr import Expr
from .Function import Function
from .OrderBy import OrderBy
from flatbuffers.table import Table
from typing import Optional
np = import_numpy()

class TableSource(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TableSource()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTableSource(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TableSource
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TableSource
    def TType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # TableSource
    def T(self) -> Optional[flatbuffers.table.Table]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # TableSource
    def Fields(self, j: int) -> Optional[Expr]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = Expr()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TableSource
    def FieldsLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TableSource
    def FieldsIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # TableSource
    def Filter(self) -> Optional[Function]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Function()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TableSource
    def OrderBy(self, j: int) -> Optional[OrderBy]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = OrderBy()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TableSource
    def OrderByLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TableSource
    def OrderByIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # TableSource
    def GroupBy(self, j: int) -> Optional[Expr]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = Expr()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TableSource
    def GroupByLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TableSource
    def GroupByIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def TableSourceStart(builder: flatbuffers.Builder):
    builder.StartObject(6)

def Start(builder: flatbuffers.Builder):
    TableSourceStart(builder)

def TableSourceAddTType(builder: flatbuffers.Builder, tType: int):
    builder.PrependUint8Slot(0, tType, 0)

def AddTType(builder: flatbuffers.Builder, tType: int):
    TableSourceAddTType(builder, tType)

def TableSourceAddT(builder: flatbuffers.Builder, t: int):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(t), 0)

def AddT(builder: flatbuffers.Builder, t: int):
    TableSourceAddT(builder, t)

def TableSourceAddFields(builder: flatbuffers.Builder, fields: int):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(fields), 0)

def AddFields(builder: flatbuffers.Builder, fields: int):
    TableSourceAddFields(builder, fields)

def TableSourceStartFieldsVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartFieldsVector(builder, numElems: int) -> int:
    return TableSourceStartFieldsVector(builder, numElems)

def TableSourceAddFilter(builder: flatbuffers.Builder, filter: int):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(filter), 0)

def AddFilter(builder: flatbuffers.Builder, filter: int):
    TableSourceAddFilter(builder, filter)

def TableSourceAddOrderBy(builder: flatbuffers.Builder, orderBy: int):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(orderBy), 0)

def AddOrderBy(builder: flatbuffers.Builder, orderBy: int):
    TableSourceAddOrderBy(builder, orderBy)

def TableSourceStartOrderByVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartOrderByVector(builder, numElems: int) -> int:
    return TableSourceStartOrderByVector(builder, numElems)

def TableSourceAddGroupBy(builder: flatbuffers.Builder, groupBy: int):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(groupBy), 0)

def AddGroupBy(builder: flatbuffers.Builder, groupBy: int):
    TableSourceAddGroupBy(builder, groupBy)

def TableSourceStartGroupByVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartGroupByVector(builder, numElems: int) -> int:
    return TableSourceStartGroupByVector(builder, numElems)

def TableSourceEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return TableSourceEnd(builder)
