# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from .Expr import Expr
from typing import Optional
np = import_numpy()

class Function(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Function()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFunction(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Function
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Function
    def Fn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # Function
    def Parameters(self, j: int) -> Optional[Expr]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = Expr()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Function
    def ParametersLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Function
    def ParametersIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def FunctionStart(builder: flatbuffers.Builder):
    builder.StartObject(2)

def Start(builder: flatbuffers.Builder):
    FunctionStart(builder)

def FunctionAddFn(builder: flatbuffers.Builder, fn: int):
    builder.PrependInt16Slot(0, fn, 0)

def AddFn(builder: flatbuffers.Builder, fn: int):
    FunctionAddFn(builder, fn)

def FunctionAddParameters(builder: flatbuffers.Builder, parameters: int):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(parameters), 0)

def AddParameters(builder: flatbuffers.Builder, parameters: int):
    FunctionAddParameters(builder, parameters)

def FunctionStartParametersVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartParametersVector(builder, numElems: int) -> int:
    return FunctionStartParametersVector(builder, numElems)

def FunctionEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return FunctionEnd(builder)
