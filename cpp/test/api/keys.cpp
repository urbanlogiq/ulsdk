// Copyright (c), CommunityLogiq Software
// 
// THIS FILE IS AUTOGENERATED, DO NOT EDIT

#include "ulsdk/api/keys.h"

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
#endif
#include <arrow/record_batch.h>
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic pop
#endif

#include "test.h"

namespace keys {

ul::Result<ul::Void>
test_get_keys_1(ul::RequestContext &ctx) {
    const auto result = ::ul::api::keys::get_keys(
        ctx
    );

    if (std::holds_alternative<ul::Error>(result)) {
        const ul::Error error = std::get<ul::Error>(result);
        return ul::Result<ul::Void>(error);
    }

    return ul::Result<ul::Void>(ul::Void());
}

ApiTest test_get_keys_1_obj(test_get_keys_1, "keys::get_keys (1)", &idempotent_api_test_root);

ul::Result<ul::Void>
test_create_key(ul::RequestContext &ctx) {
    ::ul::api::keys::create_key(
        ctx
    );
    return ul::Void();
}

ApiTest test_create_key_obj(test_create_key, "keys::create_key", &link_only_api_test_root);

ul::Result<ul::Void>
test_update_key(ul::RequestContext &ctx) {
    ::ul::api::keys::update_key(
        ctx,
        ul::Uuid("00000000-0000-0000-0000-000000000000"),
        ::ul::api::keys::UpdateKey()
    );
    return ul::Void();
}

ApiTest test_update_key_obj(test_update_key, "keys::update_key", &link_only_api_test_root);

ul::Result<ul::Void>
test_get_key(ul::RequestContext &ctx) {
    ::ul::api::keys::get_key(
        ctx,
        ul::Uuid("00000000-0000-0000-0000-000000000000")
    );
    return ul::Void();
}

ApiTest test_get_key_obj(test_get_key, "keys::get_key", &link_only_api_test_root);

ul::Result<ul::Void>
test_delete_key(ul::RequestContext &ctx) {
    ::ul::api::keys::delete_key(
        ctx,
        ul::Uuid("00000000-0000-0000-0000-000000000000")
    );
    return ul::Void();
}

ApiTest test_delete_key_obj(test_delete_key, "keys::delete_key", &link_only_api_test_root);

} // namespace keys
