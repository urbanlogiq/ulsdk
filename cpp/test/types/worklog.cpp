// Copyright (c), CommunityLogiq Software
// 
// THIS FILE IS AUTOGENERATED, DO NOT EDIT

#include "ulsdk/types/worklog.h"

#include "test.h"

bool
test_byte_array() {
    ::ul::types::ByteArray t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::ByteArray deserialized = ::ul::types::ByteArray(bytes);
    return true;
}

TypeTest test_byte_array_obj(test_byte_array, "ByteArray");

bool
test_layout() {
    ::ul::types::Layout t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::Layout deserialized = ::ul::types::Layout(bytes);
    return true;
}

TypeTest test_layout_obj(test_layout, "Layout");

bool
test_parameter_flags() {
    ::ul::types::ParameterFlags t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::ParameterFlags deserialized = ::ul::types::ParameterFlags(bytes);
    return true;
}

TypeTest test_parameter_flags_obj(test_parameter_flags, "ParameterFlags");

bool
test_tile_data() {
    ::ul::types::TileData t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::TileData deserialized = ::ul::types::TileData(bytes);
    return true;
}

TypeTest test_tile_data_obj(test_tile_data, "TileData");

bool
test_tile_settings() {
    ::ul::types::TileSettings t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::TileSettings deserialized = ::ul::types::TileSettings(bytes);
    return true;
}

TypeTest test_tile_settings_obj(test_tile_settings, "TileSettings");

bool
test_user_settings() {
    ::ul::types::UserSettings t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::UserSettings deserialized = ::ul::types::UserSettings(bytes);
    return true;
}

TypeTest test_user_settings_obj(test_user_settings, "UserSettings");

bool
test_work_log() {
    ::ul::types::WorkLog t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::WorkLog deserialized = ::ul::types::WorkLog(bytes);
    return true;
}

TypeTest test_work_log_obj(test_work_log, "WorkLog");

bool
test_worklog_parameter() {
    ::ul::types::WorklogParameter t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::WorklogParameter deserialized = ::ul::types::WorklogParameter(bytes);
    return true;
}

TypeTest test_worklog_parameter_obj(test_worklog_parameter, "WorklogParameter");
