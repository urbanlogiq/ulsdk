// Copyright (c), CommunityLogiq Software
// 
// THIS FILE IS AUTOGENERATED, DO NOT EDIT

#include "ulsdk/types/reflection.h"

#include "test.h"

bool
test_reflection_enum() {
    ::ul::types::reflection::Enum t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::reflection::Enum deserialized = ::ul::types::reflection::Enum(bytes);
    return true;
}

TypeTest test_reflection_enum_obj(test_reflection_enum, "reflection.Enum");

bool
test_reflection_enum_val() {
    ::ul::types::reflection::EnumVal t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::reflection::EnumVal deserialized = ::ul::types::reflection::EnumVal(bytes);
    return true;
}

TypeTest test_reflection_enum_val_obj(test_reflection_enum_val, "reflection.EnumVal");

bool
test_reflection_field() {
    ::ul::types::reflection::Field t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::reflection::Field deserialized = ::ul::types::reflection::Field(bytes);
    return true;
}

TypeTest test_reflection_field_obj(test_reflection_field, "reflection.Field");

bool
test_reflection_key_value() {
    ::ul::types::reflection::KeyValue t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::reflection::KeyValue deserialized = ::ul::types::reflection::KeyValue(bytes);
    return true;
}

TypeTest test_reflection_key_value_obj(test_reflection_key_value, "reflection.KeyValue");

bool
test_reflection_object() {
    ::ul::types::reflection::Object t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::reflection::Object deserialized = ::ul::types::reflection::Object(bytes);
    return true;
}

TypeTest test_reflection_object_obj(test_reflection_object, "reflection.Object");

bool
test_reflection_rpc_call() {
    ::ul::types::reflection::RPCCall t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::reflection::RPCCall deserialized = ::ul::types::reflection::RPCCall(bytes);
    return true;
}

TypeTest test_reflection_rpc_call_obj(test_reflection_rpc_call, "reflection.RPCCall");

bool
test_reflection_schema() {
    ::ul::types::reflection::Schema t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::reflection::Schema deserialized = ::ul::types::reflection::Schema(bytes);
    return true;
}

TypeTest test_reflection_schema_obj(test_reflection_schema, "reflection.Schema");

bool
test_reflection_schema_file() {
    ::ul::types::reflection::SchemaFile t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::reflection::SchemaFile deserialized = ::ul::types::reflection::SchemaFile(bytes);
    return true;
}

TypeTest test_reflection_schema_file_obj(test_reflection_schema_file, "reflection.SchemaFile");

bool
test_reflection_service() {
    ::ul::types::reflection::Service t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::reflection::Service deserialized = ::ul::types::reflection::Service(bytes);
    return true;
}

TypeTest test_reflection_service_obj(test_reflection_service, "reflection.Service");

bool
test_reflection_type() {
    ::ul::types::reflection::Type t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::reflection::Type deserialized = ::ul::types::reflection::Type(bytes);
    return true;
}

TypeTest test_reflection_type_obj(test_reflection_type, "reflection.Type");
