// Copyright (c), CommunityLogiq Software
// 
// THIS FILE IS AUTOGENERATED, DO NOT EDIT

#include "ulsdk/types/data.h"

#include "test.h"

bool
test_attribute_pair() {
    ::ul::types::AttributePair t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::AttributePair deserialized = ::ul::types::AttributePair(bytes);
    return true;
}

TypeTest test_attribute_pair_obj(test_attribute_pair, "AttributePair");

bool
test_direction_and_road_name() {
    ::ul::types::DirectionAndRoadName t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::DirectionAndRoadName deserialized = ::ul::types::DirectionAndRoadName(bytes);
    return true;
}

TypeTest test_direction_and_road_name_obj(test_direction_and_road_name, "DirectionAndRoadName");

bool
test_direction_and_road_names() {
    ::ul::types::DirectionAndRoadNames t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::DirectionAndRoadNames deserialized = ::ul::types::DirectionAndRoadNames(bytes);
    return true;
}

TypeTest test_direction_and_road_names_obj(test_direction_and_road_names, "DirectionAndRoadNames");

bool
test_named_parameter() {
    ::ul::types::NamedParameter t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::NamedParameter deserialized = ::ul::types::NamedParameter(bytes);
    return true;
}

TypeTest test_named_parameter_obj(test_named_parameter, "NamedParameter");

bool
test_source() {
    ::ul::types::Source t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::Source deserialized = ::ul::types::Source(bytes);
    return true;
}

TypeTest test_source_obj(test_source, "Source");
