// Copyright (c), CommunityLogiq Software
// 
// THIS FILE IS AUTOGENERATED, DO NOT EDIT

#include "ulsdk/types/entity.h"

#include "test.h"

bool
test_graph_edge() {
    ::ul::types::GraphEdge t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::GraphEdge deserialized = ::ul::types::GraphEdge(bytes);
    return true;
}

TypeTest test_graph_edge_obj(test_graph_edge, "GraphEdge");

bool
test_graph_node() {
    ::ul::types::GraphNode t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::GraphNode deserialized = ::ul::types::GraphNode(bytes);
    return true;
}

TypeTest test_graph_node_obj(test_graph_node, "GraphNode");

bool
test_line() {
    ::ul::types::Line t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::Line deserialized = ::ul::types::Line(bytes);
    return true;
}

TypeTest test_line_obj(test_line, "Line");

bool
test_multi_line() {
    ::ul::types::MultiLine t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::MultiLine deserialized = ::ul::types::MultiLine(bytes);
    return true;
}

TypeTest test_multi_line_obj(test_multi_line, "MultiLine");

bool
test_multi_polygon() {
    ::ul::types::MultiPolygon t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::MultiPolygon deserialized = ::ul::types::MultiPolygon(bytes);
    return true;
}

TypeTest test_multi_polygon_obj(test_multi_polygon, "MultiPolygon");

bool
test_point() {
    ::ul::types::Point t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::Point deserialized = ::ul::types::Point(bytes);
    return true;
}

TypeTest test_point_obj(test_point, "Point");

bool
test_polygon() {
    ::ul::types::Polygon t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::Polygon deserialized = ::ul::types::Polygon(bytes);
    return true;
}

TypeTest test_polygon_obj(test_polygon, "Polygon");
