// Copyright (c), CommunityLogiq Software
// 
// THIS FILE IS AUTOGENERATED, DO NOT EDIT

#include "ulsdk/types/table.h"

#include "test.h"

bool
test_change_op_entry() {
    ::ul::types::ChangeOpEntry t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::ChangeOpEntry deserialized = ::ul::types::ChangeOpEntry(bytes);
    return true;
}

TypeTest test_change_op_entry_obj(test_change_op_entry, "ChangeOpEntry");

bool
test_change_set() {
    ::ul::types::ChangeSet t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::ChangeSet deserialized = ::ul::types::ChangeSet(bytes);
    return true;
}

TypeTest test_change_set_obj(test_change_set, "ChangeSet");

bool
test_delete() {
    ::ul::types::Delete t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::Delete deserialized = ::ul::types::Delete(bytes);
    return true;
}

TypeTest test_delete_obj(test_delete, "Delete");

bool
test_diff_stream() {
    ::ul::types::DiffStream t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::DiffStream deserialized = ::ul::types::DiffStream(bytes);
    return true;
}

TypeTest test_diff_stream_obj(test_diff_stream, "DiffStream");

bool
test_history() {
    ::ul::types::History t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::History deserialized = ::ul::types::History(bytes);
    return true;
}

TypeTest test_history_obj(test_history, "History");

bool
test_modify() {
    ::ul::types::Modify t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::Modify deserialized = ::ul::types::Modify(bytes);
    return true;
}

TypeTest test_modify_obj(test_modify, "Modify");

bool
test_new_table() {
    ::ul::types::NewTable t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::NewTable deserialized = ::ul::types::NewTable(bytes);
    return true;
}

TypeTest test_new_table_obj(test_new_table, "NewTable");

bool
test_op_entry() {
    ::ul::types::OpEntry t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::OpEntry deserialized = ::ul::types::OpEntry(bytes);
    return true;
}

TypeTest test_op_entry_obj(test_op_entry, "OpEntry");

bool
test_restore() {
    ::ul::types::Restore t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::Restore deserialized = ::ul::types::Restore(bytes);
    return true;
}

TypeTest test_restore_obj(test_restore, "Restore");

bool
test_restore_row() {
    ::ul::types::RestoreRow t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::RestoreRow deserialized = ::ul::types::RestoreRow(bytes);
    return true;
}

TypeTest test_restore_row_obj(test_restore_row, "RestoreRow");

bool
test_rm_row() {
    ::ul::types::RmRow t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::RmRow deserialized = ::ul::types::RmRow(bytes);
    return true;
}

TypeTest test_rm_row_obj(test_rm_row, "RmRow");

bool
test_set() {
    ::ul::types::Set t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::Set deserialized = ::ul::types::Set(bytes);
    return true;
}

TypeTest test_set_obj(test_set, "Set");
