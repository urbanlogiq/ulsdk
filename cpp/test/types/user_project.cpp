// Copyright (c), CommunityLogiq Software
// 
// THIS FILE IS AUTOGENERATED, DO NOT EDIT

#include "ulsdk/types/user_project.h"

#include "test.h"

bool
test_category_filter() {
    ::ul::types::CategoryFilter t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::CategoryFilter deserialized = ::ul::types::CategoryFilter(bytes);
    return true;
}

TypeTest test_category_filter_obj(test_category_filter, "CategoryFilter");

bool
test_column_group() {
    ::ul::types::ColumnGroup t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::ColumnGroup deserialized = ::ul::types::ColumnGroup(bytes);
    return true;
}

TypeTest test_column_group_obj(test_column_group, "ColumnGroup");

bool
test_data_state_geometry_source() {
    ::ul::types::DataStateGeometrySource t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::DataStateGeometrySource deserialized = ::ul::types::DataStateGeometrySource(bytes);
    return true;
}

TypeTest test_data_state_geometry_source_obj(test_data_state_geometry_source, "DataStateGeometrySource");

bool
test_deprecated_data_state_join() {
    ::ul::types::DeprecatedDataStateJoin t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::DeprecatedDataStateJoin deserialized = ::ul::types::DeprecatedDataStateJoin(bytes);
    return true;
}

TypeTest test_deprecated_data_state_join_obj(test_deprecated_data_state_join, "DeprecatedDataStateJoin");

bool
test_field_filter() {
    ::ul::types::FieldFilter t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::FieldFilter deserialized = ::ul::types::FieldFilter(bytes);
    return true;
}

TypeTest test_field_filter_obj(test_field_filter, "FieldFilter");

bool
test_join_stack_entry() {
    ::ul::types::JoinStackEntry t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::JoinStackEntry deserialized = ::ul::types::JoinStackEntry(bytes);
    return true;
}

TypeTest test_join_stack_entry_obj(test_join_stack_entry, "JoinStackEntry");

bool
test_range_filter() {
    ::ul::types::RangeFilter t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::RangeFilter deserialized = ::ul::types::RangeFilter(bytes);
    return true;
}

TypeTest test_range_filter_obj(test_range_filter, "RangeFilter");

bool
test_raw_geometry_source() {
    ::ul::types::RawGeometrySource t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::RawGeometrySource deserialized = ::ul::types::RawGeometrySource(bytes);
    return true;
}

TypeTest test_raw_geometry_source_obj(test_raw_geometry_source, "RawGeometrySource");

bool
test_raw_geometry_source_geom() {
    ::ul::types::RawGeometrySourceGeom t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::RawGeometrySourceGeom deserialized = ::ul::types::RawGeometrySourceGeom(bytes);
    return true;
}

TypeTest test_raw_geometry_source_geom_obj(test_raw_geometry_source_geom, "RawGeometrySourceGeom");

bool
test_relationship_range_filter() {
    ::ul::types::RelationshipRangeFilter t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::RelationshipRangeFilter deserialized = ::ul::types::RelationshipRangeFilter(bytes);
    return true;
}

TypeTest test_relationship_range_filter_obj(test_relationship_range_filter, "RelationshipRangeFilter");

bool
test_stackable_data_state_join() {
    ::ul::types::StackableDataStateJoin t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::StackableDataStateJoin deserialized = ::ul::types::StackableDataStateJoin(bytes);
    return true;
}

TypeTest test_stackable_data_state_join_obj(test_stackable_data_state_join, "StackableDataStateJoin");

bool
test_user_layer() {
    ::ul::types::UserLayer t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::UserLayer deserialized = ::ul::types::UserLayer(bytes);
    return true;
}

TypeTest test_user_layer_obj(test_user_layer, "UserLayer");

bool
test_user_layer_data_state() {
    ::ul::types::UserLayerDataState t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::UserLayerDataState deserialized = ::ul::types::UserLayerDataState(bytes);
    return true;
}

TypeTest test_user_layer_data_state_obj(test_user_layer_data_state, "UserLayerDataState");

bool
test_user_project() {
    ::ul::types::UserProject t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::UserProject deserialized = ::ul::types::UserProject(bytes);
    return true;
}

TypeTest test_user_project_obj(test_user_project, "UserProject");
