// Copyright (c), CommunityLogiq Software
// 
// THIS FILE IS AUTOGENERATED, DO NOT EDIT

#include "ulsdk/types/fs.h"

#include "test.h"

bool
test_attr() {
    ::ul::types::Attr t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::Attr deserialized = ::ul::types::Attr(bytes);
    return true;
}

TypeTest test_attr_obj(test_attr, "Attr");

bool
test_chunk() {
    ::ul::types::Chunk t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::Chunk deserialized = ::ul::types::Chunk(bytes);
    return true;
}

TypeTest test_chunk_obj(test_chunk, "Chunk");

bool
test_directory() {
    ::ul::types::Directory t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::Directory deserialized = ::ul::types::Directory(bytes);
    return true;
}

TypeTest test_directory_obj(test_directory, "Directory");

bool
test_directory_entry() {
    ::ul::types::DirectoryEntry t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::DirectoryEntry deserialized = ::ul::types::DirectoryEntry(bytes);
    return true;
}

TypeTest test_directory_entry_obj(test_directory_entry, "DirectoryEntry");

bool
test_directory_list() {
    ::ul::types::DirectoryList t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::DirectoryList deserialized = ::ul::types::DirectoryList(bytes);
    return true;
}

TypeTest test_directory_list_obj(test_directory_list, "DirectoryList");

bool
test_file() {
    ::ul::types::File t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::File deserialized = ::ul::types::File(bytes);
    return true;
}

TypeTest test_file_obj(test_file, "File");

bool
test_list_directory() {
    ::ul::types::ListDirectory t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::ListDirectory deserialized = ::ul::types::ListDirectory(bytes);
    return true;
}

TypeTest test_list_directory_obj(test_list_directory, "ListDirectory");

bool
test_list_file() {
    ::ul::types::ListFile t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::ListFile deserialized = ::ul::types::ListFile(bytes);
    return true;
}

TypeTest test_list_file_obj(test_list_file, "ListFile");

bool
test_list_object() {
    ::ul::types::ListObject t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::ListObject deserialized = ::ul::types::ListObject(bytes);
    return true;
}

TypeTest test_list_object_obj(test_list_object, "ListObject");

bool
test_list_slot() {
    ::ul::types::ListSlot t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::ListSlot deserialized = ::ul::types::ListSlot(bytes);
    return true;
}

TypeTest test_list_slot_obj(test_list_slot, "ListSlot");

bool
test_move_request() {
    ::ul::types::MoveRequest t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::MoveRequest deserialized = ::ul::types::MoveRequest(bytes);
    return true;
}

TypeTest test_move_request_obj(test_move_request, "MoveRequest");

bool
test_new_link() {
    ::ul::types::NewLink t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::NewLink deserialized = ::ul::types::NewLink(bytes);
    return true;
}

TypeTest test_new_link_obj(test_new_link, "NewLink");

bool
test_object_ref() {
    ::ul::types::ObjectRef t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::ObjectRef deserialized = ::ul::types::ObjectRef(bytes);
    return true;
}

TypeTest test_object_ref_obj(test_object_ref, "ObjectRef");

bool
test_slot() {
    ::ul::types::Slot t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::Slot deserialized = ::ul::types::Slot(bytes);
    return true;
}

TypeTest test_slot_obj(test_slot, "Slot");

bool
test_top_level_directory() {
    ::ul::types::TopLevelDirectory t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::TopLevelDirectory deserialized = ::ul::types::TopLevelDirectory(bytes);
    return true;
}

TypeTest test_top_level_directory_obj(test_top_level_directory, "TopLevelDirectory");
