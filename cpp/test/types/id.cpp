// Copyright (c), CommunityLogiq Software
// 
// THIS FILE IS AUTOGENERATED, DO NOT EDIT

#include "ulsdk/types/id.h"

#include "test.h"

bool
test_b_2c_id() {
    ::ul::types::B2cId t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::B2cId deserialized = ::ul::types::B2cId(bytes);
    return true;
}

TypeTest test_b_2c_id_obj(test_b_2c_id, "B2cId");

bool
test_column_group_id() {
    ::ul::types::ColumnGroupId t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::ColumnGroupId deserialized = ::ul::types::ColumnGroupId(bytes);
    return true;
}

TypeTest test_column_group_id_obj(test_column_group_id, "ColumnGroupId");

bool
test_content_id() {
    ::ul::types::ContentId t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::ContentId deserialized = ::ul::types::ContentId(bytes);
    return true;
}

TypeTest test_content_id_obj(test_content_id, "ContentId");

bool
test_data_state_id() {
    ::ul::types::DataStateId t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::DataStateId deserialized = ::ul::types::DataStateId(bytes);
    return true;
}

TypeTest test_data_state_id_obj(test_data_state_id, "DataStateId");

bool
test_generic_id() {
    ::ul::types::GenericId t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::GenericId deserialized = ::ul::types::GenericId(bytes);
    return true;
}

TypeTest test_generic_id_obj(test_generic_id, "GenericId");

bool
test_graph_node_id() {
    ::ul::types::GraphNodeId t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::GraphNodeId deserialized = ::ul::types::GraphNodeId(bytes);
    return true;
}

TypeTest test_graph_node_id_obj(test_graph_node_id, "GraphNodeId");

bool
test_object_id() {
    ::ul::types::ObjectId t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::ObjectId deserialized = ::ul::types::ObjectId(bytes);
    return true;
}

TypeTest test_object_id_obj(test_object_id, "ObjectId");

bool
test_stream_id() {
    ::ul::types::StreamId t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::StreamId deserialized = ::ul::types::StreamId(bytes);
    return true;
}

TypeTest test_stream_id_obj(test_stream_id, "StreamId");
