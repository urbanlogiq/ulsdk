// Copyright (c), CommunityLogiq Software
// 
// THIS FILE IS AUTOGENERATED, DO NOT EDIT

#include "ulsdk/types/graph.h"

#include "test.h"

bool
test_edge_list() {
    ::ul::types::EdgeList t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::EdgeList deserialized = ::ul::types::EdgeList(bytes);
    return true;
}

TypeTest test_edge_list_obj(test_edge_list, "EdgeList");

bool
test_edge_query() {
    ::ul::types::EdgeQuery t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::EdgeQuery deserialized = ::ul::types::EdgeQuery(bytes);
    return true;
}

TypeTest test_edge_query_obj(test_edge_query, "EdgeQuery");

bool
test_geom() {
    ::ul::types::Geom t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::Geom deserialized = ::ul::types::Geom(bytes);
    return true;
}

TypeTest test_geom_obj(test_geom, "Geom");

bool
test_geom_op() {
    ::ul::types::GeomOp t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::GeomOp deserialized = ::ul::types::GeomOp(bytes);
    return true;
}

TypeTest test_geom_op_obj(test_geom_op, "GeomOp");

bool
test_graph_query() {
    ::ul::types::GraphQuery t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::GraphQuery deserialized = ::ul::types::GraphQuery(bytes);
    return true;
}

TypeTest test_graph_query_obj(test_graph_query, "GraphQuery");

bool
test_node_id_pair() {
    ::ul::types::NodeIdPair t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::NodeIdPair deserialized = ::ul::types::NodeIdPair(bytes);
    return true;
}

TypeTest test_node_id_pair_obj(test_node_id_pair, "NodeIdPair");

bool
test_node_list() {
    ::ul::types::NodeList t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::NodeList deserialized = ::ul::types::NodeList(bytes);
    return true;
}

TypeTest test_node_list_obj(test_node_list, "NodeList");

bool
test_node_query() {
    ::ul::types::NodeQuery t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::NodeQuery deserialized = ::ul::types::NodeQuery(bytes);
    return true;
}

TypeTest test_node_query_obj(test_node_query, "NodeQuery");

bool
test_order_by() {
    ::ul::types::OrderBy t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::OrderBy deserialized = ::ul::types::OrderBy(bytes);
    return true;
}

TypeTest test_order_by_obj(test_order_by, "OrderBy");

bool
test_projection() {
    ::ul::types::Projection t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::Projection deserialized = ::ul::types::Projection(bytes);
    return true;
}

TypeTest test_projection_obj(test_projection, "Projection");

bool
test_query_path_element() {
    ::ul::types::QueryPathElement t;
    const std::vector<uint8_t> bytes = ::ul::types::to_bytes(t);
    ::ul::types::QueryPathElement deserialized = ::ul::types::QueryPathElement(bytes);
    return true;
}

TypeTest test_query_path_element_obj(test_query_path_element, "QueryPathElement");
