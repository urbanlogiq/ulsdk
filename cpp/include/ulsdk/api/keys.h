// Copyright (c), CommunityLogiq Software
// 
// THIS FILE IS AUTOGENERATED, DO NOT EDIT

#pragma once

#include <optional>

#include "ulsdk/external/json.h"
#include "ulsdk/request_context.h"
#include "ulsdk/ulsdk.h"

struct json_value_s;


namespace ul {
namespace api {
namespace keys {

struct Key {
    std::string id_;
    std::optional<std::string> pubkey_;
    int64_t created_;
    std::optional<int64_t> last_;
    std::optional<int64_t> expiry_;
    std::optional<std::string> comment_;

    Key() = default;
    Key(const struct json_value_s *root);
};

std::vector<uint8_t>
to_bytes(const Key &o);

struct GetKeys {
    std::vector<Key> keys_;

    GetKeys() = default;
    GetKeys(const struct json_value_s *root);
};

std::vector<uint8_t>
to_bytes(const GetKeys &o);

struct CreateKey {
    std::string id_;
    std::string secret_key_;

    CreateKey() = default;
    CreateKey(const struct json_value_s *root);
};

std::vector<uint8_t>
to_bytes(const CreateKey &o);

struct UpdateKey {
    std::optional<std::string> comment_;
    std::optional<int64_t> expiry_;

    UpdateKey() = default;
    UpdateKey(const struct json_value_s *root);
};

std::vector<uint8_t>
to_bytes(const UpdateKey &o);

/**
 * Retrieves a listing of the API keys associated with the current user.
 * @return A list of all the API keys currently associated with the current user
 */
Result<GetKeys>
get_keys(
    ul::RequestContext &ctx
);

/**
 * Creates a new API key for the current user.
 * @return The details of the created key, including the secret key. This secret key cannot be retrieved again, if it is lost a new key must be created.
 */
Result<CreateKey>
create_key(
    ul::RequestContext &ctx
);

/**
 * Updates an API key by id.
 * @param id The ID of the key to update.
 * @param update_key The details with which to update the key.
 */
Result<Void>
update_key(
    ul::RequestContext &ctx,
    const Uuid &id,
    const UpdateKey &update_key
);

/**
 * Retrieves an API key by id.
 * @param id The ID of the key to retrieve.
 * @return The key details. Note that the secret key is not stored and cannot be retrieved with this API.
 */
Result<Key>
get_key(
    ul::RequestContext &ctx,
    const Uuid &id
);

/**
 * Deletes an API key by id.
 * @param id The ID of the key to delete
 */
Result<Void>
delete_key(
    ul::RequestContext &ctx,
    const Uuid &id
);

} // namespace keys
} // namespace api
} // namespace ul
