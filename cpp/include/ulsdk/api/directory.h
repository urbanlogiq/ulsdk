// Copyright (c), CommunityLogiq Software
// 
// THIS FILE IS AUTOGENERATED, DO NOT EDIT

#pragma once

#include <optional>

#include "ulsdk/external/json.h"
#include "ulsdk/request_context.h"
#include "ulsdk/ulsdk.h"

struct json_value_s;


namespace ul {
namespace api {
namespace directory {

struct Principal {
    std::string principal_type_;
    std::string display_name_;
    std::string id_;
    std::optional<std::vector<std::string>> email_;
    std::optional<std::string> description_;
    std::optional<std::string> department_;

    Principal() = default;
    Principal(const struct json_value_s *root);
};

std::vector<uint8_t>
to_bytes(const Principal &o);

struct AdUser {
    std::string display_name_;
    std::string id_;
    std::string user_principal_name_;
    std::vector<std::string> other_mails_;
    std::string department_;
    std::string created_date_time_;

    AdUser() = default;
    AdUser(const struct json_value_s *root);
};

std::vector<uint8_t>
to_bytes(const AdUser &o);

struct DisplayNames {
    std::string display_name_;
    std::string id_;

    DisplayNames() = default;
    DisplayNames(const struct json_value_s *root);
};

std::vector<uint8_t>
to_bytes(const DisplayNames &o);

struct DeviceDetail {
    std::optional<std::string> device_id_;
    std::optional<std::string> operating_system_;
    std::optional<std::string> browser_;
    std::optional<bool> is_compliant_;
    std::optional<bool> is_managed_;
    std::optional<std::string> trust_type_;

    DeviceDetail() = default;
    DeviceDetail(const struct json_value_s *root);
};

std::vector<uint8_t>
to_bytes(const DeviceDetail &o);

struct Coordinates {
    std::optional<double> latitude_;
    std::optional<double> longitude_;
    std::optional<double> altitude_;

    Coordinates() = default;
    Coordinates(const struct json_value_s *root);
};

std::vector<uint8_t>
to_bytes(const Coordinates &o);

struct Location {
    std::optional<std::string> city_;
    std::optional<std::string> state_;
    std::optional<std::string> country_or_region_;
    std::optional<Coordinates> geo_coordinates_;

    Location() = default;
    Location(const struct json_value_s *root);
};

std::vector<uint8_t>
to_bytes(const Location &o);

struct AuditLogEntry {
    std::optional<std::string> id_;
    std::optional<std::string> user_principal_name_;
    std::optional<std::string> user_id_;
    std::optional<std::string> created_date_time_;
    std::optional<std::string> ip_address_;
    std::optional<DeviceDetail> device_detail_;
    std::optional<Location> location_;

    AuditLogEntry() = default;
    AuditLogEntry(const struct json_value_s *root);
};

std::vector<uint8_t>
to_bytes(const AuditLogEntry &o);

struct AuditLog {
    std::vector<std::vector<AuditLogEntry>> value_;

    AuditLog() = default;
    AuditLog(const struct json_value_s *root);
};

std::vector<uint8_t>
to_bytes(const AuditLog &o);

struct AdUserWithAuditLog {
    std::string display_name_;
    std::string id_;
    std::string user_principal_name_;
    std::vector<std::string> other_mails_;
    std::string department_;
    std::string created_date_time_;
    std::optional<AuditLog> audit_log_;

    AdUserWithAuditLog() = default;
    AdUserWithAuditLog(const struct json_value_s *root);
};

std::vector<uint8_t>
to_bytes(const AdUserWithAuditLog &o);

struct CreateUser {
    AdUser user_;
    std::string password_;

    CreateUser() = default;
    CreateUser(const struct json_value_s *root);
};

std::vector<uint8_t>
to_bytes(const CreateUser &o);

struct UpdateCurrentUser {
    std::optional<std::string> display_name_;
    std::optional<std::vector<std::string>> other_mails_;

    UpdateCurrentUser() = default;
    UpdateCurrentUser(const struct json_value_s *root);
};

std::vector<uint8_t>
to_bytes(const UpdateCurrentUser &o);

struct UpdateUser {
    std::optional<std::string> display_name_;
    std::optional<std::vector<std::string>> other_mails_;

    UpdateUser() = default;
    UpdateUser(const struct json_value_s *root);
};

std::vector<uint8_t>
to_bytes(const UpdateUser &o);

struct AdGroup {
    std::string id_;
    std::string display_name_;
    std::optional<std::string> description_;

    AdGroup() = default;
    AdGroup(const struct json_value_s *root);
};

std::vector<uint8_t>
to_bytes(const AdGroup &o);

struct CreateGroup {
    std::string display_name_;
    std::optional<std::string> description_;

    CreateGroup() = default;
    CreateGroup(const struct json_value_s *root);
};

std::vector<uint8_t>
to_bytes(const CreateGroup &o);

struct GroupMembership {
    std::string id_;
    std::string object_type_;
    std::string display_name_;
    std::optional<std::vector<std::string>> other_mails_;
    std::optional<std::string> department_;
    std::optional<std::string> created_date_time_;

    GroupMembership() = default;
    GroupMembership(const struct json_value_s *root);
};

std::vector<uint8_t>
to_bytes(const GroupMembership &o);

/**
 * Retrieves a single principal by id.
 * @param id 
 * @return 
 */
Result<Principal>
get_principal(
    ul::RequestContext &ctx,
    const Uuid &id
);

/**
 * Retrieves a list of principals specified by a comma-separated list of ids.
 * @param ids 
 * @return 
 */
Result<std::vector<Principal>>
get_principals(
    ul::RequestContext &ctx,
    const std::string &ids
);

/**
 * Queries for principals. The query is performed as a substring match against the following fields:
                For users:
                - displayName
                - id
                - otherMails
                For groups:
                - displayName
                - id
                - description
 * @param query 
 * @return 
 */
Result<std::vector<Principal>>
query_principals(
    ul::RequestContext &ctx,
    const std::string &query
);

/**
 * Retrieves details of all users in the directory that are visible to the current user.
 * @return 
 */
Result<std::vector<AdUser>>
get_users(
    ul::RequestContext &ctx
);

/**
 * Retrieves the id and display name of every user in the directory.
 * @return 
 */
Result<std::vector<DisplayNames>>
get_users_display_names(
    ul::RequestContext &ctx
);

/**
 * Retrieves details of the current user.
 * @param audit_log Whether to include the user's audit log in the response.
 * @return 
 */
Result<AdUserWithAuditLog>
get_current_user(
    ul::RequestContext &ctx,
    std::optional<bool> audit_log
);

/**
 * Creates a new user in the directory.
 * @return 
 */
Result<CreateUser>
create_user(
    ul::RequestContext &ctx
);

/**
 * Updates the current user.
 * @param update_user_request 
 */
Result<Void>
update_current_user(
    ul::RequestContext &ctx,
    const UpdateCurrentUser &update_user_request
);

/**
 * Retrieves details of a user by id.
 * @param id 
 * @param audit_log Whether to include the user's audit log in the response.
 * @return 
 */
Result<AdUserWithAuditLog>
get_user(
    ul::RequestContext &ctx,
    const Uuid &id,
    std::optional<bool> audit_log
);

/**
 * Updates a user by id.
 * @param id 
 * @param update_user_request 
 */
Result<Void>
update_user(
    ul::RequestContext &ctx,
    const Uuid &id,
    const UpdateUser &update_user_request
);

/**
 * Deletes a user by id.
 * @param id 
 */
Result<Void>
delete_user(
    ul::RequestContext &ctx,
    const Uuid &id
);

/**
 * Retrieves a listing of all groups in the directory.
 * @return 
 */
Result<std::vector<AdGroup>>
get_groups(
    ul::RequestContext &ctx
);

/**
 * Creates a new group in the directory.
 * @param create_group_request 
 * @return 
 */
Result<AdGroup>
create_group(
    ul::RequestContext &ctx,
    const CreateGroup &create_group_request
);

/**
 * Retrieves a listing of all members of a group by group id.
 * @param id 
 * @return 
 */
Result<std::vector<GroupMembership>>
get_group_members(
    ul::RequestContext &ctx,
    const Uuid &id
);

/**
 * Deletes a group by id.
 * @param id 
 */
Result<Void>
delete_group(
    ul::RequestContext &ctx,
    const Uuid &id
);

/**
 * Adds a member to a group.
 * @param group 
 * @param member 
 */
Result<Void>
add_group_member(
    ul::RequestContext &ctx,
    const Uuid &group,
    const Uuid &member
);

/**
 * Removes a member from a group.
 * @param group 
 * @param member 
 */
Result<Void>
remove_group_member(
    ul::RequestContext &ctx,
    const Uuid &group,
    const Uuid &member
);

} // namespace directory
} // namespace api
} // namespace ul
