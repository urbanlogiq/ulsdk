// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_USERPREFERENCES_H_
#define FLATBUFFERS_GENERATED_USERPREFERENCES_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

#include "entity_generated.h"
#include "id_generated.h"
#include "usecase_generated.h"

struct UserPreferences;
struct UserPreferencesBuilder;

enum class Units : uint32_t {
  Invalid = 0,
  Metric = 1,
  Imperial = 2,
  MIN = Invalid,
  MAX = Imperial
};

inline const Units (&EnumValuesUnits())[3] {
  static const Units values[] = {
    Units::Invalid,
    Units::Metric,
    Units::Imperial
  };
  return values;
}

inline const char * const *EnumNamesUnits() {
  static const char * const names[4] = {
    "Invalid",
    "Metric",
    "Imperial",
    nullptr
  };
  return names;
}

inline const char *EnumNameUnits(Units e) {
  if (::flatbuffers::IsOutRange(e, Units::Invalid, Units::Imperial)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesUnits()[index];
}

struct UserPreferences FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UserPreferencesBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UNITS = 4,
    VT_HOMEPAGE_USECASE_ID = 6,
    VT_TIMEZONE = 8,
    VT_CENTER = 10,
    VT_ZOOM = 12,
    VT_DEFAULTAREAREPORTTEMPLATE = 14
  };
  Units units() const {
    return static_cast<Units>(GetField<uint32_t>(VT_UNITS, 0));
  }
  const ObjectId *homepage_usecase_id() const {
    return GetPointer<const ObjectId *>(VT_HOMEPAGE_USECASE_ID);
  }
  const ::flatbuffers::String *timezone() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TIMEZONE);
  }
  const Point *center() const {
    return GetPointer<const Point *>(VT_CENTER);
  }
  float zoom() const {
    return GetField<float>(VT_ZOOM, 0.0f);
  }
  const ObjectId *defaultAreaReportTemplate() const {
    return GetPointer<const ObjectId *>(VT_DEFAULTAREAREPORTTEMPLATE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_UNITS, 4) &&
           VerifyOffset(verifier, VT_HOMEPAGE_USECASE_ID) &&
           verifier.VerifyTable(homepage_usecase_id()) &&
           VerifyOffset(verifier, VT_TIMEZONE) &&
           verifier.VerifyString(timezone()) &&
           VerifyOffset(verifier, VT_CENTER) &&
           verifier.VerifyTable(center()) &&
           VerifyField<float>(verifier, VT_ZOOM, 4) &&
           VerifyOffset(verifier, VT_DEFAULTAREAREPORTTEMPLATE) &&
           verifier.VerifyTable(defaultAreaReportTemplate()) &&
           verifier.EndTable();
  }
};

struct UserPreferencesBuilder {
  typedef UserPreferences Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_units(Units units) {
    fbb_.AddElement<uint32_t>(UserPreferences::VT_UNITS, static_cast<uint32_t>(units), 0);
  }
  void add_homepage_usecase_id(::flatbuffers::Offset<ObjectId> homepage_usecase_id) {
    fbb_.AddOffset(UserPreferences::VT_HOMEPAGE_USECASE_ID, homepage_usecase_id);
  }
  void add_timezone(::flatbuffers::Offset<::flatbuffers::String> timezone) {
    fbb_.AddOffset(UserPreferences::VT_TIMEZONE, timezone);
  }
  void add_center(::flatbuffers::Offset<Point> center) {
    fbb_.AddOffset(UserPreferences::VT_CENTER, center);
  }
  void add_zoom(float zoom) {
    fbb_.AddElement<float>(UserPreferences::VT_ZOOM, zoom, 0.0f);
  }
  void add_defaultAreaReportTemplate(::flatbuffers::Offset<ObjectId> defaultAreaReportTemplate) {
    fbb_.AddOffset(UserPreferences::VT_DEFAULTAREAREPORTTEMPLATE, defaultAreaReportTemplate);
  }
  explicit UserPreferencesBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<UserPreferences> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UserPreferences>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<UserPreferences> CreateUserPreferences(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Units units = Units::Invalid,
    ::flatbuffers::Offset<ObjectId> homepage_usecase_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> timezone = 0,
    ::flatbuffers::Offset<Point> center = 0,
    float zoom = 0.0f,
    ::flatbuffers::Offset<ObjectId> defaultAreaReportTemplate = 0) {
  UserPreferencesBuilder builder_(_fbb);
  builder_.add_defaultAreaReportTemplate(defaultAreaReportTemplate);
  builder_.add_zoom(zoom);
  builder_.add_center(center);
  builder_.add_timezone(timezone);
  builder_.add_homepage_usecase_id(homepage_usecase_id);
  builder_.add_units(units);
  return builder_.Finish();
}

struct UserPreferences::Traits {
  using type = UserPreferences;
  static auto constexpr Create = CreateUserPreferences;
};

inline ::flatbuffers::Offset<UserPreferences> CreateUserPreferencesDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Units units = Units::Invalid,
    ::flatbuffers::Offset<ObjectId> homepage_usecase_id = 0,
    const char *timezone = nullptr,
    ::flatbuffers::Offset<Point> center = 0,
    float zoom = 0.0f,
    ::flatbuffers::Offset<ObjectId> defaultAreaReportTemplate = 0) {
  auto timezone__ = timezone ? _fbb.CreateString(timezone) : 0;
  return CreateUserPreferences(
      _fbb,
      units,
      homepage_usecase_id,
      timezone__,
      center,
      zoom,
      defaultAreaReportTemplate);
}

inline const UserPreferences *GetUserPreferences(const void *buf) {
  return ::flatbuffers::GetRoot<UserPreferences>(buf);
}

inline const UserPreferences *GetSizePrefixedUserPreferences(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<UserPreferences>(buf);
}

inline bool VerifyUserPreferencesBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<UserPreferences>(nullptr);
}

inline bool VerifySizePrefixedUserPreferencesBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<UserPreferences>(nullptr);
}

inline void FinishUserPreferencesBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<UserPreferences> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedUserPreferencesBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<UserPreferences> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_USERPREFERENCES_H_
