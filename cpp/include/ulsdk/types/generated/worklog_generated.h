// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WORKLOG_H_
#define FLATBUFFERS_GENERATED_WORKLOG_H_

#include "flatbuffers/flatbuffers.h"
#include "flatbuffers/flexbuffers.h"
#include "flatbuffers/flex_flat_util.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

#include "data_generated.h"
#include "id_generated.h"
#include "job_generated.h"

struct ByteArray;
struct ByteArrayBuilder;

struct ParameterFlags;
struct ParameterFlagsBuilder;

struct WorklogParameter;
struct WorklogParameterBuilder;

struct WorkLog;
struct WorkLogBuilder;

struct UserSettings;
struct UserSettingsBuilder;

struct TileData;
struct TileDataBuilder;

struct Layout;
struct LayoutBuilder;

struct TileSettings;
struct TileSettingsBuilder;

enum class ParameterValue : uint8_t {
  NONE = 0,
  ByteArray = 1,
  ObjectId = 2,
  ParameterFlags = 3,
  ValueInstance = 4,
  MIN = NONE,
  MAX = ValueInstance
};

inline const ParameterValue (&EnumValuesParameterValue())[5] {
  static const ParameterValue values[] = {
    ParameterValue::NONE,
    ParameterValue::ByteArray,
    ParameterValue::ObjectId,
    ParameterValue::ParameterFlags,
    ParameterValue::ValueInstance
  };
  return values;
}

inline const char * const *EnumNamesParameterValue() {
  static const char * const names[6] = {
    "NONE",
    "ByteArray",
    "ObjectId",
    "ParameterFlags",
    "ValueInstance",
    nullptr
  };
  return names;
}

inline const char *EnumNameParameterValue(ParameterValue e) {
  if (::flatbuffers::IsOutRange(e, ParameterValue::NONE, ParameterValue::ValueInstance)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesParameterValue()[index];
}

template<typename T> struct ParameterValueTraits {
  static const ParameterValue enum_value = ParameterValue::NONE;
};

template<> struct ParameterValueTraits<ByteArray> {
  static const ParameterValue enum_value = ParameterValue::ByteArray;
};

template<> struct ParameterValueTraits<ObjectId> {
  static const ParameterValue enum_value = ParameterValue::ObjectId;
};

template<> struct ParameterValueTraits<ParameterFlags> {
  static const ParameterValue enum_value = ParameterValue::ParameterFlags;
};

template<> struct ParameterValueTraits<ValueInstance> {
  static const ParameterValue enum_value = ParameterValue::ValueInstance;
};

bool VerifyParameterValue(::flatbuffers::Verifier &verifier, const void *obj, ParameterValue type);
bool VerifyParameterValueVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<ParameterValue> *types);

enum class AggregationTy : uint32_t {
  Invalid = 0,
  Sum = 1,
  Average = 2,
  MIN = Invalid,
  MAX = Average
};

inline const AggregationTy (&EnumValuesAggregationTy())[3] {
  static const AggregationTy values[] = {
    AggregationTy::Invalid,
    AggregationTy::Sum,
    AggregationTy::Average
  };
  return values;
}

inline const char * const *EnumNamesAggregationTy() {
  static const char * const names[4] = {
    "Invalid",
    "Sum",
    "Average",
    nullptr
  };
  return names;
}

inline const char *EnumNameAggregationTy(AggregationTy e) {
  if (::flatbuffers::IsOutRange(e, AggregationTy::Invalid, AggregationTy::Average)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAggregationTy()[index];
}

enum class ChartTypeTy : uint32_t {
  Invalid = 0,
  Bar = 1,
  HorizontalBar = 2,
  Doughnut = 3,
  Line = 4,
  SimpleTable = 5,
  SingleNumber = 6,
  Text = 7,
  DashboardTable = 8,
  MIN = Invalid,
  MAX = DashboardTable
};

inline const ChartTypeTy (&EnumValuesChartTypeTy())[9] {
  static const ChartTypeTy values[] = {
    ChartTypeTy::Invalid,
    ChartTypeTy::Bar,
    ChartTypeTy::HorizontalBar,
    ChartTypeTy::Doughnut,
    ChartTypeTy::Line,
    ChartTypeTy::SimpleTable,
    ChartTypeTy::SingleNumber,
    ChartTypeTy::Text,
    ChartTypeTy::DashboardTable
  };
  return values;
}

inline const char * const *EnumNamesChartTypeTy() {
  static const char * const names[10] = {
    "Invalid",
    "Bar",
    "HorizontalBar",
    "Doughnut",
    "Line",
    "SimpleTable",
    "SingleNumber",
    "Text",
    "DashboardTable",
    nullptr
  };
  return names;
}

inline const char *EnumNameChartTypeTy(ChartTypeTy e) {
  if (::flatbuffers::IsOutRange(e, ChartTypeTy::Invalid, ChartTypeTy::DashboardTable)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesChartTypeTy()[index];
}

enum class ValuesFormatTy : uint32_t {
  Invalid = 0,
  RawNumber = 1,
  Percentage = 2,
  MIN = Invalid,
  MAX = Percentage
};

inline const ValuesFormatTy (&EnumValuesValuesFormatTy())[3] {
  static const ValuesFormatTy values[] = {
    ValuesFormatTy::Invalid,
    ValuesFormatTy::RawNumber,
    ValuesFormatTy::Percentage
  };
  return values;
}

inline const char * const *EnumNamesValuesFormatTy() {
  static const char * const names[4] = {
    "Invalid",
    "RawNumber",
    "Percentage",
    nullptr
  };
  return names;
}

inline const char *EnumNameValuesFormatTy(ValuesFormatTy e) {
  if (::flatbuffers::IsOutRange(e, ValuesFormatTy::Invalid, ValuesFormatTy::Percentage)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesValuesFormatTy()[index];
}

struct ByteArray FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ByteArrayBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_B = 4
  };
  const ::flatbuffers::Vector<uint8_t> *b() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_B);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_B) &&
           verifier.VerifyVector(b()) &&
           verifier.EndTable();
  }
};

struct ByteArrayBuilder {
  typedef ByteArray Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_b(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> b) {
    fbb_.AddOffset(ByteArray::VT_B, b);
  }
  explicit ByteArrayBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ByteArray> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ByteArray>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ByteArray> CreateByteArray(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> b = 0) {
  ByteArrayBuilder builder_(_fbb);
  builder_.add_b(b);
  return builder_.Finish();
}

struct ByteArray::Traits {
  using type = ByteArray;
  static auto constexpr Create = CreateByteArray;
};

inline ::flatbuffers::Offset<ByteArray> CreateByteArrayDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *b = nullptr) {
  auto b__ = b ? _fbb.CreateVector<uint8_t>(*b) : 0;
  return CreateByteArray(
      _fbb,
      b__);
}

struct ParameterFlags FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ParameterFlagsBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FLAGS = 4
  };
  int64_t flags() const {
    return GetField<int64_t>(VT_FLAGS, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_FLAGS, 8) &&
           verifier.EndTable();
  }
};

struct ParameterFlagsBuilder {
  typedef ParameterFlags Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_flags(int64_t flags) {
    fbb_.AddElement<int64_t>(ParameterFlags::VT_FLAGS, flags, 0);
  }
  explicit ParameterFlagsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ParameterFlags> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ParameterFlags>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ParameterFlags> CreateParameterFlags(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t flags = 0) {
  ParameterFlagsBuilder builder_(_fbb);
  builder_.add_flags(flags);
  return builder_.Finish();
}

struct ParameterFlags::Traits {
  using type = ParameterFlags;
  static auto constexpr Create = CreateParameterFlags;
};

struct WorklogParameter FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef WorklogParameterBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEY = 4,
    VT_VALUE_TYPE = 6,
    VT_VALUE = 8
  };
  const ::flatbuffers::String *key() const {
    return GetPointer<const ::flatbuffers::String *>(VT_KEY);
  }
  ParameterValue value_type() const {
    return static_cast<ParameterValue>(GetField<uint8_t>(VT_VALUE_TYPE, 0));
  }
  const void *value() const {
    return GetPointer<const void *>(VT_VALUE);
  }
  template<typename T> const T *value_as() const;
  const ByteArray *value_as_ByteArray() const {
    return value_type() == ParameterValue::ByteArray ? static_cast<const ByteArray *>(value()) : nullptr;
  }
  const ObjectId *value_as_ObjectId() const {
    return value_type() == ParameterValue::ObjectId ? static_cast<const ObjectId *>(value()) : nullptr;
  }
  const ParameterFlags *value_as_ParameterFlags() const {
    return value_type() == ParameterValue::ParameterFlags ? static_cast<const ParameterFlags *>(value()) : nullptr;
  }
  const ValueInstance *value_as_ValueInstance() const {
    return value_type() == ParameterValue::ValueInstance ? static_cast<const ValueInstance *>(value()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_KEY) &&
           verifier.VerifyString(key()) &&
           VerifyField<uint8_t>(verifier, VT_VALUE_TYPE, 1) &&
           VerifyOffset(verifier, VT_VALUE) &&
           VerifyParameterValue(verifier, value(), value_type()) &&
           verifier.EndTable();
  }
};

template<> inline const ByteArray *WorklogParameter::value_as<ByteArray>() const {
  return value_as_ByteArray();
}

template<> inline const ObjectId *WorklogParameter::value_as<ObjectId>() const {
  return value_as_ObjectId();
}

template<> inline const ParameterFlags *WorklogParameter::value_as<ParameterFlags>() const {
  return value_as_ParameterFlags();
}

template<> inline const ValueInstance *WorklogParameter::value_as<ValueInstance>() const {
  return value_as_ValueInstance();
}

struct WorklogParameterBuilder {
  typedef WorklogParameter Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_key(::flatbuffers::Offset<::flatbuffers::String> key) {
    fbb_.AddOffset(WorklogParameter::VT_KEY, key);
  }
  void add_value_type(ParameterValue value_type) {
    fbb_.AddElement<uint8_t>(WorklogParameter::VT_VALUE_TYPE, static_cast<uint8_t>(value_type), 0);
  }
  void add_value(::flatbuffers::Offset<void> value) {
    fbb_.AddOffset(WorklogParameter::VT_VALUE, value);
  }
  explicit WorklogParameterBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<WorklogParameter> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<WorklogParameter>(end);
    fbb_.Required(o, WorklogParameter::VT_KEY);
    return o;
  }
};

inline ::flatbuffers::Offset<WorklogParameter> CreateWorklogParameter(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> key = 0,
    ParameterValue value_type = ParameterValue::NONE,
    ::flatbuffers::Offset<void> value = 0) {
  WorklogParameterBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_key(key);
  builder_.add_value_type(value_type);
  return builder_.Finish();
}

struct WorklogParameter::Traits {
  using type = WorklogParameter;
  static auto constexpr Create = CreateWorklogParameter;
};

inline ::flatbuffers::Offset<WorklogParameter> CreateWorklogParameterDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *key = nullptr,
    ParameterValue value_type = ParameterValue::NONE,
    ::flatbuffers::Offset<void> value = 0) {
  auto key__ = key ? _fbb.CreateString(key) : 0;
  return CreateWorklogParameter(
      _fbb,
      key__,
      value_type,
      value);
}

struct WorkLog FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef WorkLogBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_INPUT_STREAMS = 8,
    VT_SCHEMATIC = 10,
    VT_OUTPUT_STREAMS = 12,
    VT_PARAMS = 14,
    VT_PARENT = 16,
    VT_USER_SETTINGS = 18,
    VT_JOB_ID = 20
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<ObjectId>> *input_streams() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<ObjectId>> *>(VT_INPUT_STREAMS);
  }
  const ObjectId *schematic() const {
    return GetPointer<const ObjectId *>(VT_SCHEMATIC);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<ObjectId>> *output_streams() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<ObjectId>> *>(VT_OUTPUT_STREAMS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<WorklogParameter>> *params() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<WorklogParameter>> *>(VT_PARAMS);
  }
  const ObjectId *parent() const {
    return GetPointer<const ObjectId *>(VT_PARENT);
  }
  const UserSettings *user_settings() const {
    return GetPointer<const UserSettings *>(VT_USER_SETTINGS);
  }
  const ObjectId *job_id() const {
    return GetPointer<const ObjectId *>(VT_JOB_ID);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_INPUT_STREAMS) &&
           verifier.VerifyVector(input_streams()) &&
           verifier.VerifyVectorOfTables(input_streams()) &&
           VerifyOffsetRequired(verifier, VT_SCHEMATIC) &&
           verifier.VerifyTable(schematic()) &&
           VerifyOffsetRequired(verifier, VT_OUTPUT_STREAMS) &&
           verifier.VerifyVector(output_streams()) &&
           verifier.VerifyVectorOfTables(output_streams()) &&
           VerifyOffsetRequired(verifier, VT_PARAMS) &&
           verifier.VerifyVector(params()) &&
           verifier.VerifyVectorOfTables(params()) &&
           VerifyOffset(verifier, VT_PARENT) &&
           verifier.VerifyTable(parent()) &&
           VerifyOffset(verifier, VT_USER_SETTINGS) &&
           verifier.VerifyTable(user_settings()) &&
           VerifyOffset(verifier, VT_JOB_ID) &&
           verifier.VerifyTable(job_id()) &&
           verifier.EndTable();
  }
};

struct WorkLogBuilder {
  typedef WorkLog Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(WorkLog::VT_NAME, name);
  }
  void add_input_streams(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<ObjectId>>> input_streams) {
    fbb_.AddOffset(WorkLog::VT_INPUT_STREAMS, input_streams);
  }
  void add_schematic(::flatbuffers::Offset<ObjectId> schematic) {
    fbb_.AddOffset(WorkLog::VT_SCHEMATIC, schematic);
  }
  void add_output_streams(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<ObjectId>>> output_streams) {
    fbb_.AddOffset(WorkLog::VT_OUTPUT_STREAMS, output_streams);
  }
  void add_params(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<WorklogParameter>>> params) {
    fbb_.AddOffset(WorkLog::VT_PARAMS, params);
  }
  void add_parent(::flatbuffers::Offset<ObjectId> parent) {
    fbb_.AddOffset(WorkLog::VT_PARENT, parent);
  }
  void add_user_settings(::flatbuffers::Offset<UserSettings> user_settings) {
    fbb_.AddOffset(WorkLog::VT_USER_SETTINGS, user_settings);
  }
  void add_job_id(::flatbuffers::Offset<ObjectId> job_id) {
    fbb_.AddOffset(WorkLog::VT_JOB_ID, job_id);
  }
  explicit WorkLogBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<WorkLog> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<WorkLog>(end);
    fbb_.Required(o, WorkLog::VT_SCHEMATIC);
    fbb_.Required(o, WorkLog::VT_OUTPUT_STREAMS);
    fbb_.Required(o, WorkLog::VT_PARAMS);
    return o;
  }
};

inline ::flatbuffers::Offset<WorkLog> CreateWorkLog(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<ObjectId>>> input_streams = 0,
    ::flatbuffers::Offset<ObjectId> schematic = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<ObjectId>>> output_streams = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<WorklogParameter>>> params = 0,
    ::flatbuffers::Offset<ObjectId> parent = 0,
    ::flatbuffers::Offset<UserSettings> user_settings = 0,
    ::flatbuffers::Offset<ObjectId> job_id = 0) {
  WorkLogBuilder builder_(_fbb);
  builder_.add_job_id(job_id);
  builder_.add_user_settings(user_settings);
  builder_.add_parent(parent);
  builder_.add_params(params);
  builder_.add_output_streams(output_streams);
  builder_.add_schematic(schematic);
  builder_.add_input_streams(input_streams);
  builder_.add_name(name);
  return builder_.Finish();
}

struct WorkLog::Traits {
  using type = WorkLog;
  static auto constexpr Create = CreateWorkLog;
};

inline ::flatbuffers::Offset<WorkLog> CreateWorkLogDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const std::vector<::flatbuffers::Offset<ObjectId>> *input_streams = nullptr,
    ::flatbuffers::Offset<ObjectId> schematic = 0,
    const std::vector<::flatbuffers::Offset<ObjectId>> *output_streams = nullptr,
    const std::vector<::flatbuffers::Offset<WorklogParameter>> *params = nullptr,
    ::flatbuffers::Offset<ObjectId> parent = 0,
    ::flatbuffers::Offset<UserSettings> user_settings = 0,
    ::flatbuffers::Offset<ObjectId> job_id = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto input_streams__ = input_streams ? _fbb.CreateVector<::flatbuffers::Offset<ObjectId>>(*input_streams) : 0;
  auto output_streams__ = output_streams ? _fbb.CreateVector<::flatbuffers::Offset<ObjectId>>(*output_streams) : 0;
  auto params__ = params ? _fbb.CreateVector<::flatbuffers::Offset<WorklogParameter>>(*params) : 0;
  return CreateWorkLog(
      _fbb,
      name__,
      input_streams__,
      schematic,
      output_streams__,
      params__,
      parent,
      user_settings,
      job_id);
}

struct UserSettings FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UserSettingsBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TILE_DATA = 6,
    VT_IS_TEMPLATE = 8
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<TileData>> *tile_data() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<TileData>> *>(VT_TILE_DATA);
  }
  bool is_template() const {
    return GetField<uint8_t>(VT_IS_TEMPLATE, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_TILE_DATA) &&
           verifier.VerifyVector(tile_data()) &&
           verifier.VerifyVectorOfTables(tile_data()) &&
           VerifyField<uint8_t>(verifier, VT_IS_TEMPLATE, 1) &&
           verifier.EndTable();
  }
};

struct UserSettingsBuilder {
  typedef UserSettings Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_tile_data(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<TileData>>> tile_data) {
    fbb_.AddOffset(UserSettings::VT_TILE_DATA, tile_data);
  }
  void add_is_template(bool is_template) {
    fbb_.AddElement<uint8_t>(UserSettings::VT_IS_TEMPLATE, static_cast<uint8_t>(is_template), 0);
  }
  explicit UserSettingsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<UserSettings> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UserSettings>(end);
    fbb_.Required(o, UserSettings::VT_TILE_DATA);
    return o;
  }
};

inline ::flatbuffers::Offset<UserSettings> CreateUserSettings(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<TileData>>> tile_data = 0,
    bool is_template = false) {
  UserSettingsBuilder builder_(_fbb);
  builder_.add_tile_data(tile_data);
  builder_.add_is_template(is_template);
  return builder_.Finish();
}

struct UserSettings::Traits {
  using type = UserSettings;
  static auto constexpr Create = CreateUserSettings;
};

inline ::flatbuffers::Offset<UserSettings> CreateUserSettingsDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<TileData>> *tile_data = nullptr,
    bool is_template = false) {
  auto tile_data__ = tile_data ? _fbb.CreateVector<::flatbuffers::Offset<TileData>>(*tile_data) : 0;
  return CreateUserSettings(
      _fbb,
      tile_data__,
      is_template);
}

struct TileData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TileDataBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LAYOUT = 4,
    VT_TILE_SETTINGS = 6
  };
  const Layout *layout() const {
    return GetPointer<const Layout *>(VT_LAYOUT);
  }
  const TileSettings *tile_settings() const {
    return GetPointer<const TileSettings *>(VT_TILE_SETTINGS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_LAYOUT) &&
           verifier.VerifyTable(layout()) &&
           VerifyOffsetRequired(verifier, VT_TILE_SETTINGS) &&
           verifier.VerifyTable(tile_settings()) &&
           verifier.EndTable();
  }
};

struct TileDataBuilder {
  typedef TileData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_layout(::flatbuffers::Offset<Layout> layout) {
    fbb_.AddOffset(TileData::VT_LAYOUT, layout);
  }
  void add_tile_settings(::flatbuffers::Offset<TileSettings> tile_settings) {
    fbb_.AddOffset(TileData::VT_TILE_SETTINGS, tile_settings);
  }
  explicit TileDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TileData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TileData>(end);
    fbb_.Required(o, TileData::VT_LAYOUT);
    fbb_.Required(o, TileData::VT_TILE_SETTINGS);
    return o;
  }
};

inline ::flatbuffers::Offset<TileData> CreateTileData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<Layout> layout = 0,
    ::flatbuffers::Offset<TileSettings> tile_settings = 0) {
  TileDataBuilder builder_(_fbb);
  builder_.add_tile_settings(tile_settings);
  builder_.add_layout(layout);
  return builder_.Finish();
}

struct TileData::Traits {
  using type = TileData;
  static auto constexpr Create = CreateTileData;
};

struct Layout FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LayoutBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HEIGHT = 4,
    VT_WIDTH = 6,
    VT_X = 8,
    VT_Y = 10
  };
  uint32_t height() const {
    return GetField<uint32_t>(VT_HEIGHT, 0);
  }
  uint32_t width() const {
    return GetField<uint32_t>(VT_WIDTH, 0);
  }
  uint32_t x() const {
    return GetField<uint32_t>(VT_X, 0);
  }
  uint32_t y() const {
    return GetField<uint32_t>(VT_Y, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_HEIGHT, 4) &&
           VerifyField<uint32_t>(verifier, VT_WIDTH, 4) &&
           VerifyField<uint32_t>(verifier, VT_X, 4) &&
           VerifyField<uint32_t>(verifier, VT_Y, 4) &&
           verifier.EndTable();
  }
};

struct LayoutBuilder {
  typedef Layout Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_height(uint32_t height) {
    fbb_.AddElement<uint32_t>(Layout::VT_HEIGHT, height, 0);
  }
  void add_width(uint32_t width) {
    fbb_.AddElement<uint32_t>(Layout::VT_WIDTH, width, 0);
  }
  void add_x(uint32_t x) {
    fbb_.AddElement<uint32_t>(Layout::VT_X, x, 0);
  }
  void add_y(uint32_t y) {
    fbb_.AddElement<uint32_t>(Layout::VT_Y, y, 0);
  }
  explicit LayoutBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Layout> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Layout>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Layout> CreateLayout(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t height = 0,
    uint32_t width = 0,
    uint32_t x = 0,
    uint32_t y = 0) {
  LayoutBuilder builder_(_fbb);
  builder_.add_y(y);
  builder_.add_x(x);
  builder_.add_width(width);
  builder_.add_height(height);
  return builder_.Finish();
}

struct Layout::Traits {
  using type = Layout;
  static auto constexpr Create = CreateLayout;
};

struct TileSettings FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TileSettingsBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_AGGREGATION = 4,
    VT_CATEGORY = 6,
    VT_CHART_TYPE = 8,
    VT_FIELD_NAME = 10,
    VT_GROUP_OTHERS = 12,
    VT_IS_RELATIONSHIP_FIELD = 14,
    VT_METADATA_ID = 16,
    VT_OUTPUT_STREAM_INDEX = 18,
    VT_SELECTED_COLUMNS = 20,
    VT_TITLE = 22,
    VT_VALUES_FORMAT = 24,
    VT_IS_RECORD_COUNT_TILE = 26,
    VT_TEXT_TILE_FONT_SIZE = 28,
    VT_RECORD_COUNT_STREAM_ID = 30
  };
  AggregationTy aggregation() const {
    return static_cast<AggregationTy>(GetField<uint32_t>(VT_AGGREGATION, 0));
  }
  uint32_t category() const {
    return GetField<uint32_t>(VT_CATEGORY, 0);
  }
  ChartTypeTy chart_type() const {
    return static_cast<ChartTypeTy>(GetField<uint32_t>(VT_CHART_TYPE, 0));
  }
  const ::flatbuffers::String *field_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FIELD_NAME);
  }
  bool group_others() const {
    return GetField<uint8_t>(VT_GROUP_OTHERS, 0) != 0;
  }
  bool is_relationship_field() const {
    return GetField<uint8_t>(VT_IS_RELATIONSHIP_FIELD, 0) != 0;
  }
  const ObjectId *metadata_id() const {
    return GetPointer<const ObjectId *>(VT_METADATA_ID);
  }
  uint32_t output_stream_index() const {
    return GetField<uint32_t>(VT_OUTPUT_STREAM_INDEX, 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *selected_columns() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SELECTED_COLUMNS);
  }
  const ::flatbuffers::String *title() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TITLE);
  }
  ValuesFormatTy values_format() const {
    return static_cast<ValuesFormatTy>(GetField<uint32_t>(VT_VALUES_FORMAT, 0));
  }
  bool is_record_count_tile() const {
    return GetField<uint8_t>(VT_IS_RECORD_COUNT_TILE, 0) != 0;
  }
  uint32_t text_tile_font_size() const {
    return GetField<uint32_t>(VT_TEXT_TILE_FONT_SIZE, 0);
  }
  const ObjectId *record_count_stream_id() const {
    return GetPointer<const ObjectId *>(VT_RECORD_COUNT_STREAM_ID);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_AGGREGATION, 4) &&
           VerifyField<uint32_t>(verifier, VT_CATEGORY, 4) &&
           VerifyField<uint32_t>(verifier, VT_CHART_TYPE, 4) &&
           VerifyOffsetRequired(verifier, VT_FIELD_NAME) &&
           verifier.VerifyString(field_name()) &&
           VerifyField<uint8_t>(verifier, VT_GROUP_OTHERS, 1) &&
           VerifyField<uint8_t>(verifier, VT_IS_RELATIONSHIP_FIELD, 1) &&
           VerifyOffsetRequired(verifier, VT_METADATA_ID) &&
           verifier.VerifyTable(metadata_id()) &&
           VerifyField<uint32_t>(verifier, VT_OUTPUT_STREAM_INDEX, 4) &&
           VerifyOffsetRequired(verifier, VT_SELECTED_COLUMNS) &&
           verifier.VerifyVector(selected_columns()) &&
           verifier.VerifyVectorOfStrings(selected_columns()) &&
           VerifyOffsetRequired(verifier, VT_TITLE) &&
           verifier.VerifyString(title()) &&
           VerifyField<uint32_t>(verifier, VT_VALUES_FORMAT, 4) &&
           VerifyField<uint8_t>(verifier, VT_IS_RECORD_COUNT_TILE, 1) &&
           VerifyField<uint32_t>(verifier, VT_TEXT_TILE_FONT_SIZE, 4) &&
           VerifyOffset(verifier, VT_RECORD_COUNT_STREAM_ID) &&
           verifier.VerifyTable(record_count_stream_id()) &&
           verifier.EndTable();
  }
};

struct TileSettingsBuilder {
  typedef TileSettings Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_aggregation(AggregationTy aggregation) {
    fbb_.AddElement<uint32_t>(TileSettings::VT_AGGREGATION, static_cast<uint32_t>(aggregation), 0);
  }
  void add_category(uint32_t category) {
    fbb_.AddElement<uint32_t>(TileSettings::VT_CATEGORY, category, 0);
  }
  void add_chart_type(ChartTypeTy chart_type) {
    fbb_.AddElement<uint32_t>(TileSettings::VT_CHART_TYPE, static_cast<uint32_t>(chart_type), 0);
  }
  void add_field_name(::flatbuffers::Offset<::flatbuffers::String> field_name) {
    fbb_.AddOffset(TileSettings::VT_FIELD_NAME, field_name);
  }
  void add_group_others(bool group_others) {
    fbb_.AddElement<uint8_t>(TileSettings::VT_GROUP_OTHERS, static_cast<uint8_t>(group_others), 0);
  }
  void add_is_relationship_field(bool is_relationship_field) {
    fbb_.AddElement<uint8_t>(TileSettings::VT_IS_RELATIONSHIP_FIELD, static_cast<uint8_t>(is_relationship_field), 0);
  }
  void add_metadata_id(::flatbuffers::Offset<ObjectId> metadata_id) {
    fbb_.AddOffset(TileSettings::VT_METADATA_ID, metadata_id);
  }
  void add_output_stream_index(uint32_t output_stream_index) {
    fbb_.AddElement<uint32_t>(TileSettings::VT_OUTPUT_STREAM_INDEX, output_stream_index, 0);
  }
  void add_selected_columns(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> selected_columns) {
    fbb_.AddOffset(TileSettings::VT_SELECTED_COLUMNS, selected_columns);
  }
  void add_title(::flatbuffers::Offset<::flatbuffers::String> title) {
    fbb_.AddOffset(TileSettings::VT_TITLE, title);
  }
  void add_values_format(ValuesFormatTy values_format) {
    fbb_.AddElement<uint32_t>(TileSettings::VT_VALUES_FORMAT, static_cast<uint32_t>(values_format), 0);
  }
  void add_is_record_count_tile(bool is_record_count_tile) {
    fbb_.AddElement<uint8_t>(TileSettings::VT_IS_RECORD_COUNT_TILE, static_cast<uint8_t>(is_record_count_tile), 0);
  }
  void add_text_tile_font_size(uint32_t text_tile_font_size) {
    fbb_.AddElement<uint32_t>(TileSettings::VT_TEXT_TILE_FONT_SIZE, text_tile_font_size, 0);
  }
  void add_record_count_stream_id(::flatbuffers::Offset<ObjectId> record_count_stream_id) {
    fbb_.AddOffset(TileSettings::VT_RECORD_COUNT_STREAM_ID, record_count_stream_id);
  }
  explicit TileSettingsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TileSettings> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TileSettings>(end);
    fbb_.Required(o, TileSettings::VT_FIELD_NAME);
    fbb_.Required(o, TileSettings::VT_METADATA_ID);
    fbb_.Required(o, TileSettings::VT_SELECTED_COLUMNS);
    fbb_.Required(o, TileSettings::VT_TITLE);
    return o;
  }
};

inline ::flatbuffers::Offset<TileSettings> CreateTileSettings(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    AggregationTy aggregation = AggregationTy::Invalid,
    uint32_t category = 0,
    ChartTypeTy chart_type = ChartTypeTy::Invalid,
    ::flatbuffers::Offset<::flatbuffers::String> field_name = 0,
    bool group_others = false,
    bool is_relationship_field = false,
    ::flatbuffers::Offset<ObjectId> metadata_id = 0,
    uint32_t output_stream_index = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> selected_columns = 0,
    ::flatbuffers::Offset<::flatbuffers::String> title = 0,
    ValuesFormatTy values_format = ValuesFormatTy::Invalid,
    bool is_record_count_tile = false,
    uint32_t text_tile_font_size = 0,
    ::flatbuffers::Offset<ObjectId> record_count_stream_id = 0) {
  TileSettingsBuilder builder_(_fbb);
  builder_.add_record_count_stream_id(record_count_stream_id);
  builder_.add_text_tile_font_size(text_tile_font_size);
  builder_.add_values_format(values_format);
  builder_.add_title(title);
  builder_.add_selected_columns(selected_columns);
  builder_.add_output_stream_index(output_stream_index);
  builder_.add_metadata_id(metadata_id);
  builder_.add_field_name(field_name);
  builder_.add_chart_type(chart_type);
  builder_.add_category(category);
  builder_.add_aggregation(aggregation);
  builder_.add_is_record_count_tile(is_record_count_tile);
  builder_.add_is_relationship_field(is_relationship_field);
  builder_.add_group_others(group_others);
  return builder_.Finish();
}

struct TileSettings::Traits {
  using type = TileSettings;
  static auto constexpr Create = CreateTileSettings;
};

inline ::flatbuffers::Offset<TileSettings> CreateTileSettingsDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    AggregationTy aggregation = AggregationTy::Invalid,
    uint32_t category = 0,
    ChartTypeTy chart_type = ChartTypeTy::Invalid,
    const char *field_name = nullptr,
    bool group_others = false,
    bool is_relationship_field = false,
    ::flatbuffers::Offset<ObjectId> metadata_id = 0,
    uint32_t output_stream_index = 0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *selected_columns = nullptr,
    const char *title = nullptr,
    ValuesFormatTy values_format = ValuesFormatTy::Invalid,
    bool is_record_count_tile = false,
    uint32_t text_tile_font_size = 0,
    ::flatbuffers::Offset<ObjectId> record_count_stream_id = 0) {
  auto field_name__ = field_name ? _fbb.CreateString(field_name) : 0;
  auto selected_columns__ = selected_columns ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*selected_columns) : 0;
  auto title__ = title ? _fbb.CreateString(title) : 0;
  return CreateTileSettings(
      _fbb,
      aggregation,
      category,
      chart_type,
      field_name__,
      group_others,
      is_relationship_field,
      metadata_id,
      output_stream_index,
      selected_columns__,
      title__,
      values_format,
      is_record_count_tile,
      text_tile_font_size,
      record_count_stream_id);
}

inline bool VerifyParameterValue(::flatbuffers::Verifier &verifier, const void *obj, ParameterValue type) {
  switch (type) {
    case ParameterValue::NONE: {
      return true;
    }
    case ParameterValue::ByteArray: {
      auto ptr = reinterpret_cast<const ByteArray *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ParameterValue::ObjectId: {
      auto ptr = reinterpret_cast<const ObjectId *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ParameterValue::ParameterFlags: {
      auto ptr = reinterpret_cast<const ParameterFlags *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ParameterValue::ValueInstance: {
      auto ptr = reinterpret_cast<const ValueInstance *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyParameterValueVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<ParameterValue> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyParameterValue(
        verifier,  values->Get(i), types->GetEnum<ParameterValue>(i))) {
      return false;
    }
  }
  return true;
}

inline const WorkLog *GetWorkLog(const void *buf) {
  return ::flatbuffers::GetRoot<WorkLog>(buf);
}

inline const WorkLog *GetSizePrefixedWorkLog(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<WorkLog>(buf);
}

inline bool VerifyWorkLogBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<WorkLog>(nullptr);
}

inline bool VerifySizePrefixedWorkLogBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<WorkLog>(nullptr);
}

inline void FinishWorkLogBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<WorkLog> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedWorkLogBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<WorkLog> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_WORKLOG_H_
