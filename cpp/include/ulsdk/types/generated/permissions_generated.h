// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PERMISSIONS_H_
#define FLATBUFFERS_GENERATED_PERMISSIONS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

#include "id_generated.h"

struct Role;
struct RoleBuilder;

struct AccessControlList;
struct AccessControlListBuilder;

enum class PermissionTy : uint32_t {
  /// Permission to browse object metadata and content but not necessarily
  /// stream the data, if it's a data stream. Note that this is for public
  /// access to the data (ie: explore mode); implicit access to objects for
  /// derived insights (ie: usecases) can still be granted if the user has
  /// the BROWSE flag for an object.
  PERM_BROWSE = 1,
  /// Permission to stream data from streams.
  PERM_READ = 2,
  /// Permission to add to directories or data collections only, but not modify their contents
  PERM_APPEND = 4,
  /// Permission to make changes to objects. The "admin role" is not expressly
  /// modeled with its own permission type but rather is created by having all
  /// PERM bits set on a permissions list object.
  PERM_MODIFY = 8,
  NONE = 0,
  ANY = 15
};
FLATBUFFERS_DEFINE_BITMASK_OPERATORS(PermissionTy, uint32_t)

inline const PermissionTy (&EnumValuesPermissionTy())[4] {
  static const PermissionTy values[] = {
    PermissionTy::PERM_BROWSE,
    PermissionTy::PERM_READ,
    PermissionTy::PERM_APPEND,
    PermissionTy::PERM_MODIFY
  };
  return values;
}

inline const char * const *EnumNamesPermissionTy() {
  static const char * const names[9] = {
    "PERM_BROWSE",
    "PERM_READ",
    "",
    "PERM_APPEND",
    "",
    "",
    "",
    "PERM_MODIFY",
    nullptr
  };
  return names;
}

inline const char *EnumNamePermissionTy(PermissionTy e) {
  if (::flatbuffers::IsOutRange(e, PermissionTy::PERM_BROWSE, PermissionTy::PERM_MODIFY)) return "";
  const size_t index = static_cast<size_t>(e) - static_cast<size_t>(PermissionTy::PERM_BROWSE);
  return EnumNamesPermissionTy()[index];
}

struct Role FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RoleBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PERMISSION = 4,
    VT_PRINCIPAL = 6
  };
  uint32_t permission() const {
    return GetField<uint32_t>(VT_PERMISSION, 0);
  }
  const B2cId *principal() const {
    return GetPointer<const B2cId *>(VT_PRINCIPAL);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_PERMISSION, 4) &&
           VerifyOffsetRequired(verifier, VT_PRINCIPAL) &&
           verifier.VerifyTable(principal()) &&
           verifier.EndTable();
  }
};

struct RoleBuilder {
  typedef Role Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_permission(uint32_t permission) {
    fbb_.AddElement<uint32_t>(Role::VT_PERMISSION, permission, 0);
  }
  void add_principal(::flatbuffers::Offset<B2cId> principal) {
    fbb_.AddOffset(Role::VT_PRINCIPAL, principal);
  }
  explicit RoleBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Role> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Role>(end);
    fbb_.Required(o, Role::VT_PRINCIPAL);
    return o;
  }
};

inline ::flatbuffers::Offset<Role> CreateRole(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t permission = 0,
    ::flatbuffers::Offset<B2cId> principal = 0) {
  RoleBuilder builder_(_fbb);
  builder_.add_principal(principal);
  builder_.add_permission(permission);
  return builder_.Finish();
}

struct Role::Traits {
  using type = Role;
  static auto constexpr Create = CreateRole;
};

struct AccessControlList FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AccessControlListBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ROLES = 4,
    VT_EXTENDS = 6
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<Role>> *roles() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Role>> *>(VT_ROLES);
  }
  /// The "extends" allows us to chain together ACLs without needing to copy
  /// the whole thing. For example, if want to grant Alice access to a file,
  /// we would create a new ACL for that file that has Alice in the permissions
  /// list but extends the parent directory's ACL to retain all the existing
  /// permissions. This can also be used to selectively revoke access (by
  /// adding an ACL entry with empty permissions) to an object.
  const ObjectId *extends() const {
    return GetPointer<const ObjectId *>(VT_EXTENDS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_ROLES) &&
           verifier.VerifyVector(roles()) &&
           verifier.VerifyVectorOfTables(roles()) &&
           VerifyOffset(verifier, VT_EXTENDS) &&
           verifier.VerifyTable(extends()) &&
           verifier.EndTable();
  }
};

struct AccessControlListBuilder {
  typedef AccessControlList Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_roles(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Role>>> roles) {
    fbb_.AddOffset(AccessControlList::VT_ROLES, roles);
  }
  void add_extends(::flatbuffers::Offset<ObjectId> extends) {
    fbb_.AddOffset(AccessControlList::VT_EXTENDS, extends);
  }
  explicit AccessControlListBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AccessControlList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AccessControlList>(end);
    fbb_.Required(o, AccessControlList::VT_ROLES);
    return o;
  }
};

inline ::flatbuffers::Offset<AccessControlList> CreateAccessControlList(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Role>>> roles = 0,
    ::flatbuffers::Offset<ObjectId> extends = 0) {
  AccessControlListBuilder builder_(_fbb);
  builder_.add_extends(extends);
  builder_.add_roles(roles);
  return builder_.Finish();
}

struct AccessControlList::Traits {
  using type = AccessControlList;
  static auto constexpr Create = CreateAccessControlList;
};

inline ::flatbuffers::Offset<AccessControlList> CreateAccessControlListDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<Role>> *roles = nullptr,
    ::flatbuffers::Offset<ObjectId> extends = 0) {
  auto roles__ = roles ? _fbb.CreateVector<::flatbuffers::Offset<Role>>(*roles) : 0;
  return CreateAccessControlList(
      _fbb,
      roles__,
      extends);
}

#endif  // FLATBUFFERS_GENERATED_PERMISSIONS_H_
