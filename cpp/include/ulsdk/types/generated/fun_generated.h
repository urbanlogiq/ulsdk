// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FUN_H_
#define FLATBUFFERS_GENERATED_FUN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

enum class Fn : int16_t {
  None = 0,
  True = 1,
  False = 2,
  Plus = 3,
  Minus = 4,
  Multiply = 5,
  Divide = 6,
  Modulo = 7,
  IsNull = 8,
  IsNotNull = 9,
  Not = 10,
  Greater = 11,
  Less = 12,
  GreaterEqual = 13,
  LessEqual = 14,
  Equal = 15,
  NotEqual = 16,
  Is = 17,
  Like = 18,
  NotLike = 19,
  In = 20,
  And = 21,
  Or = 22,
  GeomIn = 23,
  StWithin = 24,
  StDwithin = 25,
  StGeomFromText = 26,
  StTransform = 27,
  Nullif = 28,
  ToTimestamp = 29,
  Count = 30,
  Sum = 31,
  As = 32,
  StLength = 33,
  Geography = 34,
  Min = 35,
  Max = 36,
  Avg = 37,
  StArea = 38,
  UnixTimestamp = 39,
  BitwiseAnd = 40,
  BitwiseOr = 41,
  Cast = 42,
  DatePart = 43,
  FromUnixTime = 44,
  Concat = 45,
  AtTimezone = 46,
  StIntersects = 47,
  StDisjoint = 48,
  DateTrunc = 49,
  Distinct = 50,
  Lag = 51,
  WithUTC = 52,
  WithoutTimezone = 53,
  Lead = 54,
  ToBase64 = 55,
  ToTimestampMillis = 56,
  ToTimestampMicros = 57,
  ToTimestampSeconds = 58,
  Now = 59,
  DateBin = 60,
  Abs = 61,
  DateDiff = 62,
  ArrayContains = 63,
  Median = 64,
  NodeId = 65,
  OidContains = 66,
  TimeBucket = 67,
  ArrayAgg = 68,
  FirstValue = 69,
  ArrayConcat = 70,
  ToChar = 71,
  ArrayToString = 72,
  ArraySort = 73,
  UlTimezone = 32764,
  UlArrayContains = 32765,
  UlArrayAny = 32766,
  MIN = None,
  MAX = UlArrayAny
};

inline const Fn (&EnumValuesFn())[77] {
  static const Fn values[] = {
    Fn::None,
    Fn::True,
    Fn::False,
    Fn::Plus,
    Fn::Minus,
    Fn::Multiply,
    Fn::Divide,
    Fn::Modulo,
    Fn::IsNull,
    Fn::IsNotNull,
    Fn::Not,
    Fn::Greater,
    Fn::Less,
    Fn::GreaterEqual,
    Fn::LessEqual,
    Fn::Equal,
    Fn::NotEqual,
    Fn::Is,
    Fn::Like,
    Fn::NotLike,
    Fn::In,
    Fn::And,
    Fn::Or,
    Fn::GeomIn,
    Fn::StWithin,
    Fn::StDwithin,
    Fn::StGeomFromText,
    Fn::StTransform,
    Fn::Nullif,
    Fn::ToTimestamp,
    Fn::Count,
    Fn::Sum,
    Fn::As,
    Fn::StLength,
    Fn::Geography,
    Fn::Min,
    Fn::Max,
    Fn::Avg,
    Fn::StArea,
    Fn::UnixTimestamp,
    Fn::BitwiseAnd,
    Fn::BitwiseOr,
    Fn::Cast,
    Fn::DatePart,
    Fn::FromUnixTime,
    Fn::Concat,
    Fn::AtTimezone,
    Fn::StIntersects,
    Fn::StDisjoint,
    Fn::DateTrunc,
    Fn::Distinct,
    Fn::Lag,
    Fn::WithUTC,
    Fn::WithoutTimezone,
    Fn::Lead,
    Fn::ToBase64,
    Fn::ToTimestampMillis,
    Fn::ToTimestampMicros,
    Fn::ToTimestampSeconds,
    Fn::Now,
    Fn::DateBin,
    Fn::Abs,
    Fn::DateDiff,
    Fn::ArrayContains,
    Fn::Median,
    Fn::NodeId,
    Fn::OidContains,
    Fn::TimeBucket,
    Fn::ArrayAgg,
    Fn::FirstValue,
    Fn::ArrayConcat,
    Fn::ToChar,
    Fn::ArrayToString,
    Fn::ArraySort,
    Fn::UlTimezone,
    Fn::UlArrayContains,
    Fn::UlArrayAny
  };
  return values;
}

inline const char *EnumNameFn(Fn e) {
  switch (e) {
    case Fn::None: return "None";
    case Fn::True: return "True";
    case Fn::False: return "False";
    case Fn::Plus: return "Plus";
    case Fn::Minus: return "Minus";
    case Fn::Multiply: return "Multiply";
    case Fn::Divide: return "Divide";
    case Fn::Modulo: return "Modulo";
    case Fn::IsNull: return "IsNull";
    case Fn::IsNotNull: return "IsNotNull";
    case Fn::Not: return "Not";
    case Fn::Greater: return "Greater";
    case Fn::Less: return "Less";
    case Fn::GreaterEqual: return "GreaterEqual";
    case Fn::LessEqual: return "LessEqual";
    case Fn::Equal: return "Equal";
    case Fn::NotEqual: return "NotEqual";
    case Fn::Is: return "Is";
    case Fn::Like: return "Like";
    case Fn::NotLike: return "NotLike";
    case Fn::In: return "In";
    case Fn::And: return "And";
    case Fn::Or: return "Or";
    case Fn::GeomIn: return "GeomIn";
    case Fn::StWithin: return "StWithin";
    case Fn::StDwithin: return "StDwithin";
    case Fn::StGeomFromText: return "StGeomFromText";
    case Fn::StTransform: return "StTransform";
    case Fn::Nullif: return "Nullif";
    case Fn::ToTimestamp: return "ToTimestamp";
    case Fn::Count: return "Count";
    case Fn::Sum: return "Sum";
    case Fn::As: return "As";
    case Fn::StLength: return "StLength";
    case Fn::Geography: return "Geography";
    case Fn::Min: return "Min";
    case Fn::Max: return "Max";
    case Fn::Avg: return "Avg";
    case Fn::StArea: return "StArea";
    case Fn::UnixTimestamp: return "UnixTimestamp";
    case Fn::BitwiseAnd: return "BitwiseAnd";
    case Fn::BitwiseOr: return "BitwiseOr";
    case Fn::Cast: return "Cast";
    case Fn::DatePart: return "DatePart";
    case Fn::FromUnixTime: return "FromUnixTime";
    case Fn::Concat: return "Concat";
    case Fn::AtTimezone: return "AtTimezone";
    case Fn::StIntersects: return "StIntersects";
    case Fn::StDisjoint: return "StDisjoint";
    case Fn::DateTrunc: return "DateTrunc";
    case Fn::Distinct: return "Distinct";
    case Fn::Lag: return "Lag";
    case Fn::WithUTC: return "WithUTC";
    case Fn::WithoutTimezone: return "WithoutTimezone";
    case Fn::Lead: return "Lead";
    case Fn::ToBase64: return "ToBase64";
    case Fn::ToTimestampMillis: return "ToTimestampMillis";
    case Fn::ToTimestampMicros: return "ToTimestampMicros";
    case Fn::ToTimestampSeconds: return "ToTimestampSeconds";
    case Fn::Now: return "Now";
    case Fn::DateBin: return "DateBin";
    case Fn::Abs: return "Abs";
    case Fn::DateDiff: return "DateDiff";
    case Fn::ArrayContains: return "ArrayContains";
    case Fn::Median: return "Median";
    case Fn::NodeId: return "NodeId";
    case Fn::OidContains: return "OidContains";
    case Fn::TimeBucket: return "TimeBucket";
    case Fn::ArrayAgg: return "ArrayAgg";
    case Fn::FirstValue: return "FirstValue";
    case Fn::ArrayConcat: return "ArrayConcat";
    case Fn::ToChar: return "ToChar";
    case Fn::ArrayToString: return "ArrayToString";
    case Fn::ArraySort: return "ArraySort";
    case Fn::UlTimezone: return "UlTimezone";
    case Fn::UlArrayContains: return "UlArrayContains";
    case Fn::UlArrayAny: return "UlArrayAny";
    default: return "";
  }
}

#endif  // FLATBUFFERS_GENERATED_FUN_H_
