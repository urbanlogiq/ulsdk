// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TRIMET_H_
#define FLATBUFFERS_GENERATED_TRIMET_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

enum class OTPRequestMode : uint32_t {
  BIKE = 1,
  BIKE_ONLY = 2,
  BIKE_SHARE_ONLY = 4,
  BUS = 8,
  CAR = 16,
  CAR_SHARE = 32,
  RAIL = 64,
  SCOOTER_SHARE = 128,
  WALK_ONLY = 256,
  BIKE_SHARE = 512,
  NONE = 0,
  ANY = 1023
};
FLATBUFFERS_DEFINE_BITMASK_OPERATORS(OTPRequestMode, uint32_t)

inline const OTPRequestMode (&EnumValuesOTPRequestMode())[10] {
  static const OTPRequestMode values[] = {
    OTPRequestMode::BIKE,
    OTPRequestMode::BIKE_ONLY,
    OTPRequestMode::BIKE_SHARE_ONLY,
    OTPRequestMode::BUS,
    OTPRequestMode::CAR,
    OTPRequestMode::CAR_SHARE,
    OTPRequestMode::RAIL,
    OTPRequestMode::SCOOTER_SHARE,
    OTPRequestMode::WALK_ONLY,
    OTPRequestMode::BIKE_SHARE
  };
  return values;
}

inline const char *EnumNameOTPRequestMode(OTPRequestMode e) {
  switch (e) {
    case OTPRequestMode::BIKE: return "BIKE";
    case OTPRequestMode::BIKE_ONLY: return "BIKE_ONLY";
    case OTPRequestMode::BIKE_SHARE_ONLY: return "BIKE_SHARE_ONLY";
    case OTPRequestMode::BUS: return "BUS";
    case OTPRequestMode::CAR: return "CAR";
    case OTPRequestMode::CAR_SHARE: return "CAR_SHARE";
    case OTPRequestMode::RAIL: return "RAIL";
    case OTPRequestMode::SCOOTER_SHARE: return "SCOOTER_SHARE";
    case OTPRequestMode::WALK_ONLY: return "WALK_ONLY";
    case OTPRequestMode::BIKE_SHARE: return "BIKE_SHARE";
    default: return "";
  }
}

enum class ODXEventType : uint8_t {
  ORIGIN_BOARDED = 0,
  DESTINATION_ALIGHTED = 1,
  MID_JOURNEY_ALIGHTED = 2,
  MID_JOURNEY_BOARDED = 3,
  INTERLINE_STARTED = 4,
  INTERLINE_ENDED = 5,
  MIN = ORIGIN_BOARDED,
  MAX = INTERLINE_ENDED
};

inline const ODXEventType (&EnumValuesODXEventType())[6] {
  static const ODXEventType values[] = {
    ODXEventType::ORIGIN_BOARDED,
    ODXEventType::DESTINATION_ALIGHTED,
    ODXEventType::MID_JOURNEY_ALIGHTED,
    ODXEventType::MID_JOURNEY_BOARDED,
    ODXEventType::INTERLINE_STARTED,
    ODXEventType::INTERLINE_ENDED
  };
  return values;
}

inline const char * const *EnumNamesODXEventType() {
  static const char * const names[7] = {
    "ORIGIN_BOARDED",
    "DESTINATION_ALIGHTED",
    "MID_JOURNEY_ALIGHTED",
    "MID_JOURNEY_BOARDED",
    "INTERLINE_STARTED",
    "INTERLINE_ENDED",
    nullptr
  };
  return names;
}

inline const char *EnumNameODXEventType(ODXEventType e) {
  if (::flatbuffers::IsOutRange(e, ODXEventType::ORIGIN_BOARDED, ODXEventType::INTERLINE_ENDED)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesODXEventType()[index];
}

enum class ODXFareClass : uint8_t {
  UNKNOWN = 0,
  TRIMET_HONORED_CITIZEN = 1,
  TRIMET_ADULT = 2,
  TRIMET_STUDENT_PASS = 3,
  TRIMET_YOUTH = 4,
  TRIMET_COLLEGE_SELECT_TERM_PASS_WINTER_3_MONTH = 5,
  TRIMET_ADULT_1_MONTH_PASS = 6,
  TRIMET_UNIVERSAL_ANNUAL_PASS = 7,
  TRIMET_HONORED_CITIZEN_1_MONTH_PASS = 8,
  TRIMET_ADULT_EMV = 9,
  TRIMET_HONORED_CITIZEN_1_YEAR_PASS = 10,
  HONORED_CITIZEN_1_DAY_PASS_PV = 11,
  HONORED_CITIZEN_1_DAY_PASS = 12,
  HONORED_CITIZEN_2_HALF_HOUR_TICKET = 13,
  TRIMET_PARATRANSIT = 14,
  ADULT_1_DAY_PASS = 15,
  ADULT_1_DAY_PASS_PV = 16,
  TRIMET_YOUTH_1_MONTH_PASS = 17,
  ADULT_2_HALF_HOUR_TICKET = 18,
  TRIMET_ADULT_1_YEAR_PASS = 19,
  TRIMET_EMPLOYEE_PASS = 20,
  TRIMET_LIFT_1_MONTH_PASS = 21,
  YOUTH_1_DAY_PASS = 22,
  C_TRAN_EXPRESS_ANNUAL_PASS = 23,
  TRIMET_LIFT_1_YEAR_PASS = 24,
  TRIMET_COLLEGE_UNIVERSAL_TERM_PASS_WINTER_3_MONTH = 25,
  TRIMET_ANNUAL_PASS = 26,
  TRIMET_YOUTH_STUDENT_1_MONTH_PASS = 27,
  HONORED_CITIZEN_2_HALF_HOUR_TICKET_PV = 28,
  YOUTH_1_DAY_PASS_PV = 29,
  ADULT_2_HALF_HOUR_TICKET_PV = 30,
  C_TRAN_ADULT_REGIONAL_1_MONTH_PASS = 31,
  YOUTH_2_HALF_HOUR_TICKET = 32,
  TRIMET_COLLEGE_SELECT_TERM_PASS_SPRING_5_MONTH = 33,
  C_TRAN_EMPLOYEE_PASS = 34,
  TRIMET_YOUTH_1_YEAR_PASS = 35,
  YOUTH_2_HALF_HOUR_TICKET_PV = 36,
  C_TRAN_EXPRESS_1_MONTH_PASS = 37,
  C_TRAN_HONORED_CITIZEN_REGIONAL_1_MONTH_PASS = 38,
  C_TRAN_EXPRESS_1_DAY_PASS = 39,
  STREETCAR_EMPLOYEE_PASS = 40,
  C_TRAN_EXPRESS_2_HALF_HOUR_TICKET = 41,
  MIN = UNKNOWN,
  MAX = C_TRAN_EXPRESS_2_HALF_HOUR_TICKET
};

inline const ODXFareClass (&EnumValuesODXFareClass())[42] {
  static const ODXFareClass values[] = {
    ODXFareClass::UNKNOWN,
    ODXFareClass::TRIMET_HONORED_CITIZEN,
    ODXFareClass::TRIMET_ADULT,
    ODXFareClass::TRIMET_STUDENT_PASS,
    ODXFareClass::TRIMET_YOUTH,
    ODXFareClass::TRIMET_COLLEGE_SELECT_TERM_PASS_WINTER_3_MONTH,
    ODXFareClass::TRIMET_ADULT_1_MONTH_PASS,
    ODXFareClass::TRIMET_UNIVERSAL_ANNUAL_PASS,
    ODXFareClass::TRIMET_HONORED_CITIZEN_1_MONTH_PASS,
    ODXFareClass::TRIMET_ADULT_EMV,
    ODXFareClass::TRIMET_HONORED_CITIZEN_1_YEAR_PASS,
    ODXFareClass::HONORED_CITIZEN_1_DAY_PASS_PV,
    ODXFareClass::HONORED_CITIZEN_1_DAY_PASS,
    ODXFareClass::HONORED_CITIZEN_2_HALF_HOUR_TICKET,
    ODXFareClass::TRIMET_PARATRANSIT,
    ODXFareClass::ADULT_1_DAY_PASS,
    ODXFareClass::ADULT_1_DAY_PASS_PV,
    ODXFareClass::TRIMET_YOUTH_1_MONTH_PASS,
    ODXFareClass::ADULT_2_HALF_HOUR_TICKET,
    ODXFareClass::TRIMET_ADULT_1_YEAR_PASS,
    ODXFareClass::TRIMET_EMPLOYEE_PASS,
    ODXFareClass::TRIMET_LIFT_1_MONTH_PASS,
    ODXFareClass::YOUTH_1_DAY_PASS,
    ODXFareClass::C_TRAN_EXPRESS_ANNUAL_PASS,
    ODXFareClass::TRIMET_LIFT_1_YEAR_PASS,
    ODXFareClass::TRIMET_COLLEGE_UNIVERSAL_TERM_PASS_WINTER_3_MONTH,
    ODXFareClass::TRIMET_ANNUAL_PASS,
    ODXFareClass::TRIMET_YOUTH_STUDENT_1_MONTH_PASS,
    ODXFareClass::HONORED_CITIZEN_2_HALF_HOUR_TICKET_PV,
    ODXFareClass::YOUTH_1_DAY_PASS_PV,
    ODXFareClass::ADULT_2_HALF_HOUR_TICKET_PV,
    ODXFareClass::C_TRAN_ADULT_REGIONAL_1_MONTH_PASS,
    ODXFareClass::YOUTH_2_HALF_HOUR_TICKET,
    ODXFareClass::TRIMET_COLLEGE_SELECT_TERM_PASS_SPRING_5_MONTH,
    ODXFareClass::C_TRAN_EMPLOYEE_PASS,
    ODXFareClass::TRIMET_YOUTH_1_YEAR_PASS,
    ODXFareClass::YOUTH_2_HALF_HOUR_TICKET_PV,
    ODXFareClass::C_TRAN_EXPRESS_1_MONTH_PASS,
    ODXFareClass::C_TRAN_HONORED_CITIZEN_REGIONAL_1_MONTH_PASS,
    ODXFareClass::C_TRAN_EXPRESS_1_DAY_PASS,
    ODXFareClass::STREETCAR_EMPLOYEE_PASS,
    ODXFareClass::C_TRAN_EXPRESS_2_HALF_HOUR_TICKET
  };
  return values;
}

inline const char * const *EnumNamesODXFareClass() {
  static const char * const names[43] = {
    "UNKNOWN",
    "TRIMET_HONORED_CITIZEN",
    "TRIMET_ADULT",
    "TRIMET_STUDENT_PASS",
    "TRIMET_YOUTH",
    "TRIMET_COLLEGE_SELECT_TERM_PASS_WINTER_3_MONTH",
    "TRIMET_ADULT_1_MONTH_PASS",
    "TRIMET_UNIVERSAL_ANNUAL_PASS",
    "TRIMET_HONORED_CITIZEN_1_MONTH_PASS",
    "TRIMET_ADULT_EMV",
    "TRIMET_HONORED_CITIZEN_1_YEAR_PASS",
    "HONORED_CITIZEN_1_DAY_PASS_PV",
    "HONORED_CITIZEN_1_DAY_PASS",
    "HONORED_CITIZEN_2_HALF_HOUR_TICKET",
    "TRIMET_PARATRANSIT",
    "ADULT_1_DAY_PASS",
    "ADULT_1_DAY_PASS_PV",
    "TRIMET_YOUTH_1_MONTH_PASS",
    "ADULT_2_HALF_HOUR_TICKET",
    "TRIMET_ADULT_1_YEAR_PASS",
    "TRIMET_EMPLOYEE_PASS",
    "TRIMET_LIFT_1_MONTH_PASS",
    "YOUTH_1_DAY_PASS",
    "C_TRAN_EXPRESS_ANNUAL_PASS",
    "TRIMET_LIFT_1_YEAR_PASS",
    "TRIMET_COLLEGE_UNIVERSAL_TERM_PASS_WINTER_3_MONTH",
    "TRIMET_ANNUAL_PASS",
    "TRIMET_YOUTH_STUDENT_1_MONTH_PASS",
    "HONORED_CITIZEN_2_HALF_HOUR_TICKET_PV",
    "YOUTH_1_DAY_PASS_PV",
    "ADULT_2_HALF_HOUR_TICKET_PV",
    "C_TRAN_ADULT_REGIONAL_1_MONTH_PASS",
    "YOUTH_2_HALF_HOUR_TICKET",
    "TRIMET_COLLEGE_SELECT_TERM_PASS_SPRING_5_MONTH",
    "C_TRAN_EMPLOYEE_PASS",
    "TRIMET_YOUTH_1_YEAR_PASS",
    "YOUTH_2_HALF_HOUR_TICKET_PV",
    "C_TRAN_EXPRESS_1_MONTH_PASS",
    "C_TRAN_HONORED_CITIZEN_REGIONAL_1_MONTH_PASS",
    "C_TRAN_EXPRESS_1_DAY_PASS",
    "STREETCAR_EMPLOYEE_PASS",
    "C_TRAN_EXPRESS_2_HALF_HOUR_TICKET",
    nullptr
  };
  return names;
}

inline const char *EnumNameODXFareClass(ODXFareClass e) {
  if (::flatbuffers::IsOutRange(e, ODXFareClass::UNKNOWN, ODXFareClass::C_TRAN_EXPRESS_2_HALF_HOUR_TICKET)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesODXFareClass()[index];
}

enum class ODXFareCategory : uint8_t {
  UNKNOWN = 0,
  HONORED_CITIZEN = 1,
  ADULT = 2,
  YOUTH = 3,
  PARATRANSIT = 4,
  MIN = UNKNOWN,
  MAX = PARATRANSIT
};

inline const ODXFareCategory (&EnumValuesODXFareCategory())[5] {
  static const ODXFareCategory values[] = {
    ODXFareCategory::UNKNOWN,
    ODXFareCategory::HONORED_CITIZEN,
    ODXFareCategory::ADULT,
    ODXFareCategory::YOUTH,
    ODXFareCategory::PARATRANSIT
  };
  return values;
}

inline const char * const *EnumNamesODXFareCategory() {
  static const char * const names[6] = {
    "UNKNOWN",
    "HONORED_CITIZEN",
    "ADULT",
    "YOUTH",
    "PARATRANSIT",
    nullptr
  };
  return names;
}

inline const char *EnumNameODXFareCategory(ODXFareCategory e) {
  if (::flatbuffers::IsOutRange(e, ODXFareCategory::UNKNOWN, ODXFareCategory::PARATRANSIT)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesODXFareCategory()[index];
}

enum class LiftFareType : uint8_t {
  UNKNOWN = 0,
  HOP_PASS = 1,
  NO_PAY = 2,
  CASH = 3,
  PUNCH_CD = 4,
  AGENCY = 5,
  TICKET = 6,
  MNTH_PAS = 7,
  OTHER = 8,
  HC_2 = 9,
  HC_1 = 10,
  FREE_FARE = 11,
  TRS = 12,
  COM_CASH = 13,
  HOP_FAST_PASS = 14,
  USES_1_SEAT = 15,
  VALID_TRIMET_FARE = 16,
  LIFT_PASS = 17,
  AGENCY__USE_FS = 18,
  LIFT_20_RIDE_PUNCH_CARD = 19,
  LIFT_TICKET = 20,
  CASH_HC_1 = 21,
  TRANSFER = 22,
  CASH_FARE_FOR_COMPANION = 23,
  MIN = UNKNOWN,
  MAX = CASH_FARE_FOR_COMPANION
};

inline const LiftFareType (&EnumValuesLiftFareType())[24] {
  static const LiftFareType values[] = {
    LiftFareType::UNKNOWN,
    LiftFareType::HOP_PASS,
    LiftFareType::NO_PAY,
    LiftFareType::CASH,
    LiftFareType::PUNCH_CD,
    LiftFareType::AGENCY,
    LiftFareType::TICKET,
    LiftFareType::MNTH_PAS,
    LiftFareType::OTHER,
    LiftFareType::HC_2,
    LiftFareType::HC_1,
    LiftFareType::FREE_FARE,
    LiftFareType::TRS,
    LiftFareType::COM_CASH,
    LiftFareType::HOP_FAST_PASS,
    LiftFareType::USES_1_SEAT,
    LiftFareType::VALID_TRIMET_FARE,
    LiftFareType::LIFT_PASS,
    LiftFareType::AGENCY__USE_FS,
    LiftFareType::LIFT_20_RIDE_PUNCH_CARD,
    LiftFareType::LIFT_TICKET,
    LiftFareType::CASH_HC_1,
    LiftFareType::TRANSFER,
    LiftFareType::CASH_FARE_FOR_COMPANION
  };
  return values;
}

inline const char * const *EnumNamesLiftFareType() {
  static const char * const names[25] = {
    "UNKNOWN",
    "HOP_PASS",
    "NO_PAY",
    "CASH",
    "PUNCH_CD",
    "AGENCY",
    "TICKET",
    "MNTH_PAS",
    "OTHER",
    "HC_2",
    "HC_1",
    "FREE_FARE",
    "TRS",
    "COM_CASH",
    "HOP_FAST_PASS",
    "USES_1_SEAT",
    "VALID_TRIMET_FARE",
    "LIFT_PASS",
    "AGENCY__USE_FS",
    "LIFT_20_RIDE_PUNCH_CARD",
    "LIFT_TICKET",
    "CASH_HC_1",
    "TRANSFER",
    "CASH_FARE_FOR_COMPANION",
    nullptr
  };
  return names;
}

inline const char *EnumNameLiftFareType(LiftFareType e) {
  if (::flatbuffers::IsOutRange(e, LiftFareType::UNKNOWN, LiftFareType::CASH_FARE_FOR_COMPANION)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesLiftFareType()[index];
}

#endif  // FLATBUFFERS_GENERATED_TRIMET_H_
