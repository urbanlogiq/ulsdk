// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MODEL_H_
#define FLATBUFFERS_GENERATED_MODEL_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

#include "id_generated.h"

struct Model;
struct ModelBuilder;

struct Model FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ModelBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_SOURCE = 6,
    VT_LOCATION = 8
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  const ObjectId *location() const {
    return GetPointer<const ObjectId *>(VT_LOCATION);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffsetRequired(verifier, VT_LOCATION) &&
           verifier.VerifyTable(location()) &&
           verifier.EndTable();
  }
};

struct ModelBuilder {
  typedef Model Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Model::VT_NAME, name);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(Model::VT_SOURCE, source);
  }
  void add_location(::flatbuffers::Offset<ObjectId> location) {
    fbb_.AddOffset(Model::VT_LOCATION, location);
  }
  explicit ModelBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Model> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Model>(end);
    fbb_.Required(o, Model::VT_NAME);
    fbb_.Required(o, Model::VT_LOCATION);
    return o;
  }
};

inline ::flatbuffers::Offset<Model> CreateModel(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<ObjectId> location = 0) {
  ModelBuilder builder_(_fbb);
  builder_.add_location(location);
  builder_.add_source(source);
  builder_.add_name(name);
  return builder_.Finish();
}

struct Model::Traits {
  using type = Model;
  static auto constexpr Create = CreateModel;
};

inline ::flatbuffers::Offset<Model> CreateModelDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *source = nullptr,
    ::flatbuffers::Offset<ObjectId> location = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  return CreateModel(
      _fbb,
      name__,
      source__,
      location);
}

#endif  // FLATBUFFERS_GENERATED_MODEL_H_
