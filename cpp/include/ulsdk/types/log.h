// Copyright (c), CommunityLogiq Software
// 
// THIS FILE IS AUTOGENERATED, DO NOT EDIT

#pragma once

#include <cstdint>
#include <memory>
#include <optional>
#include <variant>
#include <vector>

#include "flatbuffers/flatbuffers.h"
#include "ulsdk/types/value.h"
#include "ulsdk/types/generated/log_generated.h"

namespace ul {
namespace types {

struct Label;
struct Log;
struct Pair;

using ::Severity;
struct Label {
    std::string key_;
    std::string value_;

    Label();
    Label(const ::Label *root);
    Label(const std::vector<uint8_t> &bytes);
};

struct Log {
    std::vector<Label> labels_;
    std::vector<Pair> pairs_;
    int64_t timestamp_;

    Log();
    Log(const ::Log *root);
    Log(const std::vector<uint8_t> &bytes);
};

struct Pair {
    std::string key_;
    Value value_;

    Pair();
    Pair(const ::Pair *root);
    Pair(const std::vector<uint8_t> &bytes);
};

::flatbuffers::Offset<::Label>
serialize_to(::flatbuffers::FlatBufferBuilder &builder, const Label &);

::flatbuffers::Offset<::Log>
serialize_to(::flatbuffers::FlatBufferBuilder &builder, const Log &);

::flatbuffers::Offset<::Pair>
serialize_to(::flatbuffers::FlatBufferBuilder &builder, const Pair &);


std::vector<uint8_t>
to_bytes(const Label &o);

std::vector<uint8_t>
to_bytes(const Log &o);

std::vector<uint8_t>
to_bytes(const Pair &o);


} // namespace types
} // namespace ul
