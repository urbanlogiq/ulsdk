// Copyright (c), CommunityLogiq Software
// 
// THIS FILE IS AUTOGENERATED, DO NOT EDIT

#pragma once

#include <cstdint>
#include <memory>
#include <optional>
#include <variant>
#include <vector>

#include "flatbuffers/flatbuffers.h"
#include "ulsdk/types/entity.h"
#include "ulsdk/types/id.h"
#include "ulsdk/types/generated/user_project_generated.h"

namespace ul {
namespace types {

struct CategoryFilter;
struct ColumnGroup;
struct DataStateGeometrySource;
struct DeprecatedDataStateJoin;
struct FieldFilter;
struct JoinStackEntry;
struct RangeFilter;
struct RawGeometrySource;
struct RawGeometrySourceGeom;
struct RelationshipRangeFilter;
struct StackableDataStateJoin;
struct UserLayer;
struct UserLayerDataState;
struct UserProject;

using ::AggregateOp;
using ::ColumnGroupType;
using ::FieldComparator;
typedef std::variant<
    std::shared_ptr<CategoryFilter>,
    std::shared_ptr<RangeFilter>,
    std::shared_ptr<RelationshipRangeFilter>
> Filter;

using ::JoinOperation;
typedef std::variant<
    std::shared_ptr<DataStateGeometrySource>,
    std::shared_ptr<RawGeometrySource>
> JoinStackEntryGeometrySourceUnion;

using ::JoinType;
using ::LayerCombineMode;
struct CategoryFilter {
    ColumnGroupId column_group_id_;
    FieldComparator comparator_;
    bool include_nulls_;
    std::vector<std::string> values_;

    CategoryFilter();
    CategoryFilter(const ::CategoryFilter *root);
    CategoryFilter(const std::vector<uint8_t> &bytes);
};

struct RangeFilter {
    ColumnGroupId column_group_id_;
    bool include_nulls_;
    float max_;
    float min_;

    RangeFilter();
    RangeFilter(const ::RangeFilter *root);
    RangeFilter(const std::vector<uint8_t> &bytes);
};

struct RelationshipRangeFilter {
    AggregateOp aggregate_op_;
    ColumnGroupId column_group_id_;
    std::vector<std::string> columns_;
    bool include_nulls_;
    float max_;
    float min_;

    RelationshipRangeFilter();
    RelationshipRangeFilter(const ::RelationshipRangeFilter *root);
    RelationshipRangeFilter(const std::vector<uint8_t> &bytes);
};

struct DataStateGeometrySource {
    DataStateId data_state_id_;

    DataStateGeometrySource();
    DataStateGeometrySource(const ::DataStateGeometrySource *root);
    DataStateGeometrySource(const std::vector<uint8_t> &bytes);
};

struct RawGeometrySource {
    std::vector<RawGeometrySourceGeom> geoms_;

    RawGeometrySource();
    RawGeometrySource(const ::RawGeometrySource *root);
    RawGeometrySource(const std::vector<uint8_t> &bytes);
};

struct ColumnGroup {
    std::vector<std::string> columns_;
    std::string display_name_;
    ColumnGroupId id_;
    std::optional<StreamId> stream_id_;
    ColumnGroupType ty_;

    ColumnGroup();
    ColumnGroup(const ::ColumnGroup *root);
    ColumnGroup(const std::vector<uint8_t> &bytes);
};

struct DeprecatedDataStateJoin {
    float distance_;
    DataStateId from_;
    JoinOperation operation_;
    DataStateId to_;

    DeprecatedDataStateJoin();
    DeprecatedDataStateJoin(const ::DeprecatedDataStateJoin *root);
    DeprecatedDataStateJoin(const std::vector<uint8_t> &bytes);
};

struct FieldFilter {
    Filter filter_;

    FieldFilter();
    FieldFilter(const ::FieldFilter *root);
    FieldFilter(const std::vector<uint8_t> &bytes);
};

struct JoinStackEntry {
    float buffer_;
    std::optional<DataStateId> deprecated_data_state_id_do_not_use_;
    JoinStackEntryGeometrySourceUnion geometry_source_;
    LayerCombineMode mode_;

    JoinStackEntry();
    JoinStackEntry(const ::JoinStackEntry *root);
    JoinStackEntry(const std::vector<uint8_t> &bytes);
};

struct RawGeometrySourceGeom {
    Geometry geom_;

    RawGeometrySourceGeom();
    RawGeometrySourceGeom(const ::RawGeometrySourceGeom *root);
    RawGeometrySourceGeom(const std::vector<uint8_t> &bytes);
};

struct StackableDataStateJoin {
    float buffer_;
    std::vector<JoinStackEntry> join_stack_;
    JoinOperation op_;
    DataStateId target_;
    JoinType type_;

    StackableDataStateJoin();
    StackableDataStateJoin(const ::StackableDataStateJoin *root);
    StackableDataStateJoin(const std::vector<uint8_t> &bytes);
};

struct UserLayer {
    std::vector<UserLayerDataState> data_states_;
    std::optional<std::vector<DeprecatedDataStateJoin>> deprecated_data_joins_do_not_use_;
    std::vector<StackableDataStateJoin> joins_;
    std::optional<std::string> name_;
    bool visible_;

    UserLayer();
    UserLayer(const ::UserLayer *root);
    UserLayer(const std::vector<uint8_t> &bytes);
};

struct UserLayerDataState {
    std::vector<ColumnGroup> active_fields_;
    DataStateId data_state_id_;
    std::vector<FieldFilter> filters_;
    StreamId stream_id_;

    UserLayerDataState();
    UserLayerDataState(const ::UserLayerDataState *root);
    UserLayerDataState(const std::vector<uint8_t> &bytes);
};

struct UserProject {
    GenericId id_;
    std::vector<UserLayer> layers_;
    std::optional<std::string> name_;

    UserProject();
    UserProject(const ::UserProject *root);
    UserProject(const std::vector<uint8_t> &bytes);
};

std::pair<::flatbuffers::Offset<void>, ::Filter>
serialize_to(::flatbuffers::FlatBufferBuilder &builder, const Filter &o);
std::pair<::flatbuffers::Offset<void>, ::JoinStackEntryGeometrySourceUnion>
serialize_to(::flatbuffers::FlatBufferBuilder &builder, const JoinStackEntryGeometrySourceUnion &o);
::flatbuffers::Offset<::CategoryFilter>
serialize_to(::flatbuffers::FlatBufferBuilder &builder, const CategoryFilter &);

::flatbuffers::Offset<::RangeFilter>
serialize_to(::flatbuffers::FlatBufferBuilder &builder, const RangeFilter &);

::flatbuffers::Offset<::RelationshipRangeFilter>
serialize_to(::flatbuffers::FlatBufferBuilder &builder, const RelationshipRangeFilter &);

::flatbuffers::Offset<::DataStateGeometrySource>
serialize_to(::flatbuffers::FlatBufferBuilder &builder, const DataStateGeometrySource &);

::flatbuffers::Offset<::RawGeometrySource>
serialize_to(::flatbuffers::FlatBufferBuilder &builder, const RawGeometrySource &);

::flatbuffers::Offset<::ColumnGroup>
serialize_to(::flatbuffers::FlatBufferBuilder &builder, const ColumnGroup &);

::flatbuffers::Offset<::DeprecatedDataStateJoin>
serialize_to(::flatbuffers::FlatBufferBuilder &builder, const DeprecatedDataStateJoin &);

::flatbuffers::Offset<::FieldFilter>
serialize_to(::flatbuffers::FlatBufferBuilder &builder, const FieldFilter &);

::flatbuffers::Offset<::JoinStackEntry>
serialize_to(::flatbuffers::FlatBufferBuilder &builder, const JoinStackEntry &);

::flatbuffers::Offset<::RawGeometrySourceGeom>
serialize_to(::flatbuffers::FlatBufferBuilder &builder, const RawGeometrySourceGeom &);

::flatbuffers::Offset<::StackableDataStateJoin>
serialize_to(::flatbuffers::FlatBufferBuilder &builder, const StackableDataStateJoin &);

::flatbuffers::Offset<::UserLayer>
serialize_to(::flatbuffers::FlatBufferBuilder &builder, const UserLayer &);

::flatbuffers::Offset<::UserLayerDataState>
serialize_to(::flatbuffers::FlatBufferBuilder &builder, const UserLayerDataState &);

::flatbuffers::Offset<::UserProject>
serialize_to(::flatbuffers::FlatBufferBuilder &builder, const UserProject &);


std::vector<uint8_t>
to_bytes(const CategoryFilter &o);

std::vector<uint8_t>
to_bytes(const RangeFilter &o);

std::vector<uint8_t>
to_bytes(const RelationshipRangeFilter &o);

std::vector<uint8_t>
to_bytes(const DataStateGeometrySource &o);

std::vector<uint8_t>
to_bytes(const RawGeometrySource &o);

std::vector<uint8_t>
to_bytes(const ColumnGroup &o);

std::vector<uint8_t>
to_bytes(const DeprecatedDataStateJoin &o);

std::vector<uint8_t>
to_bytes(const FieldFilter &o);

std::vector<uint8_t>
to_bytes(const JoinStackEntry &o);

std::vector<uint8_t>
to_bytes(const RawGeometrySourceGeom &o);

std::vector<uint8_t>
to_bytes(const StackableDataStateJoin &o);

std::vector<uint8_t>
to_bytes(const UserLayer &o);

std::vector<uint8_t>
to_bytes(const UserLayerDataState &o);

std::vector<uint8_t>
to_bytes(const UserProject &o);


} // namespace types
} // namespace ul
