// Copyright (c), CommunityLogiq Software
// 
// THIS FILE IS AUTOGENERATED, DO NOT EDIT

#pragma once

#include <cstdint>
#include <memory>
#include <optional>
#include <variant>
#include <vector>

#include "flatbuffers/flatbuffers.h"
#include "ulsdk/types/Schema.h"
#include "ulsdk/types/data.h"
#include "ulsdk/types/id.h"
#include "ulsdk/types/reflection.h"
#include "ulsdk/types/value.h"
#include "ulsdk/types/generated/job_generated.h"

namespace ul {
namespace types {

struct DeprecatedRunSpec;
struct DeprecatedTaskParameter;
struct Edge;
struct EmbeddedTable;
struct Job;
struct Node;
struct ParamIndices;
struct RunSpec;
struct Schematic;
struct Task;
struct TaskList;
struct TaskParameter;

using ::Status;
using ::TaskErrorTy;
typedef std::variant<
    std::shared_ptr<ObjectId>,
    std::shared_ptr<EmbeddedTable>,
    std::shared_ptr<ValueInstance>
> TaskParameterValue;

using ::TaskPriority;
using ::TaskRunFlags;
struct EmbeddedTable {
    std::vector<uint8_t> v_;

    EmbeddedTable();
    EmbeddedTable(const ::EmbeddedTable *root);
    EmbeddedTable(const std::vector<uint8_t> &bytes);
};

struct DeprecatedRunSpec {
    std::vector<ParamIndices> param_indices_;
    std::vector<DeprecatedTaskParameter> params_;
    bool persist_;
    ObjectId schematic_;

    DeprecatedRunSpec();
    DeprecatedRunSpec(const ::DeprecatedRunSpec *root);
    DeprecatedRunSpec(const std::vector<uint8_t> &bytes);
};

struct DeprecatedTaskParameter {
    int64_t flags_;
    std::string key_;
    std::optional<ObjectId> obj_;
    std::optional<std::vector<uint8_t>> value_;

    DeprecatedTaskParameter();
    DeprecatedTaskParameter(const ::DeprecatedTaskParameter *root);
    DeprecatedTaskParameter(const std::vector<uint8_t> &bytes);
};

struct Edge {
    uint32_t from_;
    uint32_t to_;

    Edge();
    Edge(const ::Edge *root);
    Edge(const std::vector<uint8_t> &bytes);
};

struct Job {
    std::optional<std::vector<TaskErrorTy>> error_tys_;
    std::vector<TaskParameter> params_;
    Status status_;
    std::vector<Task> tasks_;
    ObjectId user_id_;

    Job();
    Job(const ::Job *root);
    Job(const std::vector<uint8_t> &bytes);
};

struct Node {
    std::string name_;
    ObjectId obj_;

    Node();
    Node(const ::Node *root);
    Node(const std::vector<uint8_t> &bytes);
};

struct ParamIndices {
    std::vector<int32_t> idxs_;

    ParamIndices();
    ParamIndices(const ::ParamIndices *root);
    ParamIndices(const std::vector<uint8_t> &bytes);
};

///
/// A RunSpec is the data required in order to kickstart a schematic job.
/// It includes the ID of the schematic to run along with the parameters.
/// The param_indices list must be *exactly* as long as the nodes list in
/// the Schematic. Each entry in the param_indices list is itself a list
/// that points to all the parameters in the params array. This lets
/// us reuse the task parameters across nodes (ie: if we want a shared
/// start_date / end_date to be used in a number of calculations)
///
struct RunSpec {
    bool notify_;
    std::vector<ParamIndices> param_indices_;
    std::vector<TaskParameter> params_;
    bool persist_;
    TaskPriority priority_;
    ObjectId schematic_;

    RunSpec();
    RunSpec(const ::RunSpec *root);
    RunSpec(const std::vector<uint8_t> &bytes);
};

struct Schematic {
    std::vector<AttributePair> attributes_;
    std::vector<Edge> edges_;
    std::optional<std::string> name_;
    std::vector<Node> nodes_;

    Schematic();
    Schematic(const ::Schematic *root);
    Schematic(const std::vector<uint8_t> &bytes);
};

struct Task {
    ObjectId _id_;
    int32_t barrier_count_;
    uint64_t created_;
    bool discard_;
    std::vector<ObjectId> downstream_;
    uint64_t end_;
    TaskErrorTy error_ty_;
    int32_t flags_;
    ObjectId job_id_;
    uint64_t last_updated_;
    std::optional<std::string> last_updated_by_pod_;
    std::optional<std::string> message_;
    std::string name_;
    ObjectId output_;
    ParamIndices params_;
    int32_t retries_;
    std::optional<ObjectId> schematic_id_;
    uint64_t start_;
    Status status_;
    ObjectId task_;
    std::vector<ObjectId> upstream_;
    ObjectId user_id_;

    Task();
    Task(const ::Task *root);
    Task(const std::vector<uint8_t> &bytes);
};

struct TaskList {
    std::vector<Task> tasks_;

    TaskList();
    TaskList(const ::TaskList *root);
    TaskList(const std::vector<uint8_t> &bytes);
};

struct TaskParameter {
    std::string key_;
    TaskParameterValue value_;

    TaskParameter();
    TaskParameter(const ::TaskParameter *root);
    TaskParameter(const std::vector<uint8_t> &bytes);
};

std::pair<::flatbuffers::Offset<void>, ::TaskParameterValue>
serialize_to(::flatbuffers::FlatBufferBuilder &builder, const TaskParameterValue &o);
::flatbuffers::Offset<::EmbeddedTable>
serialize_to(::flatbuffers::FlatBufferBuilder &builder, const EmbeddedTable &);

::flatbuffers::Offset<::DeprecatedRunSpec>
serialize_to(::flatbuffers::FlatBufferBuilder &builder, const DeprecatedRunSpec &);

::flatbuffers::Offset<::DeprecatedTaskParameter>
serialize_to(::flatbuffers::FlatBufferBuilder &builder, const DeprecatedTaskParameter &);

::flatbuffers::Offset<::Edge>
serialize_to(::flatbuffers::FlatBufferBuilder &builder, const Edge &);

::flatbuffers::Offset<::Job>
serialize_to(::flatbuffers::FlatBufferBuilder &builder, const Job &);

::flatbuffers::Offset<::Node>
serialize_to(::flatbuffers::FlatBufferBuilder &builder, const Node &);

::flatbuffers::Offset<::ParamIndices>
serialize_to(::flatbuffers::FlatBufferBuilder &builder, const ParamIndices &);

::flatbuffers::Offset<::RunSpec>
serialize_to(::flatbuffers::FlatBufferBuilder &builder, const RunSpec &);

::flatbuffers::Offset<::Schematic>
serialize_to(::flatbuffers::FlatBufferBuilder &builder, const Schematic &);

::flatbuffers::Offset<::Task>
serialize_to(::flatbuffers::FlatBufferBuilder &builder, const Task &);

::flatbuffers::Offset<::TaskList>
serialize_to(::flatbuffers::FlatBufferBuilder &builder, const TaskList &);

::flatbuffers::Offset<::TaskParameter>
serialize_to(::flatbuffers::FlatBufferBuilder &builder, const TaskParameter &);


std::vector<uint8_t>
to_bytes(const EmbeddedTable &o);

std::vector<uint8_t>
to_bytes(const DeprecatedRunSpec &o);

std::vector<uint8_t>
to_bytes(const DeprecatedTaskParameter &o);

std::vector<uint8_t>
to_bytes(const Edge &o);

std::vector<uint8_t>
to_bytes(const Job &o);

std::vector<uint8_t>
to_bytes(const Node &o);

std::vector<uint8_t>
to_bytes(const ParamIndices &o);

std::vector<uint8_t>
to_bytes(const RunSpec &o);

std::vector<uint8_t>
to_bytes(const Schematic &o);

std::vector<uint8_t>
to_bytes(const Task &o);

std::vector<uint8_t>
to_bytes(const TaskList &o);

std::vector<uint8_t>
to_bytes(const TaskParameter &o);


} // namespace types
} // namespace ul
