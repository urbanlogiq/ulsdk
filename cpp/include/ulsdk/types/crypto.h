// Copyright (c), CommunityLogiq Software
// 
// THIS FILE IS AUTOGENERATED, DO NOT EDIT

#pragma once

#include <cstdint>
#include <memory>
#include <optional>
#include <variant>
#include <vector>

#include "flatbuffers/flatbuffers.h"
#include "ulsdk/types/generated/crypto_generated.h"

namespace ul {
namespace types {

struct CryptHeader;
struct EncryptedObject;
struct Sha256;
struct Signature;

typedef std::variant<
    std::shared_ptr<Sha256>
> Digest;

struct Sha256 {
    std::vector<uint8_t> b_;

    Sha256();
    Sha256(const ::Sha256 *root);
    Sha256(const std::vector<uint8_t> &bytes);
};

struct CryptHeader {
    std::string kid_;
    std::vector<uint8_t> nonce_;
    uint32_t plaintext_len_;

    CryptHeader();
    CryptHeader(const ::CryptHeader *root);
    CryptHeader(const std::vector<uint8_t> &bytes);
};

struct EncryptedObject {
    CryptHeader header_;
    std::vector<uint8_t> obj_;

    EncryptedObject();
    EncryptedObject(const ::EncryptedObject *root);
    EncryptedObject(const std::vector<uint8_t> &bytes);
};

struct Signature {
    std::string kid_;
    std::vector<uint8_t> sig_;

    Signature();
    Signature(const ::Signature *root);
    Signature(const std::vector<uint8_t> &bytes);
};

std::pair<::flatbuffers::Offset<void>, ::Digest>
serialize_to(::flatbuffers::FlatBufferBuilder &builder, const Digest &o);
::flatbuffers::Offset<::Sha256>
serialize_to(::flatbuffers::FlatBufferBuilder &builder, const Sha256 &);

::flatbuffers::Offset<::CryptHeader>
serialize_to(::flatbuffers::FlatBufferBuilder &builder, const CryptHeader &);

::flatbuffers::Offset<::EncryptedObject>
serialize_to(::flatbuffers::FlatBufferBuilder &builder, const EncryptedObject &);

::flatbuffers::Offset<::Signature>
serialize_to(::flatbuffers::FlatBufferBuilder &builder, const Signature &);


std::vector<uint8_t>
to_bytes(const Sha256 &o);

std::vector<uint8_t>
to_bytes(const CryptHeader &o);

std::vector<uint8_t>
to_bytes(const EncryptedObject &o);

std::vector<uint8_t>
to_bytes(const Signature &o);


} // namespace types
} // namespace ul
