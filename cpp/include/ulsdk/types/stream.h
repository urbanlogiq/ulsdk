// Copyright (c), CommunityLogiq Software
// 
// THIS FILE IS AUTOGENERATED, DO NOT EDIT

#pragma once

#include <cstdint>
#include <memory>
#include <optional>
#include <variant>
#include <vector>

#include "flatbuffers/flatbuffers.h"
#include "ulsdk/types/Schema.h"
#include "ulsdk/types/id.h"
#include "ulsdk/types/generated/stream_generated.h"

namespace ul {
namespace types {

struct Stream;

using ::AxisType;
using ::FormatFlags;
using ::StreamFlags;
///
/// A Stream is an instance of a source. The main difference is the parameters
/// field is not a ParameterDesc descriptor object but the actual, serialized
/// parameter values.
///
/// Code performing the operation on the source will be able to construct a
/// stream object from this description and downstream code will be able to
/// read from it.
///
struct Stream {
    uint32_t flags_;
    std::optional<ObjectId> metadata_;
    std::optional<ContentId> metadata_revision_;
    std::optional<std::vector<uint8_t>> options_;
    std::optional<std::vector<uint8_t>> parameters_;
    Schema schema_;
    std::optional<std::vector<ObjectId>> substreams_;
    std::string url_;

    Stream();
    Stream(const ::Stream *root);
    Stream(const std::vector<uint8_t> &bytes);
};

::flatbuffers::Offset<::Stream>
serialize_to(::flatbuffers::FlatBufferBuilder &builder, const Stream &);


std::vector<uint8_t>
to_bytes(const Stream &o);


} // namespace types
} // namespace ul
