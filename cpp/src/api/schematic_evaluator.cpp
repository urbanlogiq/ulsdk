// Copyright (c), CommunityLogiq Software
// 
// THIS FILE IS AUTOGENERATED, DO NOT EDIT

#include <cassert>
#include <cstring>
#include <cstdlib>
#include <sstream>
#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
#endif
#include <arrow/record_batch.h>
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#include "ulsdk/ulsdk.h"
#include "ulsdk/external/json.h"
#include "ulsdk/api/schematic_evaluator.h"

namespace ul {
namespace api {
namespace schematic_evaluator {

Result<::ul::types::ObjectId>
create_job(
    ul::RequestContext &ctx,
    const ::ul::types::RunSpec &job
) {
    std::string path = "/v1/api/ulv2/schematicevaluator/jobs";

    std::map<std::string, std::string> params;

    std::map<std::string, std::string> headers;
    const std::vector<uint8_t> body = ::ul::types::to_bytes(job);
    const Result<std::vector<uint8_t>> res = ctx.post(path, body, "application/octet-stream", params, headers);
    if (std::holds_alternative<Error>(res)) {
        const auto error = std::get<Error>(res);
        return Result<::ul::types::ObjectId>(error);
    }
    return ::ul::types::ObjectId(std::get<std::vector<uint8_t>>(res));
}

Result<::ul::types::Job>
get_job(
    ul::RequestContext &ctx,
    const Uuid &id,
    std::optional<int64_t> timeout
) {
    std::string path = "/v1/api/ulv2/schematicevaluator/jobs/:id";
    const size_t id_idx = path.find(":id");
    path.replace(id_idx, 2, id.to_string());

    std::map<std::string, std::string> params;
    if (timeout.has_value()) {
        const auto timeout_value = timeout.value();
        params["timeout"] = std::to_string(timeout_value);
    }

    std::map<std::string, std::string> headers;
    const Result<std::vector<uint8_t>> res = ctx.get(path, params, headers);
    if (std::holds_alternative<Error>(res)) {
        const auto error = std::get<Error>(res);
        return Result<::ul::types::Job>(error);
    }
    return ::ul::types::Job(std::get<std::vector<uint8_t>>(res));
}

Result<::ul::types::Task>
get_task(
    ul::RequestContext &ctx,
    const Uuid &id
) {
    std::string path = "/v1/api/ulv2/schematicevaluator/tasks/:id";
    const size_t id_idx = path.find(":id");
    path.replace(id_idx, 2, id.to_string());

    std::map<std::string, std::string> params;

    std::map<std::string, std::string> headers;
    const Result<std::vector<uint8_t>> res = ctx.get(path, params, headers);
    if (std::holds_alternative<Error>(res)) {
        const auto error = std::get<Error>(res);
        return Result<::ul::types::Task>(error);
    }
    return ::ul::types::Task(std::get<std::vector<uint8_t>>(res));
}

} // namespace schematic_evaluator
} // namespace api
} // namespace ul
