// Copyright (c), CommunityLogiq Software

mod api_key_context;

use async_trait::async_trait;
use bytes::Bytes;
use reqwest::header::HeaderMap;
use serde::Deserialize;
use std::collections::HashMap;
use uuid::Uuid;

use crate::error::Error;
pub use crate::request_context::api_key_context::ApiKeyContext;
use crate::{Environment, Region};

const DELAYS: &[u64] = &[25, 50, 100, 200, 400];

pub type ParamMap = HashMap<String, String>;

pub struct File {
    pub name: String,
    pub mimetype: String,
    pub data: Bytes,
}

#[async_trait]
pub trait RequestContext {
    fn region(&self) -> Region;
    fn environment(&self) -> Environment;
    async fn get(
        &self,
        path: &str,
        params: Option<ParamMap>,
        headers: Option<HeaderMap>,
    ) -> Result<Vec<u8>, Error>;
    async fn put(
        &self,
        path: &str,
        body: Bytes,
        mimetype: &str,
        params: Option<ParamMap>,
        headers: Option<HeaderMap>,
    ) -> Result<Vec<u8>, Error>;
    async fn post(
        &self,
        path: &str,
        body: Bytes,
        mimetype: &str,
        params: Option<ParamMap>,
        headers: Option<HeaderMap>,
    ) -> Result<Vec<u8>, Error>;
    async fn upload(&self, path: &str, files: Vec<File>) -> Result<(), Error>;
    async fn delete(
        &self,
        path: &str,
        params: Option<ParamMap>,
        headers: Option<HeaderMap>,
    ) -> Result<Vec<u8>, Error>;
}

#[derive(Deserialize)]
pub struct AdGroup {
    pub id: Uuid,
    #[serde(rename = "displayName")]
    pub display_name: String,
}

#[derive(Deserialize)]
pub struct AdUser {
    #[serde(rename = "displayName")]
    pub display_name: String,
    pub id: Uuid,
    #[serde(rename = "userPrincipalName")]
    pub user_principal_name: String,
    pub department: String,
}

#[derive(Deserialize)]
pub struct Bootstrap {
    pub user: AdUser,
    pub groups: Vec<AdGroup>,
}

fn get_endpoint(region: Region, environment: Environment, api: &str) -> String {
    let base = match (region, environment) {
        (Region::CA, Environment::Prod) => "https://home.urbanlogiq.ca",
        (Region::CA, Environment::Stage) => "https://stage.urbanlogiq.ca",
        (Region::US, Environment::Prod) => "https://home.urbanlogiq.us",
        (Region::US, Environment::Stage) => "https://stage.urbanlogiq.us",
    };

    format!("{}{}", base, api)
}

pub async fn get_bootstrap(ctx: &dyn RequestContext) -> Result<Bootstrap, Error> {
    // TODO: move this to autogenerated docs
    let raw = ctx.get("/v1/bootstrap/", None, None).await?;
    let bootstrap: Bootstrap = serde_json::from_slice(&raw)?;

    Ok(bootstrap)
}
